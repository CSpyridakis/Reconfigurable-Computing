// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _my_ip_hls_HH_
#define _my_ip_hls_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct my_ip_hls : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > slaveIn_TDATA;
    sc_in< sc_logic > slaveIn_TVALID;
    sc_out< sc_logic > slaveIn_TREADY;
    sc_in< sc_lv<4> > slaveIn_TSTRB;
    sc_in< sc_lv<1> > slaveIn_TLAST;
    sc_out< sc_lv<32> > MasterOut_TDATA;
    sc_out< sc_logic > MasterOut_TVALID;
    sc_in< sc_logic > MasterOut_TREADY;
    sc_out< sc_lv<4> > MasterOut_TSTRB;
    sc_out< sc_lv<1> > MasterOut_TLAST;


    // Module declarations
    my_ip_hls(sc_module_name name);
    SC_HAS_PROCESS(my_ip_hls);

    ~my_ip_hls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > MasterOut_V_data_V_1_data_out;
    sc_signal< sc_logic > MasterOut_V_data_V_1_vld_in;
    sc_signal< sc_logic > MasterOut_V_data_V_1_vld_out;
    sc_signal< sc_logic > MasterOut_V_data_V_1_ack_in;
    sc_signal< sc_logic > MasterOut_V_data_V_1_ack_out;
    sc_signal< sc_lv<32> > MasterOut_V_data_V_1_payload_A;
    sc_signal< sc_lv<32> > MasterOut_V_data_V_1_payload_B;
    sc_signal< sc_logic > MasterOut_V_data_V_1_sel_rd;
    sc_signal< sc_logic > MasterOut_V_data_V_1_sel_wr;
    sc_signal< sc_logic > MasterOut_V_data_V_1_sel;
    sc_signal< sc_logic > MasterOut_V_data_V_1_load_A;
    sc_signal< sc_logic > MasterOut_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > MasterOut_V_data_V_1_state;
    sc_signal< sc_logic > MasterOut_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > MasterOut_V_strb_V_1_data_out;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_vld_in;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_vld_out;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_ack_in;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_ack_out;
    sc_signal< sc_lv<4> > MasterOut_V_strb_V_1_payload_A;
    sc_signal< sc_lv<4> > MasterOut_V_strb_V_1_payload_B;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_sel_wr;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_sel;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_load_A;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_load_B;
    sc_signal< sc_lv<2> > MasterOut_V_strb_V_1_state;
    sc_signal< sc_logic > MasterOut_V_strb_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > MasterOut_V_last_V_1_data_out;
    sc_signal< sc_logic > MasterOut_V_last_V_1_vld_in;
    sc_signal< sc_logic > MasterOut_V_last_V_1_vld_out;
    sc_signal< sc_logic > MasterOut_V_last_V_1_ack_in;
    sc_signal< sc_logic > MasterOut_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > MasterOut_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > MasterOut_V_last_V_1_payload_B;
    sc_signal< sc_logic > MasterOut_V_last_V_1_sel_rd;
    sc_signal< sc_logic > MasterOut_V_last_V_1_sel_wr;
    sc_signal< sc_logic > MasterOut_V_last_V_1_sel;
    sc_signal< sc_logic > MasterOut_V_last_V_1_load_A;
    sc_signal< sc_logic > MasterOut_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > MasterOut_V_last_V_1_state;
    sc_signal< sc_logic > MasterOut_V_last_V_1_state_cmp_full;
    sc_signal< sc_logic > slaveIn_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< sc_lv<2> > ap_CS_iter2_fsm;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state3;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_42_p5;
    sc_signal< sc_logic > MasterOut_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_reg_89;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_tmp_reg_89;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<32> > tmp_data_V_reg_93;
    sc_signal< sc_lv<4> > tmp_strb_V_reg_98;
    sc_signal< sc_lv<1> > tmp_last_V_reg_103;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter2_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter2_fsm_state3;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const sc_lv<2> ap_ST_iter2_fsm_state0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_MasterOut_TDATA();
    void thread_MasterOut_TDATA_blk_n();
    void thread_MasterOut_TLAST();
    void thread_MasterOut_TSTRB();
    void thread_MasterOut_TVALID();
    void thread_MasterOut_V_data_V_1_ack_in();
    void thread_MasterOut_V_data_V_1_ack_out();
    void thread_MasterOut_V_data_V_1_data_out();
    void thread_MasterOut_V_data_V_1_load_A();
    void thread_MasterOut_V_data_V_1_load_B();
    void thread_MasterOut_V_data_V_1_sel();
    void thread_MasterOut_V_data_V_1_state_cmp_full();
    void thread_MasterOut_V_data_V_1_vld_in();
    void thread_MasterOut_V_data_V_1_vld_out();
    void thread_MasterOut_V_last_V_1_ack_in();
    void thread_MasterOut_V_last_V_1_ack_out();
    void thread_MasterOut_V_last_V_1_data_out();
    void thread_MasterOut_V_last_V_1_load_A();
    void thread_MasterOut_V_last_V_1_load_B();
    void thread_MasterOut_V_last_V_1_sel();
    void thread_MasterOut_V_last_V_1_state_cmp_full();
    void thread_MasterOut_V_last_V_1_vld_in();
    void thread_MasterOut_V_last_V_1_vld_out();
    void thread_MasterOut_V_strb_V_1_ack_in();
    void thread_MasterOut_V_strb_V_1_ack_out();
    void thread_MasterOut_V_strb_V_1_data_out();
    void thread_MasterOut_V_strb_V_1_load_A();
    void thread_MasterOut_V_strb_V_1_load_B();
    void thread_MasterOut_V_strb_V_1_sel();
    void thread_MasterOut_V_strb_V_1_state_cmp_full();
    void thread_MasterOut_V_strb_V_1_vld_in();
    void thread_MasterOut_V_strb_V_1_vld_out();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_CS_iter2_fsm_state3();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_rst_n_inv();
    void thread_slaveIn_TDATA_blk_n();
    void thread_slaveIn_TREADY();
    void thread_tmp_nbreadreq_fu_42_p5();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_ap_NS_iter2_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
