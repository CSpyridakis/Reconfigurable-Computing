// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="my_ip_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=130,HLS_SYN_LUT=232}" *)

module my_ip_hls (
        ap_clk,
        ap_rst_n,
        slaveIn_TDATA,
        slaveIn_TVALID,
        slaveIn_TREADY,
        slaveIn_TSTRB,
        slaveIn_TLAST,
        MasterOut_TDATA,
        MasterOut_TVALID,
        MasterOut_TREADY,
        MasterOut_TSTRB,
        MasterOut_TLAST
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] slaveIn_TDATA;
input   slaveIn_TVALID;
output   slaveIn_TREADY;
input  [3:0] slaveIn_TSTRB;
input  [0:0] slaveIn_TLAST;
output  [31:0] MasterOut_TDATA;
output   MasterOut_TVALID;
input   MasterOut_TREADY;
output  [3:0] MasterOut_TSTRB;
output  [0:0] MasterOut_TLAST;

reg slaveIn_TREADY;

reg    ap_rst_n_inv;
reg   [31:0] MasterOut_V_data_V_1_data_out;
reg    MasterOut_V_data_V_1_vld_in;
wire    MasterOut_V_data_V_1_vld_out;
wire    MasterOut_V_data_V_1_ack_in;
wire    MasterOut_V_data_V_1_ack_out;
reg   [31:0] MasterOut_V_data_V_1_payload_A;
reg   [31:0] MasterOut_V_data_V_1_payload_B;
reg    MasterOut_V_data_V_1_sel_rd;
reg    MasterOut_V_data_V_1_sel_wr;
wire    MasterOut_V_data_V_1_sel;
wire    MasterOut_V_data_V_1_load_A;
wire    MasterOut_V_data_V_1_load_B;
reg   [1:0] MasterOut_V_data_V_1_state;
wire    MasterOut_V_data_V_1_state_cmp_full;
reg   [3:0] MasterOut_V_strb_V_1_data_out;
reg    MasterOut_V_strb_V_1_vld_in;
wire    MasterOut_V_strb_V_1_vld_out;
wire    MasterOut_V_strb_V_1_ack_in;
wire    MasterOut_V_strb_V_1_ack_out;
reg   [3:0] MasterOut_V_strb_V_1_payload_A;
reg   [3:0] MasterOut_V_strb_V_1_payload_B;
reg    MasterOut_V_strb_V_1_sel_rd;
reg    MasterOut_V_strb_V_1_sel_wr;
wire    MasterOut_V_strb_V_1_sel;
wire    MasterOut_V_strb_V_1_load_A;
wire    MasterOut_V_strb_V_1_load_B;
reg   [1:0] MasterOut_V_strb_V_1_state;
wire    MasterOut_V_strb_V_1_state_cmp_full;
reg   [0:0] MasterOut_V_last_V_1_data_out;
reg    MasterOut_V_last_V_1_vld_in;
wire    MasterOut_V_last_V_1_vld_out;
wire    MasterOut_V_last_V_1_ack_in;
wire    MasterOut_V_last_V_1_ack_out;
reg   [0:0] MasterOut_V_last_V_1_payload_A;
reg   [0:0] MasterOut_V_last_V_1_payload_B;
reg    MasterOut_V_last_V_1_sel_rd;
reg    MasterOut_V_last_V_1_sel_wr;
wire    MasterOut_V_last_V_1_sel;
wire    MasterOut_V_last_V_1_load_A;
wire    MasterOut_V_last_V_1_load_B;
reg   [1:0] MasterOut_V_last_V_1_state;
wire    MasterOut_V_last_V_1_state_cmp_full;
reg    slaveIn_TDATA_blk_n;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] tmp_nbreadreq_fu_42_p5;
reg    MasterOut_TDATA_blk_n;
reg   [0:0] tmp_reg_89;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_89;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg   [31:0] tmp_data_V_reg_93;
reg   [3:0] tmp_strb_V_reg_98;
reg   [0:0] tmp_last_V_reg_103;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;

// power-on initialization
initial begin
#0 MasterOut_V_data_V_1_sel_rd = 1'b0;
#0 MasterOut_V_data_V_1_sel_wr = 1'b0;
#0 MasterOut_V_data_V_1_state = 2'd0;
#0 MasterOut_V_strb_V_1_sel_rd = 1'b0;
#0 MasterOut_V_strb_V_1_sel_wr = 1'b0;
#0 MasterOut_V_strb_V_1_state = 2'd0;
#0 MasterOut_V_last_V_1_sel_rd = 1'b0;
#0 MasterOut_V_last_V_1_sel_wr = 1'b0;
#0 MasterOut_V_last_V_1_state = 2'd0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_data_V_1_ack_out) & (1'b1 == MasterOut_V_data_V_1_vld_out))) begin
            MasterOut_V_data_V_1_sel_rd <= ~MasterOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_data_V_1_ack_in) & (1'b1 == MasterOut_V_data_V_1_vld_in))) begin
            MasterOut_V_data_V_1_sel_wr <= ~MasterOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == MasterOut_V_data_V_1_vld_in) & (2'd2 == MasterOut_V_data_V_1_state)) | ((1'b0 == MasterOut_V_data_V_1_vld_in) & (1'b1 == MasterOut_V_data_V_1_ack_out) & (2'd3 == MasterOut_V_data_V_1_state)))) begin
            MasterOut_V_data_V_1_state <= 2'd2;
        end else if ((((1'b0 == MasterOut_V_data_V_1_ack_out) & (2'd1 == MasterOut_V_data_V_1_state)) | ((1'b0 == MasterOut_V_data_V_1_ack_out) & (1'b1 == MasterOut_V_data_V_1_vld_in) & (2'd3 == MasterOut_V_data_V_1_state)))) begin
            MasterOut_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MasterOut_V_data_V_1_vld_in) & (1'b1 == MasterOut_V_data_V_1_ack_out)) & ~((1'b0 == MasterOut_V_data_V_1_ack_out) & (1'b1 == MasterOut_V_data_V_1_vld_in)) & (2'd3 == MasterOut_V_data_V_1_state)) | ((1'b1 == MasterOut_V_data_V_1_ack_out) & (2'd1 == MasterOut_V_data_V_1_state)) | ((1'b1 == MasterOut_V_data_V_1_vld_in) & (2'd2 == MasterOut_V_data_V_1_state)))) begin
            MasterOut_V_data_V_1_state <= 2'd3;
        end else begin
            MasterOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_last_V_1_ack_out) & (1'b1 == MasterOut_V_last_V_1_vld_out))) begin
            MasterOut_V_last_V_1_sel_rd <= ~MasterOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_last_V_1_ack_in) & (1'b1 == MasterOut_V_last_V_1_vld_in))) begin
            MasterOut_V_last_V_1_sel_wr <= ~MasterOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == MasterOut_V_last_V_1_vld_in) & (2'd2 == MasterOut_V_last_V_1_state)) | ((1'b0 == MasterOut_V_last_V_1_vld_in) & (2'd3 == MasterOut_V_last_V_1_state) & (1'b1 == MasterOut_V_last_V_1_ack_out)))) begin
            MasterOut_V_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == MasterOut_V_last_V_1_ack_out) & (2'd1 == MasterOut_V_last_V_1_state)) | ((1'b0 == MasterOut_V_last_V_1_ack_out) & (2'd3 == MasterOut_V_last_V_1_state) & (1'b1 == MasterOut_V_last_V_1_vld_in)))) begin
            MasterOut_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MasterOut_V_last_V_1_vld_in) & (1'b1 == MasterOut_V_last_V_1_ack_out)) & ~((1'b0 == MasterOut_V_last_V_1_ack_out) & (1'b1 == MasterOut_V_last_V_1_vld_in)) & (2'd3 == MasterOut_V_last_V_1_state)) | ((2'd1 == MasterOut_V_last_V_1_state) & (1'b1 == MasterOut_V_last_V_1_ack_out)) | ((2'd2 == MasterOut_V_last_V_1_state) & (1'b1 == MasterOut_V_last_V_1_vld_in)))) begin
            MasterOut_V_last_V_1_state <= 2'd3;
        end else begin
            MasterOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_strb_V_1_ack_out) & (1'b1 == MasterOut_V_strb_V_1_vld_out))) begin
            MasterOut_V_strb_V_1_sel_rd <= ~MasterOut_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MasterOut_V_strb_V_1_ack_in) & (1'b1 == MasterOut_V_strb_V_1_vld_in))) begin
            MasterOut_V_strb_V_1_sel_wr <= ~MasterOut_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MasterOut_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == MasterOut_V_strb_V_1_vld_in) & (2'd2 == MasterOut_V_strb_V_1_state)) | ((1'b0 == MasterOut_V_strb_V_1_vld_in) & (2'd3 == MasterOut_V_strb_V_1_state) & (1'b1 == MasterOut_V_strb_V_1_ack_out)))) begin
            MasterOut_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b0 == MasterOut_V_strb_V_1_ack_out) & (2'd1 == MasterOut_V_strb_V_1_state)) | ((1'b0 == MasterOut_V_strb_V_1_ack_out) & (2'd3 == MasterOut_V_strb_V_1_state) & (1'b1 == MasterOut_V_strb_V_1_vld_in)))) begin
            MasterOut_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MasterOut_V_strb_V_1_vld_in) & (1'b1 == MasterOut_V_strb_V_1_ack_out)) & ~((1'b0 == MasterOut_V_strb_V_1_ack_out) & (1'b1 == MasterOut_V_strb_V_1_vld_in)) & (2'd3 == MasterOut_V_strb_V_1_state)) | ((2'd1 == MasterOut_V_strb_V_1_state) & (1'b1 == MasterOut_V_strb_V_1_ack_out)) | ((2'd2 == MasterOut_V_strb_V_1_state) & (1'b1 == MasterOut_V_strb_V_1_vld_in)))) begin
            MasterOut_V_strb_V_1_state <= 2'd3;
        end else begin
            MasterOut_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_data_V_1_load_A)) begin
        MasterOut_V_data_V_1_payload_A <= tmp_data_V_reg_93;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_data_V_1_load_B)) begin
        MasterOut_V_data_V_1_payload_B <= tmp_data_V_reg_93;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_last_V_1_load_A)) begin
        MasterOut_V_last_V_1_payload_A <= tmp_last_V_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_last_V_1_load_B)) begin
        MasterOut_V_last_V_1_payload_B <= tmp_last_V_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_strb_V_1_load_A)) begin
        MasterOut_V_strb_V_1_payload_A <= tmp_strb_V_reg_98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MasterOut_V_strb_V_1_load_B)) begin
        MasterOut_V_strb_V_1_payload_B <= tmp_strb_V_reg_98;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_reg_pp0_iter1_tmp_reg_89 <= tmp_reg_89;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_data_V_reg_93 <= slaveIn_TDATA;
        tmp_last_V_reg_103 <= slaveIn_TLAST;
        tmp_strb_V_reg_98 <= slaveIn_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_reg_89 <= tmp_nbreadreq_fu_42_p5;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter1_tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        MasterOut_TDATA_blk_n = MasterOut_V_data_V_1_state[1'd1];
    end else begin
        MasterOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == MasterOut_V_data_V_1_sel)) begin
        MasterOut_V_data_V_1_data_out = MasterOut_V_data_V_1_payload_B;
    end else begin
        MasterOut_V_data_V_1_data_out = MasterOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        MasterOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        MasterOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == MasterOut_V_last_V_1_sel)) begin
        MasterOut_V_last_V_1_data_out = MasterOut_V_last_V_1_payload_B;
    end else begin
        MasterOut_V_last_V_1_data_out = MasterOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        MasterOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        MasterOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == MasterOut_V_strb_V_1_sel)) begin
        MasterOut_V_strb_V_1_data_out = MasterOut_V_strb_V_1_payload_B;
    end else begin
        MasterOut_V_strb_V_1_data_out = MasterOut_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        MasterOut_V_strb_V_1_vld_in = 1'b1;
    end else begin
        MasterOut_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        slaveIn_TDATA_blk_n = slaveIn_TVALID;
    end else begin
        slaveIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        slaveIn_TREADY = 1'b1;
    end else begin
        slaveIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & ~((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign MasterOut_TDATA = MasterOut_V_data_V_1_data_out;

assign MasterOut_TLAST = MasterOut_V_last_V_1_data_out;

assign MasterOut_TSTRB = MasterOut_V_strb_V_1_data_out;

assign MasterOut_TVALID = MasterOut_V_last_V_1_state[1'd0];

assign MasterOut_V_data_V_1_ack_in = MasterOut_V_data_V_1_state[1'd1];

assign MasterOut_V_data_V_1_ack_out = MasterOut_TREADY;

assign MasterOut_V_data_V_1_load_A = (~MasterOut_V_data_V_1_sel_wr & MasterOut_V_data_V_1_state_cmp_full);

assign MasterOut_V_data_V_1_load_B = (MasterOut_V_data_V_1_state_cmp_full & MasterOut_V_data_V_1_sel_wr);

assign MasterOut_V_data_V_1_sel = MasterOut_V_data_V_1_sel_rd;

assign MasterOut_V_data_V_1_state_cmp_full = ((MasterOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MasterOut_V_data_V_1_vld_out = MasterOut_V_data_V_1_state[1'd0];

assign MasterOut_V_last_V_1_ack_in = MasterOut_V_last_V_1_state[1'd1];

assign MasterOut_V_last_V_1_ack_out = MasterOut_TREADY;

assign MasterOut_V_last_V_1_load_A = (~MasterOut_V_last_V_1_sel_wr & MasterOut_V_last_V_1_state_cmp_full);

assign MasterOut_V_last_V_1_load_B = (MasterOut_V_last_V_1_state_cmp_full & MasterOut_V_last_V_1_sel_wr);

assign MasterOut_V_last_V_1_sel = MasterOut_V_last_V_1_sel_rd;

assign MasterOut_V_last_V_1_state_cmp_full = ((MasterOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MasterOut_V_last_V_1_vld_out = MasterOut_V_last_V_1_state[1'd0];

assign MasterOut_V_strb_V_1_ack_in = MasterOut_V_strb_V_1_state[1'd1];

assign MasterOut_V_strb_V_1_ack_out = MasterOut_TREADY;

assign MasterOut_V_strb_V_1_load_A = (~MasterOut_V_strb_V_1_sel_wr & MasterOut_V_strb_V_1_state_cmp_full);

assign MasterOut_V_strb_V_1_load_B = (MasterOut_V_strb_V_1_state_cmp_full & MasterOut_V_strb_V_1_sel_wr);

assign MasterOut_V_strb_V_1_sel = MasterOut_V_strb_V_1_sel_rd;

assign MasterOut_V_strb_V_1_state_cmp_full = ((MasterOut_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MasterOut_V_strb_V_1_vld_out = MasterOut_V_strb_V_1_state[1'd0];

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == MasterOut_V_data_V_1_ack_in) & (tmp_reg_89 == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'b0 == MasterOut_V_data_V_1_ack_in) & (ap_reg_pp0_iter1_tmp_reg_89 == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'b0 == MasterOut_V_strb_V_1_ack_in) | (1'b0 == MasterOut_V_data_V_1_ack_in) | (1'b0 == MasterOut_V_last_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_nbreadreq_fu_42_p5 = slaveIn_TVALID;

endmodule //my_ip_hls
