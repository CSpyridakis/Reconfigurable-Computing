-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_ip_hls is
generic (
    C_S_AXI_PSAXILITE_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_PSAXILITE_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_psAxiLite_AWVALID : IN STD_LOGIC;
    s_axi_psAxiLite_AWREADY : OUT STD_LOGIC;
    s_axi_psAxiLite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PSAXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_psAxiLite_WVALID : IN STD_LOGIC;
    s_axi_psAxiLite_WREADY : OUT STD_LOGIC;
    s_axi_psAxiLite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PSAXILITE_DATA_WIDTH-1 downto 0);
    s_axi_psAxiLite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PSAXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_psAxiLite_ARVALID : IN STD_LOGIC;
    s_axi_psAxiLite_ARREADY : OUT STD_LOGIC;
    s_axi_psAxiLite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PSAXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_psAxiLite_RVALID : OUT STD_LOGIC;
    s_axi_psAxiLite_RREADY : IN STD_LOGIC;
    s_axi_psAxiLite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PSAXILITE_DATA_WIDTH-1 downto 0);
    s_axi_psAxiLite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_psAxiLite_BVALID : OUT STD_LOGIC;
    s_axi_psAxiLite_BREADY : IN STD_LOGIC;
    s_axi_psAxiLite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    slaveIn_TVALID : IN STD_LOGIC;
    slaveIn_TREADY : OUT STD_LOGIC;
    masterOut_TVALID : OUT STD_LOGIC;
    masterOut_TREADY : IN STD_LOGIC );
end;


architecture behav of my_ip_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "my_ip_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.802000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1177,HLS_SYN_LUT=2359}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rule0_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_ap_start : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_done : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_continue : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_idle : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_ready : STD_LOGIC;
    signal my_ip_hls_entry3_U0_start_out : STD_LOGIC;
    signal my_ip_hls_entry3_U0_start_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule0_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule0_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule1_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule2_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry83_U0_ap_start : STD_LOGIC;
    signal my_ip_hls_entry83_U0_ap_done : STD_LOGIC;
    signal my_ip_hls_entry83_U0_ap_continue : STD_LOGIC;
    signal my_ip_hls_entry83_U0_ap_idle : STD_LOGIC;
    signal my_ip_hls_entry83_U0_ap_ready : STD_LOGIC;
    signal my_ip_hls_entry83_U0_start_out : STD_LOGIC;
    signal my_ip_hls_entry83_U0_start_write : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule0_V_read : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule1_V_read : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule2_V_read : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule0_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry83_U0_rule0_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry83_U0_rule1_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry83_U0_rule2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry83_U0_rule2_V_out_write : STD_LOGIC;
    signal rules_in_U0_ap_start : STD_LOGIC;
    signal rules_in_U0_ap_done : STD_LOGIC;
    signal rules_in_U0_ap_continue : STD_LOGIC;
    signal rules_in_U0_ap_idle : STD_LOGIC;
    signal rules_in_U0_ap_ready : STD_LOGIC;
    signal rules_in_U0_rule0_V_read : STD_LOGIC;
    signal rules_in_U0_rule1_V_read : STD_LOGIC;
    signal rules_in_U0_rule2_V_read : STD_LOGIC;
    signal rules_in_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rules_in_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rules_in_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_rule2Reg_V_channel : STD_LOGIC;
    signal rule2Reg_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rule2Reg_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rule2Reg_V_channel : STD_LOGIC;
    signal ap_channel_done_rule1Reg_V_channel : STD_LOGIC;
    signal rule1Reg_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rule1Reg_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rule1Reg_V_channel : STD_LOGIC;
    signal ap_channel_done_rule0Reg_V_channel : STD_LOGIC;
    signal rule0Reg_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rule0Reg_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rule0Reg_V_channel : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_start : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_done : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_continue : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_idle : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_ready : STD_LOGIC;
    signal ps2ip_fifo_U0_slaveIn_TREADY : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_write : STD_LOGIC;
    signal core_U0_ap_start : STD_LOGIC;
    signal core_U0_ap_done : STD_LOGIC;
    signal core_U0_ap_continue : STD_LOGIC;
    signal core_U0_ap_idle : STD_LOGIC;
    signal core_U0_ap_ready : STD_LOGIC;
    signal core_U0_start_out : STD_LOGIC;
    signal core_U0_start_write : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_data_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_strb_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_last_V_read : STD_LOGIC;
    signal core_U0_ip2psFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_ip2psFifo_V_data_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal core_U0_ip2psFifo_V_strb_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal core_U0_ip2psFifo_V_last_V_write : STD_LOGIC;
    signal core_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_cnt2Reg_V : STD_LOGIC;
    signal cnt2Reg_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cnt2Reg_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_cnt2Reg_V : STD_LOGIC;
    signal ap_channel_done_cnt1Reg_V : STD_LOGIC;
    signal cnt1Reg_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cnt1Reg_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_cnt1Reg_V : STD_LOGIC;
    signal ap_channel_done_cnt0Reg_V : STD_LOGIC;
    signal cnt0Reg_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cnt0Reg_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_cnt0Reg_V : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_start : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_done : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_continue : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_idle : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_ready : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_fifo_U0_masterOut_TVALID : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_fifo_U0_masterOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_fifo_U0_ip2psFifo_V_data_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_strb_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_last_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal counters_out_U0_ap_start : STD_LOGIC;
    signal counters_out_U0_ap_done : STD_LOGIC;
    signal counters_out_U0_ap_continue : STD_LOGIC;
    signal counters_out_U0_ap_idle : STD_LOGIC;
    signal counters_out_U0_ap_ready : STD_LOGIC;
    signal counters_out_U0_rule0cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal counters_out_U0_rule0cnt_V_ap_vld : STD_LOGIC;
    signal counters_out_U0_rule1cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal counters_out_U0_rule1cnt_V_ap_vld : STD_LOGIC;
    signal counters_out_U0_rule2cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal counters_out_U0_rule2cnt_V_ap_vld : STD_LOGIC;
    signal rule0_V_c1_full_n : STD_LOGIC;
    signal rule0_V_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule0_V_c1_empty_n : STD_LOGIC;
    signal rule1_V_c2_full_n : STD_LOGIC;
    signal rule1_V_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1_V_c2_empty_n : STD_LOGIC;
    signal rule2_V_c3_full_n : STD_LOGIC;
    signal rule2_V_c3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V_c3_empty_n : STD_LOGIC;
    signal rule0_V_c_full_n : STD_LOGIC;
    signal rule0_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule0_V_c_empty_n : STD_LOGIC;
    signal rule1_V_c_full_n : STD_LOGIC;
    signal rule1_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1_V_c_empty_n : STD_LOGIC;
    signal rule2_V_c_full_n : STD_LOGIC;
    signal rule2_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V_c_empty_n : STD_LOGIC;
    signal rule0Reg_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule0Reg_V_channel_empty_n : STD_LOGIC;
    signal rule1Reg_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1Reg_V_channel_empty_n : STD_LOGIC;
    signal rule2Reg_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2Reg_V_channel_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_data_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ipFifo_V_data_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ipFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ipFifo_V_last_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2psFifo_V_data_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2psFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2psFifo_V_last_V_empty_n : STD_LOGIC;
    signal cnt0Reg_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt0Reg_V_empty_n : STD_LOGIC;
    signal cnt1Reg_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt1Reg_V_empty_n : STD_LOGIC;
    signal cnt2Reg_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt2Reg_V_empty_n : STD_LOGIC;
    signal start_for_my_ip_hls_entry83_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_my_ip_hls_entry83_U0_full_n : STD_LOGIC;
    signal start_for_my_ip_hls_entry83_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_my_ip_hls_entry83_U0_empty_n : STD_LOGIC;
    signal start_for_rules_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rules_in_U0_full_n : STD_LOGIC;
    signal start_for_rules_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rules_in_U0_empty_n : STD_LOGIC;
    signal rules_in_U0_start_full_n : STD_LOGIC;
    signal rules_in_U0_start_write : STD_LOGIC;
    signal ps2ip_fifo_U0_start_full_n : STD_LOGIC;
    signal ps2ip_fifo_U0_start_write : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_full_n : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_empty_n : STD_LOGIC;
    signal ip2ps_fifo_U0_start_full_n : STD_LOGIC;
    signal ip2ps_fifo_U0_start_write : STD_LOGIC;
    signal counters_out_U0_start_full_n : STD_LOGIC;
    signal counters_out_U0_start_write : STD_LOGIC;

    component my_ip_hls_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rule0_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule0_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule0_V_out_full_n : IN STD_LOGIC;
        rule0_V_out_write : OUT STD_LOGIC;
        rule1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_out_full_n : IN STD_LOGIC;
        rule1_V_out_write : OUT STD_LOGIC;
        rule2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_out_full_n : IN STD_LOGIC;
        rule2_V_out_write : OUT STD_LOGIC );
    end component;


    component my_ip_hls_entry83 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rule0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule0_V_empty_n : IN STD_LOGIC;
        rule0_V_read : OUT STD_LOGIC;
        rule1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_empty_n : IN STD_LOGIC;
        rule1_V_read : OUT STD_LOGIC;
        rule2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_empty_n : IN STD_LOGIC;
        rule2_V_read : OUT STD_LOGIC;
        rule0_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule0_V_out_full_n : IN STD_LOGIC;
        rule0_V_out_write : OUT STD_LOGIC;
        rule1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_out_full_n : IN STD_LOGIC;
        rule1_V_out_write : OUT STD_LOGIC;
        rule2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_out_full_n : IN STD_LOGIC;
        rule2_V_out_write : OUT STD_LOGIC );
    end component;


    component rules_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule0_V_empty_n : IN STD_LOGIC;
        rule0_V_read : OUT STD_LOGIC;
        rule1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_empty_n : IN STD_LOGIC;
        rule1_V_read : OUT STD_LOGIC;
        rule2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_empty_n : IN STD_LOGIC;
        rule2_V_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ps2ip_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        slaveIn_TVALID : IN STD_LOGIC;
        slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        slaveIn_TREADY : OUT STD_LOGIC;
        slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_read : OUT STD_LOGIC;
        ip2psFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_write : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_write : OUT STD_LOGIC;
        ip2psFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip2ps_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        masterOut_TREADY : IN STD_LOGIC;
        masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        masterOut_TVALID : OUT STD_LOGIC;
        masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_read : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_read : OUT STD_LOGIC;
        ip2psFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_read : OUT STD_LOGIC );
    end component;


    component counters_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        rule0cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule0cnt_V_ap_vld : OUT STD_LOGIC;
        rule1cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_ap_vld : OUT STD_LOGIC;
        rule2cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_ap_vld : OUT STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w4_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_my_ip_hbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_rules_icud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ip2ps_fdEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component my_ip_hls_psAxiLite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rule0_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule0cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule0cnt_V_ap_vld : IN STD_LOGIC;
        rule1cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_ap_vld : IN STD_LOGIC;
        rule2cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    my_ip_hls_psAxiLite_s_axi_U : component my_ip_hls_psAxiLite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PSAXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PSAXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_psAxiLite_AWVALID,
        AWREADY => s_axi_psAxiLite_AWREADY,
        AWADDR => s_axi_psAxiLite_AWADDR,
        WVALID => s_axi_psAxiLite_WVALID,
        WREADY => s_axi_psAxiLite_WREADY,
        WDATA => s_axi_psAxiLite_WDATA,
        WSTRB => s_axi_psAxiLite_WSTRB,
        ARVALID => s_axi_psAxiLite_ARVALID,
        ARREADY => s_axi_psAxiLite_ARREADY,
        ARADDR => s_axi_psAxiLite_ARADDR,
        RVALID => s_axi_psAxiLite_RVALID,
        RREADY => s_axi_psAxiLite_RREADY,
        RDATA => s_axi_psAxiLite_RDATA,
        RRESP => s_axi_psAxiLite_RRESP,
        BVALID => s_axi_psAxiLite_BVALID,
        BREADY => s_axi_psAxiLite_BREADY,
        BRESP => s_axi_psAxiLite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rule0_V => rule0_V,
        rule1_V => rule1_V,
        rule2_V => rule2_V,
        rule0cnt_V => counters_out_U0_rule0cnt_V,
        rule0cnt_V_ap_vld => counters_out_U0_rule0cnt_V_ap_vld,
        rule1cnt_V => counters_out_U0_rule1cnt_V,
        rule1cnt_V_ap_vld => counters_out_U0_rule1cnt_V_ap_vld,
        rule2cnt_V => counters_out_U0_rule2cnt_V,
        rule2cnt_V_ap_vld => counters_out_U0_rule2cnt_V_ap_vld);

    my_ip_hls_entry3_U0 : component my_ip_hls_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => my_ip_hls_entry3_U0_ap_start,
        start_full_n => start_for_my_ip_hls_entry83_U0_full_n,
        ap_done => my_ip_hls_entry3_U0_ap_done,
        ap_continue => my_ip_hls_entry3_U0_ap_continue,
        ap_idle => my_ip_hls_entry3_U0_ap_idle,
        ap_ready => my_ip_hls_entry3_U0_ap_ready,
        start_out => my_ip_hls_entry3_U0_start_out,
        start_write => my_ip_hls_entry3_U0_start_write,
        rule0_V => rule0_V,
        rule1_V => rule1_V,
        rule2_V => rule2_V,
        rule0_V_out_din => my_ip_hls_entry3_U0_rule0_V_out_din,
        rule0_V_out_full_n => rule0_V_c1_full_n,
        rule0_V_out_write => my_ip_hls_entry3_U0_rule0_V_out_write,
        rule1_V_out_din => my_ip_hls_entry3_U0_rule1_V_out_din,
        rule1_V_out_full_n => rule1_V_c2_full_n,
        rule1_V_out_write => my_ip_hls_entry3_U0_rule1_V_out_write,
        rule2_V_out_din => my_ip_hls_entry3_U0_rule2_V_out_din,
        rule2_V_out_full_n => rule2_V_c3_full_n,
        rule2_V_out_write => my_ip_hls_entry3_U0_rule2_V_out_write);

    my_ip_hls_entry83_U0 : component my_ip_hls_entry83
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => my_ip_hls_entry83_U0_ap_start,
        start_full_n => start_for_rules_in_U0_full_n,
        ap_done => my_ip_hls_entry83_U0_ap_done,
        ap_continue => my_ip_hls_entry83_U0_ap_continue,
        ap_idle => my_ip_hls_entry83_U0_ap_idle,
        ap_ready => my_ip_hls_entry83_U0_ap_ready,
        start_out => my_ip_hls_entry83_U0_start_out,
        start_write => my_ip_hls_entry83_U0_start_write,
        rule0_V_dout => rule0_V_c1_dout,
        rule0_V_empty_n => rule0_V_c1_empty_n,
        rule0_V_read => my_ip_hls_entry83_U0_rule0_V_read,
        rule1_V_dout => rule1_V_c2_dout,
        rule1_V_empty_n => rule1_V_c2_empty_n,
        rule1_V_read => my_ip_hls_entry83_U0_rule1_V_read,
        rule2_V_dout => rule2_V_c3_dout,
        rule2_V_empty_n => rule2_V_c3_empty_n,
        rule2_V_read => my_ip_hls_entry83_U0_rule2_V_read,
        rule0_V_out_din => my_ip_hls_entry83_U0_rule0_V_out_din,
        rule0_V_out_full_n => rule0_V_c_full_n,
        rule0_V_out_write => my_ip_hls_entry83_U0_rule0_V_out_write,
        rule1_V_out_din => my_ip_hls_entry83_U0_rule1_V_out_din,
        rule1_V_out_full_n => rule1_V_c_full_n,
        rule1_V_out_write => my_ip_hls_entry83_U0_rule1_V_out_write,
        rule2_V_out_din => my_ip_hls_entry83_U0_rule2_V_out_din,
        rule2_V_out_full_n => rule2_V_c_full_n,
        rule2_V_out_write => my_ip_hls_entry83_U0_rule2_V_out_write);

    rules_in_U0 : component rules_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rules_in_U0_ap_start,
        ap_done => rules_in_U0_ap_done,
        ap_continue => rules_in_U0_ap_continue,
        ap_idle => rules_in_U0_ap_idle,
        ap_ready => rules_in_U0_ap_ready,
        rule0_V_dout => rule0_V_c_dout,
        rule0_V_empty_n => rule0_V_c_empty_n,
        rule0_V_read => rules_in_U0_rule0_V_read,
        rule1_V_dout => rule1_V_c_dout,
        rule1_V_empty_n => rule1_V_c_empty_n,
        rule1_V_read => rules_in_U0_rule1_V_read,
        rule2_V_dout => rule2_V_c_dout,
        rule2_V_empty_n => rule2_V_c_empty_n,
        rule2_V_read => rules_in_U0_rule2_V_read,
        ap_return_0 => rules_in_U0_ap_return_0,
        ap_return_1 => rules_in_U0_ap_return_1,
        ap_return_2 => rules_in_U0_ap_return_2);

    ps2ip_fifo_U0 : component ps2ip_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ps2ip_fifo_U0_ap_start,
        ap_done => ps2ip_fifo_U0_ap_done,
        ap_continue => ps2ip_fifo_U0_ap_continue,
        ap_idle => ps2ip_fifo_U0_ap_idle,
        ap_ready => ps2ip_fifo_U0_ap_ready,
        slaveIn_TVALID => slaveIn_TVALID,
        slaveIn_TDATA => slaveIn_TDATA,
        slaveIn_TREADY => ps2ip_fifo_U0_slaveIn_TREADY,
        slaveIn_TSTRB => slaveIn_TSTRB,
        slaveIn_TLAST => slaveIn_TLAST,
        ps2ipFifo_V_data_V_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        ps2ipFifo_V_data_V_full_n => ps2ipFifo_V_data_V_full_n,
        ps2ipFifo_V_data_V_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        ps2ipFifo_V_strb_V_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        ps2ipFifo_V_strb_V_full_n => ps2ipFifo_V_strb_V_full_n,
        ps2ipFifo_V_strb_V_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        ps2ipFifo_V_last_V_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        ps2ipFifo_V_last_V_full_n => ps2ipFifo_V_last_V_full_n,
        ps2ipFifo_V_last_V_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write);

    core_U0 : component core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => core_U0_ap_start,
        start_full_n => start_for_ip2ps_fifo_U0_full_n,
        ap_done => core_U0_ap_done,
        ap_continue => core_U0_ap_continue,
        ap_idle => core_U0_ap_idle,
        ap_ready => core_U0_ap_ready,
        start_out => core_U0_start_out,
        start_write => core_U0_start_write,
        p_read => rule0Reg_V_channel_dout,
        p_read1 => rule1Reg_V_channel_dout,
        p_read2 => rule2Reg_V_channel_dout,
        ps2ipFifo_V_data_V_dout => ps2ipFifo_V_data_V_dout,
        ps2ipFifo_V_data_V_empty_n => ps2ipFifo_V_data_V_empty_n,
        ps2ipFifo_V_data_V_read => core_U0_ps2ipFifo_V_data_V_read,
        ps2ipFifo_V_strb_V_dout => ps2ipFifo_V_strb_V_dout,
        ps2ipFifo_V_strb_V_empty_n => ps2ipFifo_V_strb_V_empty_n,
        ps2ipFifo_V_strb_V_read => core_U0_ps2ipFifo_V_strb_V_read,
        ps2ipFifo_V_last_V_dout => ps2ipFifo_V_last_V_dout,
        ps2ipFifo_V_last_V_empty_n => ps2ipFifo_V_last_V_empty_n,
        ps2ipFifo_V_last_V_read => core_U0_ps2ipFifo_V_last_V_read,
        ip2psFifo_V_data_V_din => core_U0_ip2psFifo_V_data_V_din,
        ip2psFifo_V_data_V_full_n => ip2psFifo_V_data_V_full_n,
        ip2psFifo_V_data_V_write => core_U0_ip2psFifo_V_data_V_write,
        ip2psFifo_V_strb_V_din => core_U0_ip2psFifo_V_strb_V_din,
        ip2psFifo_V_strb_V_full_n => ip2psFifo_V_strb_V_full_n,
        ip2psFifo_V_strb_V_write => core_U0_ip2psFifo_V_strb_V_write,
        ip2psFifo_V_last_V_din => core_U0_ip2psFifo_V_last_V_din,
        ip2psFifo_V_last_V_full_n => ip2psFifo_V_last_V_full_n,
        ip2psFifo_V_last_V_write => core_U0_ip2psFifo_V_last_V_write,
        ap_return_0 => core_U0_ap_return_0,
        ap_return_1 => core_U0_ap_return_1,
        ap_return_2 => core_U0_ap_return_2);

    ip2ps_fifo_U0 : component ip2ps_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip2ps_fifo_U0_ap_start,
        ap_done => ip2ps_fifo_U0_ap_done,
        ap_continue => ip2ps_fifo_U0_ap_continue,
        ap_idle => ip2ps_fifo_U0_ap_idle,
        ap_ready => ip2ps_fifo_U0_ap_ready,
        masterOut_TREADY => masterOut_TREADY,
        masterOut_TDATA => ip2ps_fifo_U0_masterOut_TDATA,
        masterOut_TVALID => ip2ps_fifo_U0_masterOut_TVALID,
        masterOut_TSTRB => ip2ps_fifo_U0_masterOut_TSTRB,
        masterOut_TLAST => ip2ps_fifo_U0_masterOut_TLAST,
        ip2psFifo_V_data_V_dout => ip2psFifo_V_data_V_dout,
        ip2psFifo_V_data_V_empty_n => ip2psFifo_V_data_V_empty_n,
        ip2psFifo_V_data_V_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read,
        ip2psFifo_V_strb_V_dout => ip2psFifo_V_strb_V_dout,
        ip2psFifo_V_strb_V_empty_n => ip2psFifo_V_strb_V_empty_n,
        ip2psFifo_V_strb_V_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read,
        ip2psFifo_V_last_V_dout => ip2psFifo_V_last_V_dout,
        ip2psFifo_V_last_V_empty_n => ip2psFifo_V_last_V_empty_n,
        ip2psFifo_V_last_V_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    counters_out_U0 : component counters_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => counters_out_U0_ap_start,
        ap_done => counters_out_U0_ap_done,
        ap_continue => counters_out_U0_ap_continue,
        ap_idle => counters_out_U0_ap_idle,
        ap_ready => counters_out_U0_ap_ready,
        p_read => cnt0Reg_V_dout,
        p_read1 => cnt1Reg_V_dout,
        p_read2 => cnt2Reg_V_dout,
        rule0cnt_V => counters_out_U0_rule0cnt_V,
        rule0cnt_V_ap_vld => counters_out_U0_rule0cnt_V_ap_vld,
        rule1cnt_V => counters_out_U0_rule1cnt_V,
        rule1cnt_V_ap_vld => counters_out_U0_rule1cnt_V_ap_vld,
        rule2cnt_V => counters_out_U0_rule2cnt_V,
        rule2cnt_V_ap_vld => counters_out_U0_rule2cnt_V_ap_vld);

    rule0_V_c1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule0_V_out_din,
        if_full_n => rule0_V_c1_full_n,
        if_write => my_ip_hls_entry3_U0_rule0_V_out_write,
        if_dout => rule0_V_c1_dout,
        if_empty_n => rule0_V_c1_empty_n,
        if_read => my_ip_hls_entry83_U0_rule0_V_read);

    rule1_V_c2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule1_V_out_din,
        if_full_n => rule1_V_c2_full_n,
        if_write => my_ip_hls_entry3_U0_rule1_V_out_write,
        if_dout => rule1_V_c2_dout,
        if_empty_n => rule1_V_c2_empty_n,
        if_read => my_ip_hls_entry83_U0_rule1_V_read);

    rule2_V_c3_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule2_V_out_din,
        if_full_n => rule2_V_c3_full_n,
        if_write => my_ip_hls_entry3_U0_rule2_V_out_write,
        if_dout => rule2_V_c3_dout,
        if_empty_n => rule2_V_c3_empty_n,
        if_read => my_ip_hls_entry83_U0_rule2_V_read);

    rule0_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry83_U0_rule0_V_out_din,
        if_full_n => rule0_V_c_full_n,
        if_write => my_ip_hls_entry83_U0_rule0_V_out_write,
        if_dout => rule0_V_c_dout,
        if_empty_n => rule0_V_c_empty_n,
        if_read => rules_in_U0_rule0_V_read);

    rule1_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry83_U0_rule1_V_out_din,
        if_full_n => rule1_V_c_full_n,
        if_write => my_ip_hls_entry83_U0_rule1_V_out_write,
        if_dout => rule1_V_c_dout,
        if_empty_n => rule1_V_c_empty_n,
        if_read => rules_in_U0_rule1_V_read);

    rule2_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry83_U0_rule2_V_out_din,
        if_full_n => rule2_V_c_full_n,
        if_write => my_ip_hls_entry83_U0_rule2_V_out_write,
        if_dout => rule2_V_c_dout,
        if_empty_n => rule2_V_c_empty_n,
        if_read => rules_in_U0_rule2_V_read);

    rule0Reg_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rules_in_U0_ap_return_0,
        if_full_n => rule0Reg_V_channel_full_n,
        if_write => ap_channel_done_rule0Reg_V_channel,
        if_dout => rule0Reg_V_channel_dout,
        if_empty_n => rule0Reg_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    rule1Reg_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rules_in_U0_ap_return_1,
        if_full_n => rule1Reg_V_channel_full_n,
        if_write => ap_channel_done_rule1Reg_V_channel,
        if_dout => rule1Reg_V_channel_dout,
        if_empty_n => rule1Reg_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    rule2Reg_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rules_in_U0_ap_return_2,
        if_full_n => rule2Reg_V_channel_full_n,
        if_write => ap_channel_done_rule2Reg_V_channel,
        if_dout => rule2Reg_V_channel_dout,
        if_empty_n => rule2Reg_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    ps2ipFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        if_full_n => ps2ipFifo_V_data_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        if_dout => ps2ipFifo_V_data_V_dout,
        if_empty_n => ps2ipFifo_V_data_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_data_V_read);

    ps2ipFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        if_full_n => ps2ipFifo_V_strb_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        if_dout => ps2ipFifo_V_strb_V_dout,
        if_empty_n => ps2ipFifo_V_strb_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_strb_V_read);

    ps2ipFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        if_full_n => ps2ipFifo_V_last_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write,
        if_dout => ps2ipFifo_V_last_V_dout,
        if_empty_n => ps2ipFifo_V_last_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_last_V_read);

    ip2psFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_data_V_din,
        if_full_n => ip2psFifo_V_data_V_full_n,
        if_write => core_U0_ip2psFifo_V_data_V_write,
        if_dout => ip2psFifo_V_data_V_dout,
        if_empty_n => ip2psFifo_V_data_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read);

    ip2psFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_strb_V_din,
        if_full_n => ip2psFifo_V_strb_V_full_n,
        if_write => core_U0_ip2psFifo_V_strb_V_write,
        if_dout => ip2psFifo_V_strb_V_dout,
        if_empty_n => ip2psFifo_V_strb_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read);

    ip2psFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_last_V_din,
        if_full_n => ip2psFifo_V_last_V_full_n,
        if_write => core_U0_ip2psFifo_V_last_V_write,
        if_dout => ip2psFifo_V_last_V_dout,
        if_empty_n => ip2psFifo_V_last_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    cnt0Reg_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ap_return_0,
        if_full_n => cnt0Reg_V_full_n,
        if_write => ap_channel_done_cnt0Reg_V,
        if_dout => cnt0Reg_V_dout,
        if_empty_n => cnt0Reg_V_empty_n,
        if_read => counters_out_U0_ap_ready);

    cnt1Reg_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ap_return_1,
        if_full_n => cnt1Reg_V_full_n,
        if_write => ap_channel_done_cnt1Reg_V,
        if_dout => cnt1Reg_V_dout,
        if_empty_n => cnt1Reg_V_empty_n,
        if_read => counters_out_U0_ap_ready);

    cnt2Reg_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ap_return_2,
        if_full_n => cnt2Reg_V_full_n,
        if_write => ap_channel_done_cnt2Reg_V,
        if_dout => cnt2Reg_V_dout,
        if_empty_n => cnt2Reg_V_empty_n,
        if_read => counters_out_U0_ap_ready);

    start_for_my_ip_hbkb_U : component start_for_my_ip_hbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_my_ip_hls_entry83_U0_din,
        if_full_n => start_for_my_ip_hls_entry83_U0_full_n,
        if_write => my_ip_hls_entry3_U0_start_write,
        if_dout => start_for_my_ip_hls_entry83_U0_dout,
        if_empty_n => start_for_my_ip_hls_entry83_U0_empty_n,
        if_read => my_ip_hls_entry83_U0_ap_ready);

    start_for_rules_icud_U : component start_for_rules_icud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rules_in_U0_din,
        if_full_n => start_for_rules_in_U0_full_n,
        if_write => my_ip_hls_entry83_U0_start_write,
        if_dout => start_for_rules_in_U0_dout,
        if_empty_n => start_for_rules_in_U0_empty_n,
        if_read => rules_in_U0_ap_ready);

    start_for_ip2ps_fdEe_U : component start_for_ip2ps_fdEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ip2ps_fifo_U0_din,
        if_full_n => start_for_ip2ps_fifo_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_ip2ps_fifo_U0_dout,
        if_empty_n => start_for_ip2ps_fifo_U0_empty_n,
        if_read => ip2ps_fifo_U0_ap_ready);





    ap_sync_reg_channel_write_cnt0Reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_cnt0Reg_V <= ap_const_logic_0;
            else
                if (((core_U0_ap_done and core_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cnt0Reg_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cnt0Reg_V <= ap_sync_channel_write_cnt0Reg_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_cnt1Reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_cnt1Reg_V <= ap_const_logic_0;
            else
                if (((core_U0_ap_done and core_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cnt1Reg_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cnt1Reg_V <= ap_sync_channel_write_cnt1Reg_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_cnt2Reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_cnt2Reg_V <= ap_const_logic_0;
            else
                if (((core_U0_ap_done and core_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cnt2Reg_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cnt2Reg_V <= ap_sync_channel_write_cnt2Reg_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rule0Reg_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rule0Reg_V_channel <= ap_const_logic_0;
            else
                if (((rules_in_U0_ap_done and rules_in_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rule0Reg_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rule0Reg_V_channel <= ap_sync_channel_write_rule0Reg_V_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rule1Reg_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rule1Reg_V_channel <= ap_const_logic_0;
            else
                if (((rules_in_U0_ap_done and rules_in_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rule1Reg_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rule1Reg_V_channel <= ap_sync_channel_write_rule1Reg_V_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rule2Reg_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rule2Reg_V_channel <= ap_const_logic_0;
            else
                if (((rules_in_U0_ap_done and rules_in_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rule2Reg_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rule2Reg_V_channel <= ap_sync_channel_write_rule2Reg_V_channel;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_cnt0Reg_V <= ((ap_sync_reg_channel_write_cnt0Reg_V xor ap_const_logic_1) and core_U0_ap_done);
    ap_channel_done_cnt1Reg_V <= ((ap_sync_reg_channel_write_cnt1Reg_V xor ap_const_logic_1) and core_U0_ap_done);
    ap_channel_done_cnt2Reg_V <= ((ap_sync_reg_channel_write_cnt2Reg_V xor ap_const_logic_1) and core_U0_ap_done);
    ap_channel_done_rule0Reg_V_channel <= (rules_in_U0_ap_done and (ap_sync_reg_channel_write_rule0Reg_V_channel xor ap_const_logic_1));
    ap_channel_done_rule1Reg_V_channel <= (rules_in_U0_ap_done and (ap_sync_reg_channel_write_rule1Reg_V_channel xor ap_const_logic_1));
    ap_channel_done_rule2Reg_V_channel <= (rules_in_U0_ap_done and (ap_sync_reg_channel_write_rule2Reg_V_channel xor ap_const_logic_1));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_cnt0Reg_V <= ((cnt0Reg_V_full_n and ap_channel_done_cnt0Reg_V) or ap_sync_reg_channel_write_cnt0Reg_V);
    ap_sync_channel_write_cnt1Reg_V <= ((cnt1Reg_V_full_n and ap_channel_done_cnt1Reg_V) or ap_sync_reg_channel_write_cnt1Reg_V);
    ap_sync_channel_write_cnt2Reg_V <= ((cnt2Reg_V_full_n and ap_channel_done_cnt2Reg_V) or ap_sync_reg_channel_write_cnt2Reg_V);
    ap_sync_channel_write_rule0Reg_V_channel <= ((rule0Reg_V_channel_full_n and ap_channel_done_rule0Reg_V_channel) or ap_sync_reg_channel_write_rule0Reg_V_channel);
    ap_sync_channel_write_rule1Reg_V_channel <= ((rule1Reg_V_channel_full_n and ap_channel_done_rule1Reg_V_channel) or ap_sync_reg_channel_write_rule1Reg_V_channel);
    ap_sync_channel_write_rule2Reg_V_channel <= ((rule2Reg_V_channel_full_n and ap_channel_done_rule2Reg_V_channel) or ap_sync_reg_channel_write_rule2Reg_V_channel);
    ap_sync_continue <= ap_const_logic_0;
    core_U0_ap_continue <= (ap_sync_channel_write_cnt2Reg_V and ap_sync_channel_write_cnt1Reg_V and ap_sync_channel_write_cnt0Reg_V);
    core_U0_ap_start <= (rule2Reg_V_channel_empty_n and rule1Reg_V_channel_empty_n and rule0Reg_V_channel_empty_n);
    counters_out_U0_ap_continue <= ap_const_logic_1;
    counters_out_U0_ap_start <= (cnt2Reg_V_empty_n and cnt1Reg_V_empty_n and cnt0Reg_V_empty_n);
    counters_out_U0_start_full_n <= ap_const_logic_1;
    counters_out_U0_start_write <= ap_const_logic_0;
    ip2ps_fifo_U0_ap_continue <= ap_const_logic_1;
    ip2ps_fifo_U0_ap_start <= start_for_ip2ps_fifo_U0_empty_n;
    ip2ps_fifo_U0_start_full_n <= ap_const_logic_1;
    ip2ps_fifo_U0_start_write <= ap_const_logic_0;
    masterOut_TDATA <= ip2ps_fifo_U0_masterOut_TDATA;
    masterOut_TLAST <= ip2ps_fifo_U0_masterOut_TLAST;
    masterOut_TSTRB <= ip2ps_fifo_U0_masterOut_TSTRB;
    masterOut_TVALID <= ip2ps_fifo_U0_masterOut_TVALID;
    my_ip_hls_entry3_U0_ap_continue <= ap_const_logic_1;
    my_ip_hls_entry3_U0_ap_start <= ap_const_logic_1;
    my_ip_hls_entry83_U0_ap_continue <= ap_const_logic_1;
    my_ip_hls_entry83_U0_ap_start <= start_for_my_ip_hls_entry83_U0_empty_n;
    ps2ip_fifo_U0_ap_continue <= ap_const_logic_1;
    ps2ip_fifo_U0_ap_start <= ap_const_logic_1;
    ps2ip_fifo_U0_start_full_n <= ap_const_logic_1;
    ps2ip_fifo_U0_start_write <= ap_const_logic_0;
    rules_in_U0_ap_continue <= (ap_sync_channel_write_rule2Reg_V_channel and ap_sync_channel_write_rule1Reg_V_channel and ap_sync_channel_write_rule0Reg_V_channel);
    rules_in_U0_ap_start <= start_for_rules_in_U0_empty_n;
    rules_in_U0_start_full_n <= ap_const_logic_1;
    rules_in_U0_start_write <= ap_const_logic_0;
    slaveIn_TREADY <= ps2ip_fifo_U0_slaveIn_TREADY;
    start_for_ip2ps_fifo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_my_ip_hls_entry83_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rules_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
