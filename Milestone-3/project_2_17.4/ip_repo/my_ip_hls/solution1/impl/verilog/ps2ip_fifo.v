// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ps2ip_fifo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        slaveIn_TVALID,
        slaveIn_TDATA,
        slaveIn_TREADY,
        slaveIn_TSTRB,
        slaveIn_TLAST,
        ps2ipFifo_V_data_V_din,
        ps2ipFifo_V_data_V_full_n,
        ps2ipFifo_V_data_V_write,
        ps2ipFifo_V_strb_V_din,
        ps2ipFifo_V_strb_V_full_n,
        ps2ipFifo_V_strb_V_write,
        ps2ipFifo_V_last_V_din,
        ps2ipFifo_V_last_V_full_n,
        ps2ipFifo_V_last_V_write
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   slaveIn_TVALID;
input  [31:0] slaveIn_TDATA;
output   slaveIn_TREADY;
input  [3:0] slaveIn_TSTRB;
input  [0:0] slaveIn_TLAST;
output  [31:0] ps2ipFifo_V_data_V_din;
input   ps2ipFifo_V_data_V_full_n;
output   ps2ipFifo_V_data_V_write;
output  [3:0] ps2ipFifo_V_strb_V_din;
input   ps2ipFifo_V_strb_V_full_n;
output   ps2ipFifo_V_strb_V_write;
output  [0:0] ps2ipFifo_V_last_V_din;
input   ps2ipFifo_V_last_V_full_n;
output   ps2ipFifo_V_last_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg slaveIn_TREADY;

reg    ap_done_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire   [0:0] tmp_nbreadreq_fu_40_p5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ps2ipFifo_V_data_V1_status;
reg   [0:0] tmp_reg_87;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg    slaveIn_TDATA_blk_n;
reg    ps2ipFifo_V_data_V_blk_n;
reg    ps2ipFifo_V_strb_V_blk_n;
reg    ps2ipFifo_V_last_V_blk_n;
reg   [31:0] tmp_data_V_reg_91;
reg   [3:0] tmp_strb_V_reg_96;
reg   [0:0] tmp_last_V_reg_101;
reg    ps2ipFifo_V_data_V1_update;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (tmp_nbreadreq_fu_40_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_data_V_reg_91 <= slaveIn_TDATA;
        tmp_last_V_reg_101 <= slaveIn_TLAST;
        tmp_strb_V_reg_96 <= slaveIn_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_reg_87 <= tmp_nbreadreq_fu_40_p5;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1))) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ps2ipFifo_V_data_V1_update = 1'b1;
    end else begin
        ps2ipFifo_V_data_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ps2ipFifo_V_data_V_blk_n = ps2ipFifo_V_data_V_full_n;
    end else begin
        ps2ipFifo_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ps2ipFifo_V_last_V_blk_n = ps2ipFifo_V_last_V_full_n;
    end else begin
        ps2ipFifo_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ps2ipFifo_V_strb_V_blk_n = ps2ipFifo_V_strb_V_full_n;
    end else begin
        ps2ipFifo_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_40_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        slaveIn_TDATA_blk_n = slaveIn_TVALID;
    end else begin
        slaveIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (tmp_nbreadreq_fu_40_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        slaveIn_TREADY = 1'b1;
    end else begin
        slaveIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1))) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((slaveIn_TVALID == 1'b0) & (tmp_nbreadreq_fu_40_p5 == 1'd1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ps2ipFifo_V_data_V1_status == 1'b0) & (tmp_reg_87 == 1'd1));
end

assign ps2ipFifo_V_data_V1_status = (ps2ipFifo_V_strb_V_full_n & ps2ipFifo_V_last_V_full_n & ps2ipFifo_V_data_V_full_n);

assign ps2ipFifo_V_data_V_din = tmp_data_V_reg_91;

assign ps2ipFifo_V_data_V_write = ps2ipFifo_V_data_V1_update;

assign ps2ipFifo_V_last_V_din = tmp_last_V_reg_101;

assign ps2ipFifo_V_last_V_write = ps2ipFifo_V_data_V1_update;

assign ps2ipFifo_V_strb_V_din = tmp_strb_V_reg_96;

assign ps2ipFifo_V_strb_V_write = ps2ipFifo_V_data_V1_update;

assign tmp_nbreadreq_fu_40_p5 = slaveIn_TVALID;

endmodule //ps2ip_fifo
