// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="my_ip_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.802000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1177,HLS_SYN_LUT=2359}" *)

module my_ip_hls (
        s_axi_psAxiLite_AWVALID,
        s_axi_psAxiLite_AWREADY,
        s_axi_psAxiLite_AWADDR,
        s_axi_psAxiLite_WVALID,
        s_axi_psAxiLite_WREADY,
        s_axi_psAxiLite_WDATA,
        s_axi_psAxiLite_WSTRB,
        s_axi_psAxiLite_ARVALID,
        s_axi_psAxiLite_ARREADY,
        s_axi_psAxiLite_ARADDR,
        s_axi_psAxiLite_RVALID,
        s_axi_psAxiLite_RREADY,
        s_axi_psAxiLite_RDATA,
        s_axi_psAxiLite_RRESP,
        s_axi_psAxiLite_BVALID,
        s_axi_psAxiLite_BREADY,
        s_axi_psAxiLite_BRESP,
        ap_clk,
        ap_rst_n,
        slaveIn_TDATA,
        slaveIn_TSTRB,
        slaveIn_TLAST,
        masterOut_TDATA,
        masterOut_TSTRB,
        masterOut_TLAST,
        slaveIn_TVALID,
        slaveIn_TREADY,
        masterOut_TVALID,
        masterOut_TREADY
);

parameter    C_S_AXI_PSAXILITE_DATA_WIDTH = 32;
parameter    C_S_AXI_PSAXILITE_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_PSAXILITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_psAxiLite_AWVALID;
output   s_axi_psAxiLite_AWREADY;
input  [C_S_AXI_PSAXILITE_ADDR_WIDTH - 1:0] s_axi_psAxiLite_AWADDR;
input   s_axi_psAxiLite_WVALID;
output   s_axi_psAxiLite_WREADY;
input  [C_S_AXI_PSAXILITE_DATA_WIDTH - 1:0] s_axi_psAxiLite_WDATA;
input  [C_S_AXI_PSAXILITE_WSTRB_WIDTH - 1:0] s_axi_psAxiLite_WSTRB;
input   s_axi_psAxiLite_ARVALID;
output   s_axi_psAxiLite_ARREADY;
input  [C_S_AXI_PSAXILITE_ADDR_WIDTH - 1:0] s_axi_psAxiLite_ARADDR;
output   s_axi_psAxiLite_RVALID;
input   s_axi_psAxiLite_RREADY;
output  [C_S_AXI_PSAXILITE_DATA_WIDTH - 1:0] s_axi_psAxiLite_RDATA;
output  [1:0] s_axi_psAxiLite_RRESP;
output   s_axi_psAxiLite_BVALID;
input   s_axi_psAxiLite_BREADY;
output  [1:0] s_axi_psAxiLite_BRESP;
input   ap_clk;
input   ap_rst_n;
input  [31:0] slaveIn_TDATA;
input  [3:0] slaveIn_TSTRB;
input  [0:0] slaveIn_TLAST;
output  [31:0] masterOut_TDATA;
output  [3:0] masterOut_TSTRB;
output  [0:0] masterOut_TLAST;
input   slaveIn_TVALID;
output   slaveIn_TREADY;
output   masterOut_TVALID;
input   masterOut_TREADY;

reg    ap_rst_n_inv;
wire   [31:0] rule0_V;
wire   [31:0] rule1_V;
wire   [31:0] rule2_V;
wire    my_ip_hls_entry3_U0_ap_start;
wire    my_ip_hls_entry3_U0_ap_done;
wire    my_ip_hls_entry3_U0_ap_continue;
wire    my_ip_hls_entry3_U0_ap_idle;
wire    my_ip_hls_entry3_U0_ap_ready;
wire    my_ip_hls_entry3_U0_start_out;
wire    my_ip_hls_entry3_U0_start_write;
wire   [31:0] my_ip_hls_entry3_U0_rule0_V_out_din;
wire    my_ip_hls_entry3_U0_rule0_V_out_write;
wire   [31:0] my_ip_hls_entry3_U0_rule1_V_out_din;
wire    my_ip_hls_entry3_U0_rule1_V_out_write;
wire   [31:0] my_ip_hls_entry3_U0_rule2_V_out_din;
wire    my_ip_hls_entry3_U0_rule2_V_out_write;
wire    my_ip_hls_entry83_U0_ap_start;
wire    my_ip_hls_entry83_U0_ap_done;
wire    my_ip_hls_entry83_U0_ap_continue;
wire    my_ip_hls_entry83_U0_ap_idle;
wire    my_ip_hls_entry83_U0_ap_ready;
wire    my_ip_hls_entry83_U0_start_out;
wire    my_ip_hls_entry83_U0_start_write;
wire    my_ip_hls_entry83_U0_rule0_V_read;
wire    my_ip_hls_entry83_U0_rule1_V_read;
wire    my_ip_hls_entry83_U0_rule2_V_read;
wire   [31:0] my_ip_hls_entry83_U0_rule0_V_out_din;
wire    my_ip_hls_entry83_U0_rule0_V_out_write;
wire   [31:0] my_ip_hls_entry83_U0_rule1_V_out_din;
wire    my_ip_hls_entry83_U0_rule1_V_out_write;
wire   [31:0] my_ip_hls_entry83_U0_rule2_V_out_din;
wire    my_ip_hls_entry83_U0_rule2_V_out_write;
wire    rules_in_U0_ap_start;
wire    rules_in_U0_ap_done;
wire    rules_in_U0_ap_continue;
wire    rules_in_U0_ap_idle;
wire    rules_in_U0_ap_ready;
wire    rules_in_U0_rule0_V_read;
wire    rules_in_U0_rule1_V_read;
wire    rules_in_U0_rule2_V_read;
wire   [31:0] rules_in_U0_ap_return_0;
wire   [31:0] rules_in_U0_ap_return_1;
wire   [31:0] rules_in_U0_ap_return_2;
wire    ap_channel_done_rule2Reg_V_channel;
wire    rule2Reg_V_channel_full_n;
reg    ap_sync_reg_channel_write_rule2Reg_V_channel;
wire    ap_sync_channel_write_rule2Reg_V_channel;
wire    ap_channel_done_rule1Reg_V_channel;
wire    rule1Reg_V_channel_full_n;
reg    ap_sync_reg_channel_write_rule1Reg_V_channel;
wire    ap_sync_channel_write_rule1Reg_V_channel;
wire    ap_channel_done_rule0Reg_V_channel;
wire    rule0Reg_V_channel_full_n;
reg    ap_sync_reg_channel_write_rule0Reg_V_channel;
wire    ap_sync_channel_write_rule0Reg_V_channel;
wire    ps2ip_fifo_U0_ap_start;
wire    ps2ip_fifo_U0_ap_done;
wire    ps2ip_fifo_U0_ap_continue;
wire    ps2ip_fifo_U0_ap_idle;
wire    ps2ip_fifo_U0_ap_ready;
wire    ps2ip_fifo_U0_slaveIn_TREADY;
wire   [31:0] ps2ip_fifo_U0_ps2ipFifo_V_data_V_din;
wire    ps2ip_fifo_U0_ps2ipFifo_V_data_V_write;
wire   [3:0] ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din;
wire    ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write;
wire   [0:0] ps2ip_fifo_U0_ps2ipFifo_V_last_V_din;
wire    ps2ip_fifo_U0_ps2ipFifo_V_last_V_write;
wire    core_U0_ap_start;
wire    core_U0_ap_done;
wire    core_U0_ap_continue;
wire    core_U0_ap_idle;
wire    core_U0_ap_ready;
wire    core_U0_start_out;
wire    core_U0_start_write;
wire    core_U0_ps2ipFifo_V_data_V_read;
wire    core_U0_ps2ipFifo_V_strb_V_read;
wire    core_U0_ps2ipFifo_V_last_V_read;
wire   [31:0] core_U0_ip2psFifo_V_data_V_din;
wire    core_U0_ip2psFifo_V_data_V_write;
wire   [3:0] core_U0_ip2psFifo_V_strb_V_din;
wire    core_U0_ip2psFifo_V_strb_V_write;
wire   [0:0] core_U0_ip2psFifo_V_last_V_din;
wire    core_U0_ip2psFifo_V_last_V_write;
wire   [31:0] core_U0_ap_return_0;
wire   [31:0] core_U0_ap_return_1;
wire   [31:0] core_U0_ap_return_2;
wire    ap_channel_done_cnt2Reg_V;
wire    cnt2Reg_V_full_n;
reg    ap_sync_reg_channel_write_cnt2Reg_V;
wire    ap_sync_channel_write_cnt2Reg_V;
wire    ap_channel_done_cnt1Reg_V;
wire    cnt1Reg_V_full_n;
reg    ap_sync_reg_channel_write_cnt1Reg_V;
wire    ap_sync_channel_write_cnt1Reg_V;
wire    ap_channel_done_cnt0Reg_V;
wire    cnt0Reg_V_full_n;
reg    ap_sync_reg_channel_write_cnt0Reg_V;
wire    ap_sync_channel_write_cnt0Reg_V;
wire    ip2ps_fifo_U0_ap_start;
wire    ip2ps_fifo_U0_ap_done;
wire    ip2ps_fifo_U0_ap_continue;
wire    ip2ps_fifo_U0_ap_idle;
wire    ip2ps_fifo_U0_ap_ready;
wire   [31:0] ip2ps_fifo_U0_masterOut_TDATA;
wire    ip2ps_fifo_U0_masterOut_TVALID;
wire   [3:0] ip2ps_fifo_U0_masterOut_TSTRB;
wire   [0:0] ip2ps_fifo_U0_masterOut_TLAST;
wire    ip2ps_fifo_U0_ip2psFifo_V_data_V_read;
wire    ip2ps_fifo_U0_ip2psFifo_V_strb_V_read;
wire    ip2ps_fifo_U0_ip2psFifo_V_last_V_read;
wire    ap_sync_continue;
wire    counters_out_U0_ap_start;
wire    counters_out_U0_ap_done;
wire    counters_out_U0_ap_continue;
wire    counters_out_U0_ap_idle;
wire    counters_out_U0_ap_ready;
wire   [31:0] counters_out_U0_rule0cnt_V;
wire    counters_out_U0_rule0cnt_V_ap_vld;
wire   [31:0] counters_out_U0_rule1cnt_V;
wire    counters_out_U0_rule1cnt_V_ap_vld;
wire   [31:0] counters_out_U0_rule2cnt_V;
wire    counters_out_U0_rule2cnt_V_ap_vld;
wire    rule0_V_c1_full_n;
wire   [31:0] rule0_V_c1_dout;
wire    rule0_V_c1_empty_n;
wire    rule1_V_c2_full_n;
wire   [31:0] rule1_V_c2_dout;
wire    rule1_V_c2_empty_n;
wire    rule2_V_c3_full_n;
wire   [31:0] rule2_V_c3_dout;
wire    rule2_V_c3_empty_n;
wire    rule0_V_c_full_n;
wire   [31:0] rule0_V_c_dout;
wire    rule0_V_c_empty_n;
wire    rule1_V_c_full_n;
wire   [31:0] rule1_V_c_dout;
wire    rule1_V_c_empty_n;
wire    rule2_V_c_full_n;
wire   [31:0] rule2_V_c_dout;
wire    rule2_V_c_empty_n;
wire   [31:0] rule0Reg_V_channel_dout;
wire    rule0Reg_V_channel_empty_n;
wire   [31:0] rule1Reg_V_channel_dout;
wire    rule1Reg_V_channel_empty_n;
wire   [31:0] rule2Reg_V_channel_dout;
wire    rule2Reg_V_channel_empty_n;
wire    ps2ipFifo_V_data_V_full_n;
wire   [31:0] ps2ipFifo_V_data_V_dout;
wire    ps2ipFifo_V_data_V_empty_n;
wire    ps2ipFifo_V_strb_V_full_n;
wire   [3:0] ps2ipFifo_V_strb_V_dout;
wire    ps2ipFifo_V_strb_V_empty_n;
wire    ps2ipFifo_V_last_V_full_n;
wire   [0:0] ps2ipFifo_V_last_V_dout;
wire    ps2ipFifo_V_last_V_empty_n;
wire    ip2psFifo_V_data_V_full_n;
wire   [31:0] ip2psFifo_V_data_V_dout;
wire    ip2psFifo_V_data_V_empty_n;
wire    ip2psFifo_V_strb_V_full_n;
wire   [3:0] ip2psFifo_V_strb_V_dout;
wire    ip2psFifo_V_strb_V_empty_n;
wire    ip2psFifo_V_last_V_full_n;
wire   [0:0] ip2psFifo_V_last_V_dout;
wire    ip2psFifo_V_last_V_empty_n;
wire   [31:0] cnt0Reg_V_dout;
wire    cnt0Reg_V_empty_n;
wire   [31:0] cnt1Reg_V_dout;
wire    cnt1Reg_V_empty_n;
wire   [31:0] cnt2Reg_V_dout;
wire    cnt2Reg_V_empty_n;
wire   [0:0] start_for_my_ip_hls_entry83_U0_din;
wire    start_for_my_ip_hls_entry83_U0_full_n;
wire   [0:0] start_for_my_ip_hls_entry83_U0_dout;
wire    start_for_my_ip_hls_entry83_U0_empty_n;
wire   [0:0] start_for_rules_in_U0_din;
wire    start_for_rules_in_U0_full_n;
wire   [0:0] start_for_rules_in_U0_dout;
wire    start_for_rules_in_U0_empty_n;
wire    rules_in_U0_start_full_n;
wire    rules_in_U0_start_write;
wire    ps2ip_fifo_U0_start_full_n;
wire    ps2ip_fifo_U0_start_write;
wire   [0:0] start_for_ip2ps_fifo_U0_din;
wire    start_for_ip2ps_fifo_U0_full_n;
wire   [0:0] start_for_ip2ps_fifo_U0_dout;
wire    start_for_ip2ps_fifo_U0_empty_n;
wire    ip2ps_fifo_U0_start_full_n;
wire    ip2ps_fifo_U0_start_write;
wire    counters_out_U0_start_full_n;
wire    counters_out_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_rule2Reg_V_channel = 1'b0;
#0 ap_sync_reg_channel_write_rule1Reg_V_channel = 1'b0;
#0 ap_sync_reg_channel_write_rule0Reg_V_channel = 1'b0;
#0 ap_sync_reg_channel_write_cnt2Reg_V = 1'b0;
#0 ap_sync_reg_channel_write_cnt1Reg_V = 1'b0;
#0 ap_sync_reg_channel_write_cnt0Reg_V = 1'b0;
end

my_ip_hls_psAxiLite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PSAXILITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PSAXILITE_DATA_WIDTH ))
my_ip_hls_psAxiLite_s_axi_U(
    .AWVALID(s_axi_psAxiLite_AWVALID),
    .AWREADY(s_axi_psAxiLite_AWREADY),
    .AWADDR(s_axi_psAxiLite_AWADDR),
    .WVALID(s_axi_psAxiLite_WVALID),
    .WREADY(s_axi_psAxiLite_WREADY),
    .WDATA(s_axi_psAxiLite_WDATA),
    .WSTRB(s_axi_psAxiLite_WSTRB),
    .ARVALID(s_axi_psAxiLite_ARVALID),
    .ARREADY(s_axi_psAxiLite_ARREADY),
    .ARADDR(s_axi_psAxiLite_ARADDR),
    .RVALID(s_axi_psAxiLite_RVALID),
    .RREADY(s_axi_psAxiLite_RREADY),
    .RDATA(s_axi_psAxiLite_RDATA),
    .RRESP(s_axi_psAxiLite_RRESP),
    .BVALID(s_axi_psAxiLite_BVALID),
    .BREADY(s_axi_psAxiLite_BREADY),
    .BRESP(s_axi_psAxiLite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .rule0_V(rule0_V),
    .rule1_V(rule1_V),
    .rule2_V(rule2_V),
    .rule0cnt_V(counters_out_U0_rule0cnt_V),
    .rule0cnt_V_ap_vld(counters_out_U0_rule0cnt_V_ap_vld),
    .rule1cnt_V(counters_out_U0_rule1cnt_V),
    .rule1cnt_V_ap_vld(counters_out_U0_rule1cnt_V_ap_vld),
    .rule2cnt_V(counters_out_U0_rule2cnt_V),
    .rule2cnt_V_ap_vld(counters_out_U0_rule2cnt_V_ap_vld)
);

my_ip_hls_entry3 my_ip_hls_entry3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(my_ip_hls_entry3_U0_ap_start),
    .start_full_n(start_for_my_ip_hls_entry83_U0_full_n),
    .ap_done(my_ip_hls_entry3_U0_ap_done),
    .ap_continue(my_ip_hls_entry3_U0_ap_continue),
    .ap_idle(my_ip_hls_entry3_U0_ap_idle),
    .ap_ready(my_ip_hls_entry3_U0_ap_ready),
    .start_out(my_ip_hls_entry3_U0_start_out),
    .start_write(my_ip_hls_entry3_U0_start_write),
    .rule0_V(rule0_V),
    .rule1_V(rule1_V),
    .rule2_V(rule2_V),
    .rule0_V_out_din(my_ip_hls_entry3_U0_rule0_V_out_din),
    .rule0_V_out_full_n(rule0_V_c1_full_n),
    .rule0_V_out_write(my_ip_hls_entry3_U0_rule0_V_out_write),
    .rule1_V_out_din(my_ip_hls_entry3_U0_rule1_V_out_din),
    .rule1_V_out_full_n(rule1_V_c2_full_n),
    .rule1_V_out_write(my_ip_hls_entry3_U0_rule1_V_out_write),
    .rule2_V_out_din(my_ip_hls_entry3_U0_rule2_V_out_din),
    .rule2_V_out_full_n(rule2_V_c3_full_n),
    .rule2_V_out_write(my_ip_hls_entry3_U0_rule2_V_out_write)
);

my_ip_hls_entry83 my_ip_hls_entry83_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(my_ip_hls_entry83_U0_ap_start),
    .start_full_n(start_for_rules_in_U0_full_n),
    .ap_done(my_ip_hls_entry83_U0_ap_done),
    .ap_continue(my_ip_hls_entry83_U0_ap_continue),
    .ap_idle(my_ip_hls_entry83_U0_ap_idle),
    .ap_ready(my_ip_hls_entry83_U0_ap_ready),
    .start_out(my_ip_hls_entry83_U0_start_out),
    .start_write(my_ip_hls_entry83_U0_start_write),
    .rule0_V_dout(rule0_V_c1_dout),
    .rule0_V_empty_n(rule0_V_c1_empty_n),
    .rule0_V_read(my_ip_hls_entry83_U0_rule0_V_read),
    .rule1_V_dout(rule1_V_c2_dout),
    .rule1_V_empty_n(rule1_V_c2_empty_n),
    .rule1_V_read(my_ip_hls_entry83_U0_rule1_V_read),
    .rule2_V_dout(rule2_V_c3_dout),
    .rule2_V_empty_n(rule2_V_c3_empty_n),
    .rule2_V_read(my_ip_hls_entry83_U0_rule2_V_read),
    .rule0_V_out_din(my_ip_hls_entry83_U0_rule0_V_out_din),
    .rule0_V_out_full_n(rule0_V_c_full_n),
    .rule0_V_out_write(my_ip_hls_entry83_U0_rule0_V_out_write),
    .rule1_V_out_din(my_ip_hls_entry83_U0_rule1_V_out_din),
    .rule1_V_out_full_n(rule1_V_c_full_n),
    .rule1_V_out_write(my_ip_hls_entry83_U0_rule1_V_out_write),
    .rule2_V_out_din(my_ip_hls_entry83_U0_rule2_V_out_din),
    .rule2_V_out_full_n(rule2_V_c_full_n),
    .rule2_V_out_write(my_ip_hls_entry83_U0_rule2_V_out_write)
);

rules_in rules_in_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(rules_in_U0_ap_start),
    .ap_done(rules_in_U0_ap_done),
    .ap_continue(rules_in_U0_ap_continue),
    .ap_idle(rules_in_U0_ap_idle),
    .ap_ready(rules_in_U0_ap_ready),
    .rule0_V_dout(rule0_V_c_dout),
    .rule0_V_empty_n(rule0_V_c_empty_n),
    .rule0_V_read(rules_in_U0_rule0_V_read),
    .rule1_V_dout(rule1_V_c_dout),
    .rule1_V_empty_n(rule1_V_c_empty_n),
    .rule1_V_read(rules_in_U0_rule1_V_read),
    .rule2_V_dout(rule2_V_c_dout),
    .rule2_V_empty_n(rule2_V_c_empty_n),
    .rule2_V_read(rules_in_U0_rule2_V_read),
    .ap_return_0(rules_in_U0_ap_return_0),
    .ap_return_1(rules_in_U0_ap_return_1),
    .ap_return_2(rules_in_U0_ap_return_2)
);

ps2ip_fifo ps2ip_fifo_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ps2ip_fifo_U0_ap_start),
    .ap_done(ps2ip_fifo_U0_ap_done),
    .ap_continue(ps2ip_fifo_U0_ap_continue),
    .ap_idle(ps2ip_fifo_U0_ap_idle),
    .ap_ready(ps2ip_fifo_U0_ap_ready),
    .slaveIn_TVALID(slaveIn_TVALID),
    .slaveIn_TDATA(slaveIn_TDATA),
    .slaveIn_TREADY(ps2ip_fifo_U0_slaveIn_TREADY),
    .slaveIn_TSTRB(slaveIn_TSTRB),
    .slaveIn_TLAST(slaveIn_TLAST),
    .ps2ipFifo_V_data_V_din(ps2ip_fifo_U0_ps2ipFifo_V_data_V_din),
    .ps2ipFifo_V_data_V_full_n(ps2ipFifo_V_data_V_full_n),
    .ps2ipFifo_V_data_V_write(ps2ip_fifo_U0_ps2ipFifo_V_data_V_write),
    .ps2ipFifo_V_strb_V_din(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din),
    .ps2ipFifo_V_strb_V_full_n(ps2ipFifo_V_strb_V_full_n),
    .ps2ipFifo_V_strb_V_write(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write),
    .ps2ipFifo_V_last_V_din(ps2ip_fifo_U0_ps2ipFifo_V_last_V_din),
    .ps2ipFifo_V_last_V_full_n(ps2ipFifo_V_last_V_full_n),
    .ps2ipFifo_V_last_V_write(ps2ip_fifo_U0_ps2ipFifo_V_last_V_write)
);

core core_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(core_U0_ap_start),
    .start_full_n(start_for_ip2ps_fifo_U0_full_n),
    .ap_done(core_U0_ap_done),
    .ap_continue(core_U0_ap_continue),
    .ap_idle(core_U0_ap_idle),
    .ap_ready(core_U0_ap_ready),
    .start_out(core_U0_start_out),
    .start_write(core_U0_start_write),
    .p_read(rule0Reg_V_channel_dout),
    .p_read1(rule1Reg_V_channel_dout),
    .p_read2(rule2Reg_V_channel_dout),
    .ps2ipFifo_V_data_V_dout(ps2ipFifo_V_data_V_dout),
    .ps2ipFifo_V_data_V_empty_n(ps2ipFifo_V_data_V_empty_n),
    .ps2ipFifo_V_data_V_read(core_U0_ps2ipFifo_V_data_V_read),
    .ps2ipFifo_V_strb_V_dout(ps2ipFifo_V_strb_V_dout),
    .ps2ipFifo_V_strb_V_empty_n(ps2ipFifo_V_strb_V_empty_n),
    .ps2ipFifo_V_strb_V_read(core_U0_ps2ipFifo_V_strb_V_read),
    .ps2ipFifo_V_last_V_dout(ps2ipFifo_V_last_V_dout),
    .ps2ipFifo_V_last_V_empty_n(ps2ipFifo_V_last_V_empty_n),
    .ps2ipFifo_V_last_V_read(core_U0_ps2ipFifo_V_last_V_read),
    .ip2psFifo_V_data_V_din(core_U0_ip2psFifo_V_data_V_din),
    .ip2psFifo_V_data_V_full_n(ip2psFifo_V_data_V_full_n),
    .ip2psFifo_V_data_V_write(core_U0_ip2psFifo_V_data_V_write),
    .ip2psFifo_V_strb_V_din(core_U0_ip2psFifo_V_strb_V_din),
    .ip2psFifo_V_strb_V_full_n(ip2psFifo_V_strb_V_full_n),
    .ip2psFifo_V_strb_V_write(core_U0_ip2psFifo_V_strb_V_write),
    .ip2psFifo_V_last_V_din(core_U0_ip2psFifo_V_last_V_din),
    .ip2psFifo_V_last_V_full_n(ip2psFifo_V_last_V_full_n),
    .ip2psFifo_V_last_V_write(core_U0_ip2psFifo_V_last_V_write),
    .ap_return_0(core_U0_ap_return_0),
    .ap_return_1(core_U0_ap_return_1),
    .ap_return_2(core_U0_ap_return_2)
);

ip2ps_fifo ip2ps_fifo_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ip2ps_fifo_U0_ap_start),
    .ap_done(ip2ps_fifo_U0_ap_done),
    .ap_continue(ip2ps_fifo_U0_ap_continue),
    .ap_idle(ip2ps_fifo_U0_ap_idle),
    .ap_ready(ip2ps_fifo_U0_ap_ready),
    .masterOut_TREADY(masterOut_TREADY),
    .masterOut_TDATA(ip2ps_fifo_U0_masterOut_TDATA),
    .masterOut_TVALID(ip2ps_fifo_U0_masterOut_TVALID),
    .masterOut_TSTRB(ip2ps_fifo_U0_masterOut_TSTRB),
    .masterOut_TLAST(ip2ps_fifo_U0_masterOut_TLAST),
    .ip2psFifo_V_data_V_dout(ip2psFifo_V_data_V_dout),
    .ip2psFifo_V_data_V_empty_n(ip2psFifo_V_data_V_empty_n),
    .ip2psFifo_V_data_V_read(ip2ps_fifo_U0_ip2psFifo_V_data_V_read),
    .ip2psFifo_V_strb_V_dout(ip2psFifo_V_strb_V_dout),
    .ip2psFifo_V_strb_V_empty_n(ip2psFifo_V_strb_V_empty_n),
    .ip2psFifo_V_strb_V_read(ip2ps_fifo_U0_ip2psFifo_V_strb_V_read),
    .ip2psFifo_V_last_V_dout(ip2psFifo_V_last_V_dout),
    .ip2psFifo_V_last_V_empty_n(ip2psFifo_V_last_V_empty_n),
    .ip2psFifo_V_last_V_read(ip2ps_fifo_U0_ip2psFifo_V_last_V_read)
);

counters_out counters_out_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(counters_out_U0_ap_start),
    .ap_done(counters_out_U0_ap_done),
    .ap_continue(counters_out_U0_ap_continue),
    .ap_idle(counters_out_U0_ap_idle),
    .ap_ready(counters_out_U0_ap_ready),
    .p_read(cnt0Reg_V_dout),
    .p_read1(cnt1Reg_V_dout),
    .p_read2(cnt2Reg_V_dout),
    .rule0cnt_V(counters_out_U0_rule0cnt_V),
    .rule0cnt_V_ap_vld(counters_out_U0_rule0cnt_V_ap_vld),
    .rule1cnt_V(counters_out_U0_rule1cnt_V),
    .rule1cnt_V_ap_vld(counters_out_U0_rule1cnt_V_ap_vld),
    .rule2cnt_V(counters_out_U0_rule2cnt_V),
    .rule2cnt_V_ap_vld(counters_out_U0_rule2cnt_V_ap_vld)
);

fifo_w32_d1_A rule0_V_c1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry3_U0_rule0_V_out_din),
    .if_full_n(rule0_V_c1_full_n),
    .if_write(my_ip_hls_entry3_U0_rule0_V_out_write),
    .if_dout(rule0_V_c1_dout),
    .if_empty_n(rule0_V_c1_empty_n),
    .if_read(my_ip_hls_entry83_U0_rule0_V_read)
);

fifo_w32_d1_A rule1_V_c2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry3_U0_rule1_V_out_din),
    .if_full_n(rule1_V_c2_full_n),
    .if_write(my_ip_hls_entry3_U0_rule1_V_out_write),
    .if_dout(rule1_V_c2_dout),
    .if_empty_n(rule1_V_c2_empty_n),
    .if_read(my_ip_hls_entry83_U0_rule1_V_read)
);

fifo_w32_d1_A rule2_V_c3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry3_U0_rule2_V_out_din),
    .if_full_n(rule2_V_c3_full_n),
    .if_write(my_ip_hls_entry3_U0_rule2_V_out_write),
    .if_dout(rule2_V_c3_dout),
    .if_empty_n(rule2_V_c3_empty_n),
    .if_read(my_ip_hls_entry83_U0_rule2_V_read)
);

fifo_w32_d1_A rule0_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry83_U0_rule0_V_out_din),
    .if_full_n(rule0_V_c_full_n),
    .if_write(my_ip_hls_entry83_U0_rule0_V_out_write),
    .if_dout(rule0_V_c_dout),
    .if_empty_n(rule0_V_c_empty_n),
    .if_read(rules_in_U0_rule0_V_read)
);

fifo_w32_d1_A rule1_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry83_U0_rule1_V_out_din),
    .if_full_n(rule1_V_c_full_n),
    .if_write(my_ip_hls_entry83_U0_rule1_V_out_write),
    .if_dout(rule1_V_c_dout),
    .if_empty_n(rule1_V_c_empty_n),
    .if_read(rules_in_U0_rule1_V_read)
);

fifo_w32_d1_A rule2_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(my_ip_hls_entry83_U0_rule2_V_out_din),
    .if_full_n(rule2_V_c_full_n),
    .if_write(my_ip_hls_entry83_U0_rule2_V_out_write),
    .if_dout(rule2_V_c_dout),
    .if_empty_n(rule2_V_c_empty_n),
    .if_read(rules_in_U0_rule2_V_read)
);

fifo_w32_d2_A rule0Reg_V_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(rules_in_U0_ap_return_0),
    .if_full_n(rule0Reg_V_channel_full_n),
    .if_write(ap_channel_done_rule0Reg_V_channel),
    .if_dout(rule0Reg_V_channel_dout),
    .if_empty_n(rule0Reg_V_channel_empty_n),
    .if_read(core_U0_ap_ready)
);

fifo_w32_d2_A rule1Reg_V_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(rules_in_U0_ap_return_1),
    .if_full_n(rule1Reg_V_channel_full_n),
    .if_write(ap_channel_done_rule1Reg_V_channel),
    .if_dout(rule1Reg_V_channel_dout),
    .if_empty_n(rule1Reg_V_channel_empty_n),
    .if_read(core_U0_ap_ready)
);

fifo_w32_d2_A rule2Reg_V_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(rules_in_U0_ap_return_2),
    .if_full_n(rule2Reg_V_channel_full_n),
    .if_write(ap_channel_done_rule2Reg_V_channel),
    .if_dout(rule2Reg_V_channel_dout),
    .if_empty_n(rule2Reg_V_channel_empty_n),
    .if_read(core_U0_ap_ready)
);

fifo_w32_d64_A ps2ipFifo_V_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ps2ip_fifo_U0_ps2ipFifo_V_data_V_din),
    .if_full_n(ps2ipFifo_V_data_V_full_n),
    .if_write(ps2ip_fifo_U0_ps2ipFifo_V_data_V_write),
    .if_dout(ps2ipFifo_V_data_V_dout),
    .if_empty_n(ps2ipFifo_V_data_V_empty_n),
    .if_read(core_U0_ps2ipFifo_V_data_V_read)
);

fifo_w4_d64_A ps2ipFifo_V_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din),
    .if_full_n(ps2ipFifo_V_strb_V_full_n),
    .if_write(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write),
    .if_dout(ps2ipFifo_V_strb_V_dout),
    .if_empty_n(ps2ipFifo_V_strb_V_empty_n),
    .if_read(core_U0_ps2ipFifo_V_strb_V_read)
);

fifo_w1_d64_A ps2ipFifo_V_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ps2ip_fifo_U0_ps2ipFifo_V_last_V_din),
    .if_full_n(ps2ipFifo_V_last_V_full_n),
    .if_write(ps2ip_fifo_U0_ps2ipFifo_V_last_V_write),
    .if_dout(ps2ipFifo_V_last_V_dout),
    .if_empty_n(ps2ipFifo_V_last_V_empty_n),
    .if_read(core_U0_ps2ipFifo_V_last_V_read)
);

fifo_w32_d64_A ip2psFifo_V_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ip2psFifo_V_data_V_din),
    .if_full_n(ip2psFifo_V_data_V_full_n),
    .if_write(core_U0_ip2psFifo_V_data_V_write),
    .if_dout(ip2psFifo_V_data_V_dout),
    .if_empty_n(ip2psFifo_V_data_V_empty_n),
    .if_read(ip2ps_fifo_U0_ip2psFifo_V_data_V_read)
);

fifo_w4_d64_A ip2psFifo_V_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ip2psFifo_V_strb_V_din),
    .if_full_n(ip2psFifo_V_strb_V_full_n),
    .if_write(core_U0_ip2psFifo_V_strb_V_write),
    .if_dout(ip2psFifo_V_strb_V_dout),
    .if_empty_n(ip2psFifo_V_strb_V_empty_n),
    .if_read(ip2ps_fifo_U0_ip2psFifo_V_strb_V_read)
);

fifo_w1_d64_A ip2psFifo_V_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ip2psFifo_V_last_V_din),
    .if_full_n(ip2psFifo_V_last_V_full_n),
    .if_write(core_U0_ip2psFifo_V_last_V_write),
    .if_dout(ip2psFifo_V_last_V_dout),
    .if_empty_n(ip2psFifo_V_last_V_empty_n),
    .if_read(ip2ps_fifo_U0_ip2psFifo_V_last_V_read)
);

fifo_w32_d2_A cnt0Reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ap_return_0),
    .if_full_n(cnt0Reg_V_full_n),
    .if_write(ap_channel_done_cnt0Reg_V),
    .if_dout(cnt0Reg_V_dout),
    .if_empty_n(cnt0Reg_V_empty_n),
    .if_read(counters_out_U0_ap_ready)
);

fifo_w32_d2_A cnt1Reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ap_return_1),
    .if_full_n(cnt1Reg_V_full_n),
    .if_write(ap_channel_done_cnt1Reg_V),
    .if_dout(cnt1Reg_V_dout),
    .if_empty_n(cnt1Reg_V_empty_n),
    .if_read(counters_out_U0_ap_ready)
);

fifo_w32_d2_A cnt2Reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(core_U0_ap_return_2),
    .if_full_n(cnt2Reg_V_full_n),
    .if_write(ap_channel_done_cnt2Reg_V),
    .if_dout(cnt2Reg_V_dout),
    .if_empty_n(cnt2Reg_V_empty_n),
    .if_read(counters_out_U0_ap_ready)
);

start_for_my_ip_hbkb start_for_my_ip_hbkb_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_my_ip_hls_entry83_U0_din),
    .if_full_n(start_for_my_ip_hls_entry83_U0_full_n),
    .if_write(my_ip_hls_entry3_U0_start_write),
    .if_dout(start_for_my_ip_hls_entry83_U0_dout),
    .if_empty_n(start_for_my_ip_hls_entry83_U0_empty_n),
    .if_read(my_ip_hls_entry83_U0_ap_ready)
);

start_for_rules_icud start_for_rules_icud_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_rules_in_U0_din),
    .if_full_n(start_for_rules_in_U0_full_n),
    .if_write(my_ip_hls_entry83_U0_start_write),
    .if_dout(start_for_rules_in_U0_dout),
    .if_empty_n(start_for_rules_in_U0_empty_n),
    .if_read(rules_in_U0_ap_ready)
);

start_for_ip2ps_fdEe start_for_ip2ps_fdEe_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_ip2ps_fifo_U0_din),
    .if_full_n(start_for_ip2ps_fifo_U0_full_n),
    .if_write(core_U0_start_write),
    .if_dout(start_for_ip2ps_fifo_U0_dout),
    .if_empty_n(start_for_ip2ps_fifo_U0_empty_n),
    .if_read(ip2ps_fifo_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_cnt0Reg_V <= 1'b0;
    end else begin
        if (((core_U0_ap_done & core_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cnt0Reg_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cnt0Reg_V <= ap_sync_channel_write_cnt0Reg_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_cnt1Reg_V <= 1'b0;
    end else begin
        if (((core_U0_ap_done & core_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cnt1Reg_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cnt1Reg_V <= ap_sync_channel_write_cnt1Reg_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_cnt2Reg_V <= 1'b0;
    end else begin
        if (((core_U0_ap_done & core_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cnt2Reg_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cnt2Reg_V <= ap_sync_channel_write_cnt2Reg_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_rule0Reg_V_channel <= 1'b0;
    end else begin
        if (((rules_in_U0_ap_done & rules_in_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_rule0Reg_V_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_rule0Reg_V_channel <= ap_sync_channel_write_rule0Reg_V_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_rule1Reg_V_channel <= 1'b0;
    end else begin
        if (((rules_in_U0_ap_done & rules_in_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_rule1Reg_V_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_rule1Reg_V_channel <= ap_sync_channel_write_rule1Reg_V_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_rule2Reg_V_channel <= 1'b0;
    end else begin
        if (((rules_in_U0_ap_done & rules_in_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_rule2Reg_V_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_rule2Reg_V_channel <= ap_sync_channel_write_rule2Reg_V_channel;
        end
    end
end

assign ap_channel_done_cnt0Reg_V = ((ap_sync_reg_channel_write_cnt0Reg_V ^ 1'b1) & core_U0_ap_done);

assign ap_channel_done_cnt1Reg_V = ((ap_sync_reg_channel_write_cnt1Reg_V ^ 1'b1) & core_U0_ap_done);

assign ap_channel_done_cnt2Reg_V = ((ap_sync_reg_channel_write_cnt2Reg_V ^ 1'b1) & core_U0_ap_done);

assign ap_channel_done_rule0Reg_V_channel = (rules_in_U0_ap_done & (ap_sync_reg_channel_write_rule0Reg_V_channel ^ 1'b1));

assign ap_channel_done_rule1Reg_V_channel = (rules_in_U0_ap_done & (ap_sync_reg_channel_write_rule1Reg_V_channel ^ 1'b1));

assign ap_channel_done_rule2Reg_V_channel = (rules_in_U0_ap_done & (ap_sync_reg_channel_write_rule2Reg_V_channel ^ 1'b1));

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_channel_write_cnt0Reg_V = ((cnt0Reg_V_full_n & ap_channel_done_cnt0Reg_V) | ap_sync_reg_channel_write_cnt0Reg_V);

assign ap_sync_channel_write_cnt1Reg_V = ((cnt1Reg_V_full_n & ap_channel_done_cnt1Reg_V) | ap_sync_reg_channel_write_cnt1Reg_V);

assign ap_sync_channel_write_cnt2Reg_V = ((cnt2Reg_V_full_n & ap_channel_done_cnt2Reg_V) | ap_sync_reg_channel_write_cnt2Reg_V);

assign ap_sync_channel_write_rule0Reg_V_channel = ((rule0Reg_V_channel_full_n & ap_channel_done_rule0Reg_V_channel) | ap_sync_reg_channel_write_rule0Reg_V_channel);

assign ap_sync_channel_write_rule1Reg_V_channel = ((rule1Reg_V_channel_full_n & ap_channel_done_rule1Reg_V_channel) | ap_sync_reg_channel_write_rule1Reg_V_channel);

assign ap_sync_channel_write_rule2Reg_V_channel = ((rule2Reg_V_channel_full_n & ap_channel_done_rule2Reg_V_channel) | ap_sync_reg_channel_write_rule2Reg_V_channel);

assign ap_sync_continue = 1'b0;

assign core_U0_ap_continue = (ap_sync_channel_write_cnt2Reg_V & ap_sync_channel_write_cnt1Reg_V & ap_sync_channel_write_cnt0Reg_V);

assign core_U0_ap_start = (rule2Reg_V_channel_empty_n & rule1Reg_V_channel_empty_n & rule0Reg_V_channel_empty_n);

assign counters_out_U0_ap_continue = 1'b1;

assign counters_out_U0_ap_start = (cnt2Reg_V_empty_n & cnt1Reg_V_empty_n & cnt0Reg_V_empty_n);

assign counters_out_U0_start_full_n = 1'b1;

assign counters_out_U0_start_write = 1'b0;

assign ip2ps_fifo_U0_ap_continue = 1'b1;

assign ip2ps_fifo_U0_ap_start = start_for_ip2ps_fifo_U0_empty_n;

assign ip2ps_fifo_U0_start_full_n = 1'b1;

assign ip2ps_fifo_U0_start_write = 1'b0;

assign masterOut_TDATA = ip2ps_fifo_U0_masterOut_TDATA;

assign masterOut_TLAST = ip2ps_fifo_U0_masterOut_TLAST;

assign masterOut_TSTRB = ip2ps_fifo_U0_masterOut_TSTRB;

assign masterOut_TVALID = ip2ps_fifo_U0_masterOut_TVALID;

assign my_ip_hls_entry3_U0_ap_continue = 1'b1;

assign my_ip_hls_entry3_U0_ap_start = 1'b1;

assign my_ip_hls_entry83_U0_ap_continue = 1'b1;

assign my_ip_hls_entry83_U0_ap_start = start_for_my_ip_hls_entry83_U0_empty_n;

assign ps2ip_fifo_U0_ap_continue = 1'b1;

assign ps2ip_fifo_U0_ap_start = 1'b1;

assign ps2ip_fifo_U0_start_full_n = 1'b1;

assign ps2ip_fifo_U0_start_write = 1'b0;

assign rules_in_U0_ap_continue = (ap_sync_channel_write_rule2Reg_V_channel & ap_sync_channel_write_rule1Reg_V_channel & ap_sync_channel_write_rule0Reg_V_channel);

assign rules_in_U0_ap_start = start_for_rules_in_U0_empty_n;

assign rules_in_U0_start_full_n = 1'b1;

assign rules_in_U0_start_write = 1'b0;

assign slaveIn_TREADY = ps2ip_fifo_U0_slaveIn_TREADY;

assign start_for_ip2ps_fifo_U0_din = 1'b1;

assign start_for_my_ip_hls_entry83_U0_din = 1'b1;

assign start_for_rules_in_U0_din = 1'b1;

endmodule //my_ip_hls
