// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ip2ps_fifo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ip2ps_fifo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ip2ps_fifo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ip2ps_fifo::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> ip2ps_fifo::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> ip2ps_fifo::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> ip2ps_fifo::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> ip2ps_fifo::ap_ST_iter2_fsm_state0 = "1";
const sc_lv<32> ip2ps_fifo::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ip2ps_fifo::ap_const_boolean_1 = true;
const sc_lv<1> ip2ps_fifo::ap_const_lv1_1 = "1";
const sc_lv<32> ip2ps_fifo::ap_const_lv32_1 = "1";
const sc_lv<1> ip2ps_fifo::ap_const_lv1_0 = "0";
const sc_lv<2> ip2ps_fifo::ap_const_lv2_0 = "00";
const sc_lv<2> ip2ps_fifo::ap_const_lv2_2 = "10";
const sc_lv<2> ip2ps_fifo::ap_const_lv2_3 = "11";
const sc_lv<2> ip2ps_fifo::ap_const_lv2_1 = "1";
const bool ip2ps_fifo::ap_const_boolean_0 = false;

ip2ps_fifo::ip2ps_fifo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state0);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( tmp_reg_89 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_89 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );
    sensitive << ( ap_CS_iter2_fsm_state0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ip2psFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ip2psFifo_V_data_V0_status);
    sensitive << ( ip2psFifo_V_data_V_empty_n );
    sensitive << ( ip2psFifo_V_strb_V_empty_n );
    sensitive << ( ip2psFifo_V_last_V_empty_n );

    SC_METHOD(thread_ip2psFifo_V_data_V0_update);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ip2psFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ip2psFifo_V_data_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2psFifo_V_data_V_empty_n );

    SC_METHOD(thread_ip2psFifo_V_data_V_read);
    sensitive << ( ip2psFifo_V_data_V0_update );

    SC_METHOD(thread_ip2psFifo_V_last_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2psFifo_V_last_V_empty_n );

    SC_METHOD(thread_ip2psFifo_V_last_V_read);
    sensitive << ( ip2psFifo_V_data_V0_update );

    SC_METHOD(thread_ip2psFifo_V_strb_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2psFifo_V_strb_V_empty_n );

    SC_METHOD(thread_ip2psFifo_V_strb_V_read);
    sensitive << ( ip2psFifo_V_data_V0_update );

    SC_METHOD(thread_ip2ps_V_data_V_1_ack_in);
    sensitive << ( ip2ps_V_data_V_1_state );

    SC_METHOD(thread_ip2ps_V_data_V_1_ack_out);
    sensitive << ( masterOut_TREADY );

    SC_METHOD(thread_ip2ps_V_data_V_1_data_out);
    sensitive << ( ip2ps_V_data_V_1_payload_A );
    sensitive << ( ip2ps_V_data_V_1_payload_B );
    sensitive << ( ip2ps_V_data_V_1_sel );

    SC_METHOD(thread_ip2ps_V_data_V_1_load_A);
    sensitive << ( ip2ps_V_data_V_1_sel_wr );
    sensitive << ( ip2ps_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_data_V_1_load_B);
    sensitive << ( ip2ps_V_data_V_1_sel_wr );
    sensitive << ( ip2ps_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_data_V_1_sel);
    sensitive << ( ip2ps_V_data_V_1_sel_rd );

    SC_METHOD(thread_ip2ps_V_data_V_1_state_cmp_full);
    sensitive << ( ip2ps_V_data_V_1_state );

    SC_METHOD(thread_ip2ps_V_data_V_1_vld_in);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( tmp_reg_89 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ip2ps_V_data_V_1_vld_out);
    sensitive << ( ip2ps_V_data_V_1_state );

    SC_METHOD(thread_ip2ps_V_last_V_1_ack_in);
    sensitive << ( ip2ps_V_last_V_1_state );

    SC_METHOD(thread_ip2ps_V_last_V_1_ack_out);
    sensitive << ( masterOut_TREADY );

    SC_METHOD(thread_ip2ps_V_last_V_1_data_out);
    sensitive << ( ip2ps_V_last_V_1_payload_A );
    sensitive << ( ip2ps_V_last_V_1_payload_B );
    sensitive << ( ip2ps_V_last_V_1_sel );

    SC_METHOD(thread_ip2ps_V_last_V_1_load_A);
    sensitive << ( ip2ps_V_last_V_1_sel_wr );
    sensitive << ( ip2ps_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_last_V_1_load_B);
    sensitive << ( ip2ps_V_last_V_1_sel_wr );
    sensitive << ( ip2ps_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_last_V_1_sel);
    sensitive << ( ip2ps_V_last_V_1_sel_rd );

    SC_METHOD(thread_ip2ps_V_last_V_1_state_cmp_full);
    sensitive << ( ip2ps_V_last_V_1_state );

    SC_METHOD(thread_ip2ps_V_last_V_1_vld_in);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( tmp_reg_89 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ip2ps_V_last_V_1_vld_out);
    sensitive << ( ip2ps_V_last_V_1_state );

    SC_METHOD(thread_ip2ps_V_strb_V_1_ack_in);
    sensitive << ( ip2ps_V_strb_V_1_state );

    SC_METHOD(thread_ip2ps_V_strb_V_1_ack_out);
    sensitive << ( masterOut_TREADY );

    SC_METHOD(thread_ip2ps_V_strb_V_1_data_out);
    sensitive << ( ip2ps_V_strb_V_1_payload_A );
    sensitive << ( ip2ps_V_strb_V_1_payload_B );
    sensitive << ( ip2ps_V_strb_V_1_sel );

    SC_METHOD(thread_ip2ps_V_strb_V_1_load_A);
    sensitive << ( ip2ps_V_strb_V_1_sel_wr );
    sensitive << ( ip2ps_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_strb_V_1_load_B);
    sensitive << ( ip2ps_V_strb_V_1_sel_wr );
    sensitive << ( ip2ps_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_ip2ps_V_strb_V_1_sel);
    sensitive << ( ip2ps_V_strb_V_1_sel_rd );

    SC_METHOD(thread_ip2ps_V_strb_V_1_state_cmp_full);
    sensitive << ( ip2ps_V_strb_V_1_state );

    SC_METHOD(thread_ip2ps_V_strb_V_1_vld_in);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( tmp_reg_89 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ip2ps_V_strb_V_1_vld_out);
    sensitive << ( ip2ps_V_strb_V_1_state );

    SC_METHOD(thread_masterOut_TDATA);
    sensitive << ( ip2ps_V_data_V_1_data_out );

    SC_METHOD(thread_masterOut_TDATA_blk_n);
    sensitive << ( tmp_reg_89 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_89 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ip2ps_V_data_V_1_state );

    SC_METHOD(thread_masterOut_TLAST);
    sensitive << ( ip2ps_V_last_V_1_data_out );

    SC_METHOD(thread_masterOut_TSTRB);
    sensitive << ( ip2ps_V_strb_V_1_data_out );

    SC_METHOD(thread_masterOut_TVALID);
    sensitive << ( ip2ps_V_last_V_1_state );

    SC_METHOD(thread_tmp_nbreadreq_fu_42_p5);
    sensitive << ( ip2psFifo_V_data_V_empty_n );
    sensitive << ( ip2psFifo_V_strb_V_empty_n );
    sensitive << ( ip2psFifo_V_last_V_empty_n );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ip2psFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ip2psFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_42_p5 );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( ip2ps_V_data_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2ps_V_strb_V_1_ack_in );
    sensitive << ( ip2ps_V_last_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    ip2ps_V_data_V_1_sel_rd = SC_LOGIC_0;
    ip2ps_V_data_V_1_sel_wr = SC_LOGIC_0;
    ip2ps_V_data_V_1_state = "00";
    ip2ps_V_strb_V_1_sel_rd = SC_LOGIC_0;
    ip2ps_V_strb_V_1_sel_wr = SC_LOGIC_0;
    ip2ps_V_strb_V_1_state = "00";
    ip2ps_V_last_V_1_sel_rd = SC_LOGIC_0;
    ip2ps_V_last_V_1_sel_wr = SC_LOGIC_0;
    ip2ps_V_last_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ip2ps_fifo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, masterOut_TREADY, "(port)masterOut_TREADY");
    sc_trace(mVcdFile, masterOut_TDATA, "(port)masterOut_TDATA");
    sc_trace(mVcdFile, masterOut_TVALID, "(port)masterOut_TVALID");
    sc_trace(mVcdFile, masterOut_TSTRB, "(port)masterOut_TSTRB");
    sc_trace(mVcdFile, masterOut_TLAST, "(port)masterOut_TLAST");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_dout, "(port)ip2psFifo_V_data_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_empty_n, "(port)ip2psFifo_V_data_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_read, "(port)ip2psFifo_V_data_V_read");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_dout, "(port)ip2psFifo_V_strb_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_empty_n, "(port)ip2psFifo_V_strb_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_read, "(port)ip2psFifo_V_strb_V_read");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_dout, "(port)ip2psFifo_V_last_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_empty_n, "(port)ip2psFifo_V_last_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_read, "(port)ip2psFifo_V_last_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state0, "ap_CS_iter2_fsm_state0");
    sc_trace(mVcdFile, ip2psFifo_V_data_V0_status, "ip2psFifo_V_data_V0_status");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_42_p5, "tmp_nbreadreq_fu_42_p5");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_ack_in, "ip2ps_V_data_V_1_ack_in");
    sc_trace(mVcdFile, tmp_reg_89, "tmp_reg_89");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_ack_in, "ip2ps_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_ack_in, "ip2ps_V_last_V_1_ack_in");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_89, "ap_reg_pp0_iter1_tmp_reg_89");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_data_out, "ip2ps_V_data_V_1_data_out");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_vld_in, "ip2ps_V_data_V_1_vld_in");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_vld_out, "ip2ps_V_data_V_1_vld_out");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_ack_out, "ip2ps_V_data_V_1_ack_out");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_payload_A, "ip2ps_V_data_V_1_payload_A");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_payload_B, "ip2ps_V_data_V_1_payload_B");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_sel_rd, "ip2ps_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_sel_wr, "ip2ps_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_sel, "ip2ps_V_data_V_1_sel");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_load_A, "ip2ps_V_data_V_1_load_A");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_load_B, "ip2ps_V_data_V_1_load_B");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_state, "ip2ps_V_data_V_1_state");
    sc_trace(mVcdFile, ip2ps_V_data_V_1_state_cmp_full, "ip2ps_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_data_out, "ip2ps_V_strb_V_1_data_out");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_vld_in, "ip2ps_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_vld_out, "ip2ps_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_ack_out, "ip2ps_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_payload_A, "ip2ps_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_payload_B, "ip2ps_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_sel_rd, "ip2ps_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_sel_wr, "ip2ps_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_sel, "ip2ps_V_strb_V_1_sel");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_load_A, "ip2ps_V_strb_V_1_load_A");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_load_B, "ip2ps_V_strb_V_1_load_B");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_state, "ip2ps_V_strb_V_1_state");
    sc_trace(mVcdFile, ip2ps_V_strb_V_1_state_cmp_full, "ip2ps_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_data_out, "ip2ps_V_last_V_1_data_out");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_vld_in, "ip2ps_V_last_V_1_vld_in");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_vld_out, "ip2ps_V_last_V_1_vld_out");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_ack_out, "ip2ps_V_last_V_1_ack_out");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_payload_A, "ip2ps_V_last_V_1_payload_A");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_payload_B, "ip2ps_V_last_V_1_payload_B");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_sel_rd, "ip2ps_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_sel_wr, "ip2ps_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_sel, "ip2ps_V_last_V_1_sel");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_load_A, "ip2ps_V_last_V_1_load_A");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_load_B, "ip2ps_V_last_V_1_load_B");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_state, "ip2ps_V_last_V_1_state");
    sc_trace(mVcdFile, ip2ps_V_last_V_1_state_cmp_full, "ip2ps_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, masterOut_TDATA_blk_n, "masterOut_TDATA_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_blk_n, "ip2psFifo_V_data_V_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_blk_n, "ip2psFifo_V_strb_V_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_blk_n, "ip2psFifo_V_last_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_reg_93, "tmp_data_V_reg_93");
    sc_trace(mVcdFile, tmp_strb_V_reg_98, "tmp_strb_V_reg_98");
    sc_trace(mVcdFile, tmp_last_V_reg_103, "tmp_last_V_reg_103");
    sc_trace(mVcdFile, ip2psFifo_V_data_V0_update, "ip2psFifo_V_data_V0_update");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
#endif

    }
}

ip2ps_fifo::~ip2ps_fifo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ip2ps_fifo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_vld_out.read()))) {
            ip2ps_V_data_V_1_sel_rd =  (sc_logic) (~ip2ps_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_ack_in.read()))) {
            ip2ps_V_data_V_1_sel_wr =  (sc_logic) (~ip2ps_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            ip2ps_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            ip2ps_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(ip2ps_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_ack_out.read()))))) {
            ip2ps_V_data_V_1_state = ap_const_lv2_3;
        } else {
            ip2ps_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_vld_out.read()))) {
            ip2ps_V_last_V_1_sel_rd =  (sc_logic) (~ip2ps_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_ack_in.read()))) {
            ip2ps_V_last_V_1_sel_wr =  (sc_logic) (~ip2ps_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, ip2ps_V_last_V_1_state.read())))) {
            ip2ps_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ip2ps_V_last_V_1_state.read())))) {
            ip2ps_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, ip2ps_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ip2ps_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_ack_out.read()))))) {
            ip2ps_V_last_V_1_state = ap_const_lv2_3;
        } else {
            ip2ps_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_vld_out.read()))) {
            ip2ps_V_strb_V_1_sel_rd =  (sc_logic) (~ip2ps_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_ack_in.read()))) {
            ip2ps_V_strb_V_1_sel_wr =  (sc_logic) (~ip2ps_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip2ps_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, ip2ps_V_strb_V_1_state.read())))) {
            ip2ps_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ip2ps_V_strb_V_1_state.read())))) {
            ip2ps_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, ip2ps_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ip2ps_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, ip2ps_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_ack_out.read()))))) {
            ip2ps_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            ip2ps_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ap_reg_pp0_iter1_tmp_reg_89 = tmp_reg_89.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_load_A.read())) {
        ip2ps_V_data_V_1_payload_A = tmp_data_V_reg_93.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_load_B.read())) {
        ip2ps_V_data_V_1_payload_B = tmp_data_V_reg_93.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_load_A.read())) {
        ip2ps_V_last_V_1_payload_A = tmp_last_V_reg_103.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_load_B.read())) {
        ip2ps_V_last_V_1_payload_B = tmp_last_V_reg_103.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_load_A.read())) {
        ip2ps_V_strb_V_1_payload_A = tmp_strb_V_reg_98.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_load_B.read())) {
        ip2ps_V_strb_V_1_payload_B = tmp_strb_V_reg_98.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        tmp_data_V_reg_93 = ip2psFifo_V_data_V_dout.read();
        tmp_last_V_reg_103 = ip2psFifo_V_last_V_dout.read();
        tmp_strb_V_reg_98 = ip2psFifo_V_strb_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        tmp_reg_89 = tmp_nbreadreq_fu_42_p5.read();
    }
}

void ip2ps_fifo::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void ip2ps_fifo::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void ip2ps_fifo::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void ip2ps_fifo::thread_ap_CS_iter2_fsm_state0() {
    ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm.read()[0];
}

void ip2ps_fifo::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void ip2ps_fifo::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void ip2ps_fifo::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_89.read()));
}

void ip2ps_fifo::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ip2ps_fifo::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_reg_89.read()));
}

void ip2ps_fifo::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()));
}

void ip2ps_fifo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void ip2ps_fifo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ip2psFifo_V_data_V0_status() {
    ip2psFifo_V_data_V0_status = (ip2psFifo_V_data_V_empty_n.read() & ip2psFifo_V_strb_V_empty_n.read() & ip2psFifo_V_last_V_empty_n.read());
}

void ip2ps_fifo::thread_ip2psFifo_V_data_V0_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ip2psFifo_V_data_V0_update = ap_const_logic_1;
    } else {
        ip2psFifo_V_data_V0_update = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ip2psFifo_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ip2psFifo_V_data_V_blk_n = ip2psFifo_V_data_V_empty_n.read();
    } else {
        ip2psFifo_V_data_V_blk_n = ap_const_logic_1;
    }
}

void ip2ps_fifo::thread_ip2psFifo_V_data_V_read() {
    ip2psFifo_V_data_V_read = ip2psFifo_V_data_V0_update.read();
}

void ip2ps_fifo::thread_ip2psFifo_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ip2psFifo_V_last_V_blk_n = ip2psFifo_V_last_V_empty_n.read();
    } else {
        ip2psFifo_V_last_V_blk_n = ap_const_logic_1;
    }
}

void ip2ps_fifo::thread_ip2psFifo_V_last_V_read() {
    ip2psFifo_V_last_V_read = ip2psFifo_V_data_V0_update.read();
}

void ip2ps_fifo::thread_ip2psFifo_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ip2psFifo_V_strb_V_blk_n = ip2psFifo_V_strb_V_empty_n.read();
    } else {
        ip2psFifo_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void ip2ps_fifo::thread_ip2psFifo_V_strb_V_read() {
    ip2psFifo_V_strb_V_read = ip2psFifo_V_data_V0_update.read();
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_ack_in() {
    ip2ps_V_data_V_1_ack_in = ip2ps_V_data_V_1_state.read()[1];
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_ack_out() {
    ip2ps_V_data_V_1_ack_out = masterOut_TREADY.read();
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_data_V_1_sel.read())) {
        ip2ps_V_data_V_1_data_out = ip2ps_V_data_V_1_payload_B.read();
    } else {
        ip2ps_V_data_V_1_data_out = ip2ps_V_data_V_1_payload_A.read();
    }
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_load_A() {
    ip2ps_V_data_V_1_load_A = (ip2ps_V_data_V_1_state_cmp_full.read() & ~ip2ps_V_data_V_1_sel_wr.read());
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_load_B() {
    ip2ps_V_data_V_1_load_B = (ip2ps_V_data_V_1_sel_wr.read() & ip2ps_V_data_V_1_state_cmp_full.read());
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_sel() {
    ip2ps_V_data_V_1_sel = ip2ps_V_data_V_1_sel_rd.read();
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_state_cmp_full() {
    ip2ps_V_data_V_1_state_cmp_full =  (sc_logic) ((!ip2ps_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ip2ps_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_89.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ip2ps_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        ip2ps_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ip2ps_V_data_V_1_vld_out() {
    ip2ps_V_data_V_1_vld_out = ip2ps_V_data_V_1_state.read()[0];
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_ack_in() {
    ip2ps_V_last_V_1_ack_in = ip2ps_V_last_V_1_state.read()[1];
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_ack_out() {
    ip2ps_V_last_V_1_ack_out = masterOut_TREADY.read();
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_last_V_1_sel.read())) {
        ip2ps_V_last_V_1_data_out = ip2ps_V_last_V_1_payload_B.read();
    } else {
        ip2ps_V_last_V_1_data_out = ip2ps_V_last_V_1_payload_A.read();
    }
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_load_A() {
    ip2ps_V_last_V_1_load_A = (ip2ps_V_last_V_1_state_cmp_full.read() & ~ip2ps_V_last_V_1_sel_wr.read());
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_load_B() {
    ip2ps_V_last_V_1_load_B = (ip2ps_V_last_V_1_sel_wr.read() & ip2ps_V_last_V_1_state_cmp_full.read());
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_sel() {
    ip2ps_V_last_V_1_sel = ip2ps_V_last_V_1_sel_rd.read();
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_state_cmp_full() {
    ip2ps_V_last_V_1_state_cmp_full =  (sc_logic) ((!ip2ps_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ip2ps_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_89.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ip2ps_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        ip2ps_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ip2ps_V_last_V_1_vld_out() {
    ip2ps_V_last_V_1_vld_out = ip2ps_V_last_V_1_state.read()[0];
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_ack_in() {
    ip2ps_V_strb_V_1_ack_in = ip2ps_V_strb_V_1_state.read()[1];
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_ack_out() {
    ip2ps_V_strb_V_1_ack_out = masterOut_TREADY.read();
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ip2ps_V_strb_V_1_sel.read())) {
        ip2ps_V_strb_V_1_data_out = ip2ps_V_strb_V_1_payload_B.read();
    } else {
        ip2ps_V_strb_V_1_data_out = ip2ps_V_strb_V_1_payload_A.read();
    }
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_load_A() {
    ip2ps_V_strb_V_1_load_A = (ip2ps_V_strb_V_1_state_cmp_full.read() & ~ip2ps_V_strb_V_1_sel_wr.read());
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_load_B() {
    ip2ps_V_strb_V_1_load_B = (ip2ps_V_strb_V_1_sel_wr.read() & ip2ps_V_strb_V_1_state_cmp_full.read());
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_sel() {
    ip2ps_V_strb_V_1_sel = ip2ps_V_strb_V_1_sel_rd.read();
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_state_cmp_full() {
    ip2ps_V_strb_V_1_state_cmp_full =  (sc_logic) ((!ip2ps_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ip2ps_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_89.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ip2ps_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        ip2ps_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void ip2ps_fifo::thread_ip2ps_V_strb_V_1_vld_out() {
    ip2ps_V_strb_V_1_vld_out = ip2ps_V_strb_V_1_state.read()[0];
}

void ip2ps_fifo::thread_masterOut_TDATA() {
    masterOut_TDATA = ip2ps_V_data_V_1_data_out.read();
}

void ip2ps_fifo::thread_masterOut_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_89.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_reg_89.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read())))) {
        masterOut_TDATA_blk_n = ip2ps_V_data_V_1_state.read()[1];
    } else {
        masterOut_TDATA_blk_n = ap_const_logic_1;
    }
}

void ip2ps_fifo::thread_masterOut_TLAST() {
    masterOut_TLAST = ip2ps_V_last_V_1_data_out.read();
}

void ip2ps_fifo::thread_masterOut_TSTRB() {
    masterOut_TSTRB = ip2ps_V_strb_V_1_data_out.read();
}

void ip2ps_fifo::thread_masterOut_TVALID() {
    masterOut_TVALID = ip2ps_V_last_V_1_state.read()[0];
}

void ip2ps_fifo::thread_tmp_nbreadreq_fu_42_p5() {
    tmp_nbreadreq_fu_42_p5 =  (sc_lv<1>) ((ip2psFifo_V_data_V_empty_n.read() & ip2psFifo_V_strb_V_empty_n.read() & ip2psFifo_V_last_V_empty_n.read()));
}

void ip2ps_fifo::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm = "X";
            break;
    }
}

void ip2ps_fifo::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
     esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || 
    esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_42_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void ip2ps_fifo::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
  esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_0)))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ip2ps_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

