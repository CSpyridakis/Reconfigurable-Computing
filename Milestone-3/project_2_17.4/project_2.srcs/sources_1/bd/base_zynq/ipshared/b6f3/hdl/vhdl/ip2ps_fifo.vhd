-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip2ps_fifo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    masterOut_TREADY : IN STD_LOGIC;
    masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    masterOut_TVALID : OUT STD_LOGIC;
    masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ip2psFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ip2psFifo_V_data_V_empty_n : IN STD_LOGIC;
    ip2psFifo_V_data_V_read : OUT STD_LOGIC;
    ip2psFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    ip2psFifo_V_strb_V_empty_n : IN STD_LOGIC;
    ip2psFifo_V_strb_V_read : OUT STD_LOGIC;
    ip2psFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    ip2psFifo_V_last_V_empty_n : IN STD_LOGIC;
    ip2psFifo_V_last_V_read : OUT STD_LOGIC );
end;


architecture behav of ip2ps_fifo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter2_fsm_state3 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_iter2_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_CS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter2_fsm_state0 : STD_LOGIC;
    signal ip2psFifo_V_data_V0_status : STD_LOGIC;
    signal tmp_nbreadreq_fu_42_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ip2ps_V_data_V_1_ack_in : STD_LOGIC;
    signal tmp_reg_89 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ip2ps_V_strb_V_1_ack_in : STD_LOGIC;
    signal ip2ps_V_last_V_1_ack_in : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_reg_89 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_CS_iter2_fsm_state3 : STD_LOGIC;
    signal ip2ps_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_V_data_V_1_vld_in : STD_LOGIC;
    signal ip2ps_V_data_V_1_vld_out : STD_LOGIC;
    signal ip2ps_V_data_V_1_ack_out : STD_LOGIC;
    signal ip2ps_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal ip2ps_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal ip2ps_V_data_V_1_sel : STD_LOGIC;
    signal ip2ps_V_data_V_1_load_A : STD_LOGIC;
    signal ip2ps_V_data_V_1_load_B : STD_LOGIC;
    signal ip2ps_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ip2ps_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal ip2ps_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_V_strb_V_1_vld_in : STD_LOGIC;
    signal ip2ps_V_strb_V_1_vld_out : STD_LOGIC;
    signal ip2ps_V_strb_V_1_ack_out : STD_LOGIC;
    signal ip2ps_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal ip2ps_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal ip2ps_V_strb_V_1_sel : STD_LOGIC;
    signal ip2ps_V_strb_V_1_load_A : STD_LOGIC;
    signal ip2ps_V_strb_V_1_load_B : STD_LOGIC;
    signal ip2ps_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ip2ps_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal ip2ps_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_V_last_V_1_vld_in : STD_LOGIC;
    signal ip2ps_V_last_V_1_vld_out : STD_LOGIC;
    signal ip2ps_V_last_V_1_ack_out : STD_LOGIC;
    signal ip2ps_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal ip2ps_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal ip2ps_V_last_V_1_sel : STD_LOGIC;
    signal ip2ps_V_last_V_1_load_A : STD_LOGIC;
    signal ip2ps_V_last_V_1_load_B : STD_LOGIC;
    signal ip2ps_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ip2ps_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal masterOut_TDATA_blk_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_blk_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_blk_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_strb_V_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2psFifo_V_data_V0_update : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter2_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
            else
                ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ip2ps_V_data_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        ip2ps_V_data_V_1_sel_rd <= not(ip2ps_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ip2ps_V_data_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_data_V_1_ack_in = ap_const_logic_1))) then 
                                        ip2ps_V_data_V_1_sel_wr <= not(ip2ps_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ip2ps_V_data_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_data_V_1_state = ap_const_lv2_2)) or ((ip2ps_V_data_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_data_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_data_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ip2ps_V_data_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_data_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_data_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_data_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_data_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ip2ps_V_data_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_data_V_1_ack_out = ap_const_logic_1))) and not(((ip2ps_V_data_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_data_V_1_vld_in = ap_const_logic_1))) and (ip2ps_V_data_V_1_state = ap_const_lv2_3)) or ((ip2ps_V_data_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_data_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_data_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_data_V_1_state = ap_const_lv2_2)))) then 
                    ip2ps_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    ip2ps_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ip2ps_V_last_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        ip2ps_V_last_V_1_sel_rd <= not(ip2ps_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ip2ps_V_last_V_1_ack_in = ap_const_logic_1) and (ip2ps_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        ip2ps_V_last_V_1_sel_wr <= not(ip2ps_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ip2ps_V_last_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_last_V_1_state = ap_const_lv2_2)) or ((ip2ps_V_last_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_last_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_last_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ip2ps_V_last_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_last_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_last_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_last_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_last_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ip2ps_V_last_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_last_V_1_ack_out = ap_const_logic_1))) and not(((ip2ps_V_last_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_last_V_1_vld_in = ap_const_logic_1))) and (ip2ps_V_last_V_1_state = ap_const_lv2_3)) or ((ip2ps_V_last_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_last_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_last_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_last_V_1_state = ap_const_lv2_2)))) then 
                    ip2ps_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    ip2ps_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ip2ps_V_strb_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        ip2ps_V_strb_V_1_sel_rd <= not(ip2ps_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ip2ps_V_strb_V_1_ack_in = ap_const_logic_1) and (ip2ps_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        ip2ps_V_strb_V_1_sel_wr <= not(ip2ps_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ip2ps_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip2ps_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ip2ps_V_strb_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_strb_V_1_state = ap_const_lv2_2)) or ((ip2ps_V_strb_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_strb_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ip2ps_V_strb_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_strb_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_strb_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_strb_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    ip2ps_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ip2ps_V_strb_V_1_vld_in = ap_const_logic_0) and (ip2ps_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((ip2ps_V_strb_V_1_ack_out = ap_const_logic_0) and (ip2ps_V_strb_V_1_vld_in = ap_const_logic_1))) and (ip2ps_V_strb_V_1_state = ap_const_lv2_3)) or ((ip2ps_V_strb_V_1_ack_out = ap_const_logic_1) and (ip2ps_V_strb_V_1_state = ap_const_lv2_1)) or ((ip2ps_V_strb_V_1_vld_in = ap_const_logic_1) and (ip2ps_V_strb_V_1_state = ap_const_lv2_2)))) then 
                    ip2ps_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    ip2ps_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                ap_reg_pp0_iter1_tmp_reg_89 <= tmp_reg_89;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_data_V_1_load_A = ap_const_logic_1)) then
                ip2ps_V_data_V_1_payload_A <= tmp_data_V_reg_93;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_data_V_1_load_B = ap_const_logic_1)) then
                ip2ps_V_data_V_1_payload_B <= tmp_data_V_reg_93;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_last_V_1_load_A = ap_const_logic_1)) then
                ip2ps_V_last_V_1_payload_A <= tmp_last_V_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_last_V_1_load_B = ap_const_logic_1)) then
                ip2ps_V_last_V_1_payload_B <= tmp_last_V_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_strb_V_1_load_A = ap_const_logic_1)) then
                ip2ps_V_strb_V_1_payload_A <= tmp_strb_V_reg_98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ip2ps_V_strb_V_1_load_B = ap_const_logic_1)) then
                ip2ps_V_strb_V_1_payload_B <= tmp_strb_V_reg_98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                tmp_data_V_reg_93 <= ip2psFifo_V_data_V_dout;
                tmp_last_V_reg_103 <= ip2psFifo_V_last_V_dout;
                tmp_strb_V_reg_98 <= ip2psFifo_V_strb_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                tmp_reg_89 <= tmp_nbreadreq_fu_42_p5;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_iter0_fsm, ip2psFifo_V_data_V0_status, tmp_nbreadreq_fu_42_p5, ip2ps_V_data_V_1_ack_in, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, ip2psFifo_V_data_V0_status, tmp_nbreadreq_fu_42_p5, ip2ps_V_data_V_1_ack_in, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1))))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;

    ap_NS_iter2_fsm_assign_proc : process (ap_done_reg, ap_CS_iter2_fsm, ip2ps_V_data_V_1_ack_in, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        case ap_CS_iter2_fsm is
            when ap_ST_iter2_fsm_state3 => 
                if ((not(((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                elsif ((not(((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_done_reg = ap_const_logic_1))) and ((ap_const_logic_0 = ap_CS_iter1_fsm_state2) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io))))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                end if;
            when ap_ST_iter2_fsm_state0 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter2_fsm <= "XX";
        end case;
    end process;
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);
    ap_CS_iter2_fsm_state0 <= ap_CS_iter2_fsm(0);
    ap_CS_iter2_fsm_state3 <= ap_CS_iter2_fsm(1);

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, ip2psFifo_V_data_V0_status, tmp_nbreadreq_fu_42_p5)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)));
    end process;


    ap_block_state2_io_assign_proc : process(ip2ps_V_data_V_1_ack_in, tmp_reg_89)
    begin
                ap_block_state2_io <= ((ip2ps_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_reg_89 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(ip2ps_V_data_V_1_ack_in, ap_reg_pp0_iter1_tmp_reg_89)
    begin
                ap_block_state3_io <= ((ip2ps_V_data_V_1_ack_in = ap_const_logic_0) and (ap_reg_pp0_iter1_tmp_reg_89 = ap_const_lv1_1));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(ip2ps_V_data_V_1_ack_in, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ip2ps_V_data_V_1_ack_in, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_CS_iter2_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, ip2psFifo_V_data_V0_status, tmp_nbreadreq_fu_42_p5, ip2ps_V_data_V_1_ack_in, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ip2psFifo_V_data_V0_status <= (ip2psFifo_V_strb_V_empty_n and ip2psFifo_V_last_V_empty_n and ip2psFifo_V_data_V_empty_n);

    ip2psFifo_V_data_V0_update_assign_proc : process(ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, ip2psFifo_V_data_V0_status, tmp_nbreadreq_fu_42_p5, ip2ps_V_data_V_1_ack_in, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ip2psFifo_V_data_V0_status = ap_const_logic_0) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1)))) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ip2psFifo_V_data_V0_update <= ap_const_logic_1;
        else 
            ip2psFifo_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    ip2psFifo_V_data_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_42_p5, ip2psFifo_V_data_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ip2psFifo_V_data_V_blk_n <= ip2psFifo_V_data_V_empty_n;
        else 
            ip2psFifo_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_data_V_read <= ip2psFifo_V_data_V0_update;

    ip2psFifo_V_last_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_42_p5, ip2psFifo_V_last_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ip2psFifo_V_last_V_blk_n <= ip2psFifo_V_last_V_empty_n;
        else 
            ip2psFifo_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_last_V_read <= ip2psFifo_V_data_V0_update;

    ip2psFifo_V_strb_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_42_p5, ip2psFifo_V_strb_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_42_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ip2psFifo_V_strb_V_blk_n <= ip2psFifo_V_strb_V_empty_n;
        else 
            ip2psFifo_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_strb_V_read <= ip2psFifo_V_data_V0_update;
    ip2ps_V_data_V_1_ack_in <= ip2ps_V_data_V_1_state(1);
    ip2ps_V_data_V_1_ack_out <= masterOut_TREADY;

    ip2ps_V_data_V_1_data_out_assign_proc : process(ip2ps_V_data_V_1_payload_A, ip2ps_V_data_V_1_payload_B, ip2ps_V_data_V_1_sel)
    begin
        if ((ip2ps_V_data_V_1_sel = ap_const_logic_1)) then 
            ip2ps_V_data_V_1_data_out <= ip2ps_V_data_V_1_payload_B;
        else 
            ip2ps_V_data_V_1_data_out <= ip2ps_V_data_V_1_payload_A;
        end if; 
    end process;

    ip2ps_V_data_V_1_load_A <= (ip2ps_V_data_V_1_state_cmp_full and not(ip2ps_V_data_V_1_sel_wr));
    ip2ps_V_data_V_1_load_B <= (ip2ps_V_data_V_1_state_cmp_full and ip2ps_V_data_V_1_sel_wr);
    ip2ps_V_data_V_1_sel <= ip2ps_V_data_V_1_sel_rd;
    ip2ps_V_data_V_1_state_cmp_full <= '0' when (ip2ps_V_data_V_1_state = ap_const_lv2_1) else '1';

    ip2ps_V_data_V_1_vld_in_assign_proc : process(ap_done_reg, ip2ps_V_data_V_1_ack_in, tmp_reg_89, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (tmp_reg_89 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2ps_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            ip2ps_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ip2ps_V_data_V_1_vld_out <= ip2ps_V_data_V_1_state(0);
    ip2ps_V_last_V_1_ack_in <= ip2ps_V_last_V_1_state(1);
    ip2ps_V_last_V_1_ack_out <= masterOut_TREADY;

    ip2ps_V_last_V_1_data_out_assign_proc : process(ip2ps_V_last_V_1_payload_A, ip2ps_V_last_V_1_payload_B, ip2ps_V_last_V_1_sel)
    begin
        if ((ip2ps_V_last_V_1_sel = ap_const_logic_1)) then 
            ip2ps_V_last_V_1_data_out <= ip2ps_V_last_V_1_payload_B;
        else 
            ip2ps_V_last_V_1_data_out <= ip2ps_V_last_V_1_payload_A;
        end if; 
    end process;

    ip2ps_V_last_V_1_load_A <= (ip2ps_V_last_V_1_state_cmp_full and not(ip2ps_V_last_V_1_sel_wr));
    ip2ps_V_last_V_1_load_B <= (ip2ps_V_last_V_1_state_cmp_full and ip2ps_V_last_V_1_sel_wr);
    ip2ps_V_last_V_1_sel <= ip2ps_V_last_V_1_sel_rd;
    ip2ps_V_last_V_1_state_cmp_full <= '0' when (ip2ps_V_last_V_1_state = ap_const_lv2_1) else '1';

    ip2ps_V_last_V_1_vld_in_assign_proc : process(ap_done_reg, ip2ps_V_data_V_1_ack_in, tmp_reg_89, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (tmp_reg_89 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2ps_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            ip2ps_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ip2ps_V_last_V_1_vld_out <= ip2ps_V_last_V_1_state(0);
    ip2ps_V_strb_V_1_ack_in <= ip2ps_V_strb_V_1_state(1);
    ip2ps_V_strb_V_1_ack_out <= masterOut_TREADY;

    ip2ps_V_strb_V_1_data_out_assign_proc : process(ip2ps_V_strb_V_1_payload_A, ip2ps_V_strb_V_1_payload_B, ip2ps_V_strb_V_1_sel)
    begin
        if ((ip2ps_V_strb_V_1_sel = ap_const_logic_1)) then 
            ip2ps_V_strb_V_1_data_out <= ip2ps_V_strb_V_1_payload_B;
        else 
            ip2ps_V_strb_V_1_data_out <= ip2ps_V_strb_V_1_payload_A;
        end if; 
    end process;

    ip2ps_V_strb_V_1_load_A <= (ip2ps_V_strb_V_1_state_cmp_full and not(ip2ps_V_strb_V_1_sel_wr));
    ip2ps_V_strb_V_1_load_B <= (ip2ps_V_strb_V_1_state_cmp_full and ip2ps_V_strb_V_1_sel_wr);
    ip2ps_V_strb_V_1_sel <= ip2ps_V_strb_V_1_sel_rd;
    ip2ps_V_strb_V_1_state_cmp_full <= '0' when (ip2ps_V_strb_V_1_state = ap_const_lv2_1) else '1';

    ip2ps_V_strb_V_1_vld_in_assign_proc : process(ap_done_reg, ip2ps_V_data_V_1_ack_in, tmp_reg_89, ap_block_state2_io, ap_CS_iter1_fsm_state2, ip2ps_V_strb_V_1_ack_in, ip2ps_V_last_V_1_ack_in, ap_block_state3_io, ap_CS_iter2_fsm_state3)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ip2ps_V_last_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_strb_V_1_ack_in = ap_const_logic_0) or (ip2ps_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))))) and (tmp_reg_89 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2ps_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            ip2ps_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ip2ps_V_strb_V_1_vld_out <= ip2ps_V_strb_V_1_state(0);
    masterOut_TDATA <= ip2ps_V_data_V_1_data_out;

    masterOut_TDATA_blk_n_assign_proc : process(tmp_reg_89, ap_CS_iter1_fsm_state2, ap_reg_pp0_iter1_tmp_reg_89, ap_CS_iter2_fsm_state3, ip2ps_V_data_V_1_state)
    begin
        if ((((ap_reg_pp0_iter1_tmp_reg_89 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3)) or ((tmp_reg_89 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)))) then 
            masterOut_TDATA_blk_n <= ip2ps_V_data_V_1_state(1);
        else 
            masterOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    masterOut_TLAST <= ip2ps_V_last_V_1_data_out;
    masterOut_TSTRB <= ip2ps_V_strb_V_1_data_out;
    masterOut_TVALID <= ip2ps_V_last_V_1_state(0);
    tmp_nbreadreq_fu_42_p5 <= (0=>(ip2psFifo_V_strb_V_empty_n and ip2psFifo_V_last_V_empty_n and ip2psFifo_V_data_V_empty_n), others=>'-');
end behav;
