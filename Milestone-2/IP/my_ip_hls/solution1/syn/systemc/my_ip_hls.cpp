// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "my_ip_hls.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int my_ip_hls::C_S_AXI_DATA_WIDTH = "100000";
const int my_ip_hls::C_S_AXI_WSTRB_WIDTH = "100";
const int my_ip_hls::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic my_ip_hls::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> my_ip_hls::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> my_ip_hls::ap_const_lv4_0 = "0000";
const sc_lv<1> my_ip_hls::ap_const_lv1_0 = "0";
const sc_logic my_ip_hls::ap_const_logic_0 = sc_dt::Log_0;
const bool my_ip_hls::ap_const_boolean_1 = true;

my_ip_hls::my_ip_hls(sc_module_name name) : sc_module(name), mVcdFile(0) {
    my_ip_hls_psAxiLite_s_axi_U = new my_ip_hls_psAxiLite_s_axi<C_S_AXI_PSAXILITE_ADDR_WIDTH,C_S_AXI_PSAXILITE_DATA_WIDTH>("my_ip_hls_psAxiLite_s_axi_U");
    my_ip_hls_psAxiLite_s_axi_U->AWVALID(s_axi_psAxiLite_AWVALID);
    my_ip_hls_psAxiLite_s_axi_U->AWREADY(s_axi_psAxiLite_AWREADY);
    my_ip_hls_psAxiLite_s_axi_U->AWADDR(s_axi_psAxiLite_AWADDR);
    my_ip_hls_psAxiLite_s_axi_U->WVALID(s_axi_psAxiLite_WVALID);
    my_ip_hls_psAxiLite_s_axi_U->WREADY(s_axi_psAxiLite_WREADY);
    my_ip_hls_psAxiLite_s_axi_U->WDATA(s_axi_psAxiLite_WDATA);
    my_ip_hls_psAxiLite_s_axi_U->WSTRB(s_axi_psAxiLite_WSTRB);
    my_ip_hls_psAxiLite_s_axi_U->ARVALID(s_axi_psAxiLite_ARVALID);
    my_ip_hls_psAxiLite_s_axi_U->ARREADY(s_axi_psAxiLite_ARREADY);
    my_ip_hls_psAxiLite_s_axi_U->ARADDR(s_axi_psAxiLite_ARADDR);
    my_ip_hls_psAxiLite_s_axi_U->RVALID(s_axi_psAxiLite_RVALID);
    my_ip_hls_psAxiLite_s_axi_U->RREADY(s_axi_psAxiLite_RREADY);
    my_ip_hls_psAxiLite_s_axi_U->RDATA(s_axi_psAxiLite_RDATA);
    my_ip_hls_psAxiLite_s_axi_U->RRESP(s_axi_psAxiLite_RRESP);
    my_ip_hls_psAxiLite_s_axi_U->BVALID(s_axi_psAxiLite_BVALID);
    my_ip_hls_psAxiLite_s_axi_U->BREADY(s_axi_psAxiLite_BREADY);
    my_ip_hls_psAxiLite_s_axi_U->BRESP(s_axi_psAxiLite_BRESP);
    my_ip_hls_psAxiLite_s_axi_U->ACLK(ap_clk);
    my_ip_hls_psAxiLite_s_axi_U->ARESET(ap_rst_n_inv);
    my_ip_hls_psAxiLite_s_axi_U->ACLK_EN(ap_var_for_const0);
    my_ip_hls_psAxiLite_s_axi_U->rule0_V(rule0_V);
    my_ip_hls_psAxiLite_s_axi_U->rule1_V(rule1_V);
    my_ip_hls_psAxiLite_s_axi_U->rule2_V(rule2_V);
    my_ip_hls_psAxiLite_s_axi_U->rule0cnt_V(counters_out_U0_rule0cnt_V);
    my_ip_hls_psAxiLite_s_axi_U->rule0cnt_V_ap_vld(counters_out_U0_rule0cnt_V_ap_vld);
    my_ip_hls_psAxiLite_s_axi_U->rule1cnt_V(counters_out_U0_rule1cnt_V);
    my_ip_hls_psAxiLite_s_axi_U->rule1cnt_V_ap_vld(counters_out_U0_rule1cnt_V_ap_vld);
    my_ip_hls_psAxiLite_s_axi_U->rule2cnt_V(counters_out_U0_rule2cnt_V);
    my_ip_hls_psAxiLite_s_axi_U->rule2cnt_V_ap_vld(counters_out_U0_rule2cnt_V_ap_vld);
    my_ip_hls_entry3_U0 = new my_ip_hls_entry3("my_ip_hls_entry3_U0");
    my_ip_hls_entry3_U0->ap_clk(ap_clk);
    my_ip_hls_entry3_U0->ap_rst(ap_rst_n_inv);
    my_ip_hls_entry3_U0->ap_start(my_ip_hls_entry3_U0_ap_start);
    my_ip_hls_entry3_U0->start_full_n(start_for_my_ip_hls_entry83_U0_full_n);
    my_ip_hls_entry3_U0->ap_done(my_ip_hls_entry3_U0_ap_done);
    my_ip_hls_entry3_U0->ap_continue(my_ip_hls_entry3_U0_ap_continue);
    my_ip_hls_entry3_U0->ap_idle(my_ip_hls_entry3_U0_ap_idle);
    my_ip_hls_entry3_U0->ap_ready(my_ip_hls_entry3_U0_ap_ready);
    my_ip_hls_entry3_U0->start_out(my_ip_hls_entry3_U0_start_out);
    my_ip_hls_entry3_U0->start_write(my_ip_hls_entry3_U0_start_write);
    my_ip_hls_entry3_U0->rule0_V(rule0_V);
    my_ip_hls_entry3_U0->rule1_V(rule1_V);
    my_ip_hls_entry3_U0->rule2_V(rule2_V);
    my_ip_hls_entry3_U0->rule0_V_out_din(my_ip_hls_entry3_U0_rule0_V_out_din);
    my_ip_hls_entry3_U0->rule0_V_out_full_n(rule0_V_c1_full_n);
    my_ip_hls_entry3_U0->rule0_V_out_write(my_ip_hls_entry3_U0_rule0_V_out_write);
    my_ip_hls_entry3_U0->rule1_V_out_din(my_ip_hls_entry3_U0_rule1_V_out_din);
    my_ip_hls_entry3_U0->rule1_V_out_full_n(rule1_V_c2_full_n);
    my_ip_hls_entry3_U0->rule1_V_out_write(my_ip_hls_entry3_U0_rule1_V_out_write);
    my_ip_hls_entry3_U0->rule2_V_out_din(my_ip_hls_entry3_U0_rule2_V_out_din);
    my_ip_hls_entry3_U0->rule2_V_out_full_n(rule2_V_c3_full_n);
    my_ip_hls_entry3_U0->rule2_V_out_write(my_ip_hls_entry3_U0_rule2_V_out_write);
    my_ip_hls_entry83_U0 = new my_ip_hls_entry83("my_ip_hls_entry83_U0");
    my_ip_hls_entry83_U0->ap_clk(ap_clk);
    my_ip_hls_entry83_U0->ap_rst(ap_rst_n_inv);
    my_ip_hls_entry83_U0->ap_start(my_ip_hls_entry83_U0_ap_start);
    my_ip_hls_entry83_U0->start_full_n(start_for_rules_in_U0_full_n);
    my_ip_hls_entry83_U0->ap_done(my_ip_hls_entry83_U0_ap_done);
    my_ip_hls_entry83_U0->ap_continue(my_ip_hls_entry83_U0_ap_continue);
    my_ip_hls_entry83_U0->ap_idle(my_ip_hls_entry83_U0_ap_idle);
    my_ip_hls_entry83_U0->ap_ready(my_ip_hls_entry83_U0_ap_ready);
    my_ip_hls_entry83_U0->start_out(my_ip_hls_entry83_U0_start_out);
    my_ip_hls_entry83_U0->start_write(my_ip_hls_entry83_U0_start_write);
    my_ip_hls_entry83_U0->rule0_V_dout(rule0_V_c1_dout);
    my_ip_hls_entry83_U0->rule0_V_empty_n(rule0_V_c1_empty_n);
    my_ip_hls_entry83_U0->rule0_V_read(my_ip_hls_entry83_U0_rule0_V_read);
    my_ip_hls_entry83_U0->rule1_V_dout(rule1_V_c2_dout);
    my_ip_hls_entry83_U0->rule1_V_empty_n(rule1_V_c2_empty_n);
    my_ip_hls_entry83_U0->rule1_V_read(my_ip_hls_entry83_U0_rule1_V_read);
    my_ip_hls_entry83_U0->rule2_V_dout(rule2_V_c3_dout);
    my_ip_hls_entry83_U0->rule2_V_empty_n(rule2_V_c3_empty_n);
    my_ip_hls_entry83_U0->rule2_V_read(my_ip_hls_entry83_U0_rule2_V_read);
    my_ip_hls_entry83_U0->rule0_V_out_din(my_ip_hls_entry83_U0_rule0_V_out_din);
    my_ip_hls_entry83_U0->rule0_V_out_full_n(rule0_V_c_full_n);
    my_ip_hls_entry83_U0->rule0_V_out_write(my_ip_hls_entry83_U0_rule0_V_out_write);
    my_ip_hls_entry83_U0->rule1_V_out_din(my_ip_hls_entry83_U0_rule1_V_out_din);
    my_ip_hls_entry83_U0->rule1_V_out_full_n(rule1_V_c_full_n);
    my_ip_hls_entry83_U0->rule1_V_out_write(my_ip_hls_entry83_U0_rule1_V_out_write);
    my_ip_hls_entry83_U0->rule2_V_out_din(my_ip_hls_entry83_U0_rule2_V_out_din);
    my_ip_hls_entry83_U0->rule2_V_out_full_n(rule2_V_c_full_n);
    my_ip_hls_entry83_U0->rule2_V_out_write(my_ip_hls_entry83_U0_rule2_V_out_write);
    rules_in_U0 = new rules_in("rules_in_U0");
    rules_in_U0->ap_clk(ap_clk);
    rules_in_U0->ap_rst(ap_rst_n_inv);
    rules_in_U0->ap_start(rules_in_U0_ap_start);
    rules_in_U0->ap_done(rules_in_U0_ap_done);
    rules_in_U0->ap_continue(rules_in_U0_ap_continue);
    rules_in_U0->ap_idle(rules_in_U0_ap_idle);
    rules_in_U0->ap_ready(rules_in_U0_ap_ready);
    rules_in_U0->rule0_V_dout(rule0_V_c_dout);
    rules_in_U0->rule0_V_empty_n(rule0_V_c_empty_n);
    rules_in_U0->rule0_V_read(rules_in_U0_rule0_V_read);
    rules_in_U0->rule1_V_dout(rule1_V_c_dout);
    rules_in_U0->rule1_V_empty_n(rule1_V_c_empty_n);
    rules_in_U0->rule1_V_read(rules_in_U0_rule1_V_read);
    rules_in_U0->rule2_V_dout(rule2_V_c_dout);
    rules_in_U0->rule2_V_empty_n(rule2_V_c_empty_n);
    rules_in_U0->rule2_V_read(rules_in_U0_rule2_V_read);
    rules_in_U0->ap_return_0(rules_in_U0_ap_return_0);
    rules_in_U0->ap_return_1(rules_in_U0_ap_return_1);
    rules_in_U0->ap_return_2(rules_in_U0_ap_return_2);
    ps2ip_fifo_U0 = new ps2ip_fifo("ps2ip_fifo_U0");
    ps2ip_fifo_U0->ap_clk(ap_clk);
    ps2ip_fifo_U0->ap_rst(ap_rst_n_inv);
    ps2ip_fifo_U0->ap_start(ps2ip_fifo_U0_ap_start);
    ps2ip_fifo_U0->ap_done(ps2ip_fifo_U0_ap_done);
    ps2ip_fifo_U0->ap_continue(ps2ip_fifo_U0_ap_continue);
    ps2ip_fifo_U0->ap_idle(ps2ip_fifo_U0_ap_idle);
    ps2ip_fifo_U0->ap_ready(ps2ip_fifo_U0_ap_ready);
    ps2ip_fifo_U0->slaveIn_TVALID(slaveIn_TVALID);
    ps2ip_fifo_U0->slaveIn_TDATA(slaveIn_TDATA);
    ps2ip_fifo_U0->slaveIn_TREADY(ps2ip_fifo_U0_slaveIn_TREADY);
    ps2ip_fifo_U0->slaveIn_TSTRB(slaveIn_TSTRB);
    ps2ip_fifo_U0->slaveIn_TLAST(slaveIn_TLAST);
    ps2ip_fifo_U0->ps2ipFifo_V_data_V_din(ps2ip_fifo_U0_ps2ipFifo_V_data_V_din);
    ps2ip_fifo_U0->ps2ipFifo_V_data_V_full_n(ps2ipFifo_V_data_V_full_n);
    ps2ip_fifo_U0->ps2ipFifo_V_data_V_write(ps2ip_fifo_U0_ps2ipFifo_V_data_V_write);
    ps2ip_fifo_U0->ps2ipFifo_V_strb_V_din(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din);
    ps2ip_fifo_U0->ps2ipFifo_V_strb_V_full_n(ps2ipFifo_V_strb_V_full_n);
    ps2ip_fifo_U0->ps2ipFifo_V_strb_V_write(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write);
    ps2ip_fifo_U0->ps2ipFifo_V_last_V_din(ps2ip_fifo_U0_ps2ipFifo_V_last_V_din);
    ps2ip_fifo_U0->ps2ipFifo_V_last_V_full_n(ps2ipFifo_V_last_V_full_n);
    ps2ip_fifo_U0->ps2ipFifo_V_last_V_write(ps2ip_fifo_U0_ps2ipFifo_V_last_V_write);
    core_U0 = new core("core_U0");
    core_U0->ap_clk(ap_clk);
    core_U0->ap_rst(ap_rst_n_inv);
    core_U0->ap_start(core_U0_ap_start);
    core_U0->start_full_n(start_for_ip2ps_fifo_U0_full_n);
    core_U0->ap_done(core_U0_ap_done);
    core_U0->ap_continue(core_U0_ap_continue);
    core_U0->ap_idle(core_U0_ap_idle);
    core_U0->ap_ready(core_U0_ap_ready);
    core_U0->start_out(core_U0_start_out);
    core_U0->start_write(core_U0_start_write);
    core_U0->p_read(rule0Reg_V_channel_dout);
    core_U0->p_read1(rule1Reg_V_channel_dout);
    core_U0->p_read2(rule2Reg_V_channel_dout);
    core_U0->ps2ipFifo_V_data_V_dout(ps2ipFifo_V_data_V_dout);
    core_U0->ps2ipFifo_V_data_V_empty_n(ps2ipFifo_V_data_V_empty_n);
    core_U0->ps2ipFifo_V_data_V_read(core_U0_ps2ipFifo_V_data_V_read);
    core_U0->ps2ipFifo_V_strb_V_dout(ps2ipFifo_V_strb_V_dout);
    core_U0->ps2ipFifo_V_strb_V_empty_n(ps2ipFifo_V_strb_V_empty_n);
    core_U0->ps2ipFifo_V_strb_V_read(core_U0_ps2ipFifo_V_strb_V_read);
    core_U0->ps2ipFifo_V_last_V_dout(ps2ipFifo_V_last_V_dout);
    core_U0->ps2ipFifo_V_last_V_empty_n(ps2ipFifo_V_last_V_empty_n);
    core_U0->ps2ipFifo_V_last_V_read(core_U0_ps2ipFifo_V_last_V_read);
    core_U0->ip2psFifo_V_data_V_din(core_U0_ip2psFifo_V_data_V_din);
    core_U0->ip2psFifo_V_data_V_full_n(ip2psFifo_V_data_V_full_n);
    core_U0->ip2psFifo_V_data_V_write(core_U0_ip2psFifo_V_data_V_write);
    core_U0->ip2psFifo_V_strb_V_din(core_U0_ip2psFifo_V_strb_V_din);
    core_U0->ip2psFifo_V_strb_V_full_n(ip2psFifo_V_strb_V_full_n);
    core_U0->ip2psFifo_V_strb_V_write(core_U0_ip2psFifo_V_strb_V_write);
    core_U0->ip2psFifo_V_last_V_din(core_U0_ip2psFifo_V_last_V_din);
    core_U0->ip2psFifo_V_last_V_full_n(ip2psFifo_V_last_V_full_n);
    core_U0->ip2psFifo_V_last_V_write(core_U0_ip2psFifo_V_last_V_write);
    core_U0->ap_return_0(core_U0_ap_return_0);
    core_U0->ap_return_1(core_U0_ap_return_1);
    core_U0->ap_return_2(core_U0_ap_return_2);
    ip2ps_fifo_U0 = new ip2ps_fifo("ip2ps_fifo_U0");
    ip2ps_fifo_U0->ap_clk(ap_clk);
    ip2ps_fifo_U0->ap_rst(ap_rst_n_inv);
    ip2ps_fifo_U0->ap_start(ip2ps_fifo_U0_ap_start);
    ip2ps_fifo_U0->ap_done(ip2ps_fifo_U0_ap_done);
    ip2ps_fifo_U0->ap_continue(ip2ps_fifo_U0_ap_continue);
    ip2ps_fifo_U0->ap_idle(ip2ps_fifo_U0_ap_idle);
    ip2ps_fifo_U0->ap_ready(ip2ps_fifo_U0_ap_ready);
    ip2ps_fifo_U0->masterOut_TREADY(masterOut_TREADY);
    ip2ps_fifo_U0->masterOut_TDATA(ip2ps_fifo_U0_masterOut_TDATA);
    ip2ps_fifo_U0->masterOut_TVALID(ip2ps_fifo_U0_masterOut_TVALID);
    ip2ps_fifo_U0->masterOut_TSTRB(ip2ps_fifo_U0_masterOut_TSTRB);
    ip2ps_fifo_U0->masterOut_TLAST(ip2ps_fifo_U0_masterOut_TLAST);
    ip2ps_fifo_U0->ip2psFifo_V_data_V_dout(ip2psFifo_V_data_V_dout);
    ip2ps_fifo_U0->ip2psFifo_V_data_V_empty_n(ip2psFifo_V_data_V_empty_n);
    ip2ps_fifo_U0->ip2psFifo_V_data_V_read(ip2ps_fifo_U0_ip2psFifo_V_data_V_read);
    ip2ps_fifo_U0->ip2psFifo_V_strb_V_dout(ip2psFifo_V_strb_V_dout);
    ip2ps_fifo_U0->ip2psFifo_V_strb_V_empty_n(ip2psFifo_V_strb_V_empty_n);
    ip2ps_fifo_U0->ip2psFifo_V_strb_V_read(ip2ps_fifo_U0_ip2psFifo_V_strb_V_read);
    ip2ps_fifo_U0->ip2psFifo_V_last_V_dout(ip2psFifo_V_last_V_dout);
    ip2ps_fifo_U0->ip2psFifo_V_last_V_empty_n(ip2psFifo_V_last_V_empty_n);
    ip2ps_fifo_U0->ip2psFifo_V_last_V_read(ip2ps_fifo_U0_ip2psFifo_V_last_V_read);
    counters_out_U0 = new counters_out("counters_out_U0");
    counters_out_U0->ap_clk(ap_clk);
    counters_out_U0->ap_rst(ap_rst_n_inv);
    counters_out_U0->ap_start(counters_out_U0_ap_start);
    counters_out_U0->ap_done(counters_out_U0_ap_done);
    counters_out_U0->ap_continue(counters_out_U0_ap_continue);
    counters_out_U0->ap_idle(counters_out_U0_ap_idle);
    counters_out_U0->ap_ready(counters_out_U0_ap_ready);
    counters_out_U0->p_read(cnt0Reg_V_dout);
    counters_out_U0->p_read1(cnt1Reg_V_dout);
    counters_out_U0->p_read2(cnt2Reg_V_dout);
    counters_out_U0->rule0cnt_V(counters_out_U0_rule0cnt_V);
    counters_out_U0->rule0cnt_V_ap_vld(counters_out_U0_rule0cnt_V_ap_vld);
    counters_out_U0->rule1cnt_V(counters_out_U0_rule1cnt_V);
    counters_out_U0->rule1cnt_V_ap_vld(counters_out_U0_rule1cnt_V_ap_vld);
    counters_out_U0->rule2cnt_V(counters_out_U0_rule2cnt_V);
    counters_out_U0->rule2cnt_V_ap_vld(counters_out_U0_rule2cnt_V_ap_vld);
    rule0_V_c1_U = new fifo_w32_d1_A("rule0_V_c1_U");
    rule0_V_c1_U->clk(ap_clk);
    rule0_V_c1_U->reset(ap_rst_n_inv);
    rule0_V_c1_U->if_read_ce(ap_var_for_const0);
    rule0_V_c1_U->if_write_ce(ap_var_for_const0);
    rule0_V_c1_U->if_din(my_ip_hls_entry3_U0_rule0_V_out_din);
    rule0_V_c1_U->if_full_n(rule0_V_c1_full_n);
    rule0_V_c1_U->if_write(my_ip_hls_entry3_U0_rule0_V_out_write);
    rule0_V_c1_U->if_dout(rule0_V_c1_dout);
    rule0_V_c1_U->if_empty_n(rule0_V_c1_empty_n);
    rule0_V_c1_U->if_read(my_ip_hls_entry83_U0_rule0_V_read);
    rule1_V_c2_U = new fifo_w32_d1_A("rule1_V_c2_U");
    rule1_V_c2_U->clk(ap_clk);
    rule1_V_c2_U->reset(ap_rst_n_inv);
    rule1_V_c2_U->if_read_ce(ap_var_for_const0);
    rule1_V_c2_U->if_write_ce(ap_var_for_const0);
    rule1_V_c2_U->if_din(my_ip_hls_entry3_U0_rule1_V_out_din);
    rule1_V_c2_U->if_full_n(rule1_V_c2_full_n);
    rule1_V_c2_U->if_write(my_ip_hls_entry3_U0_rule1_V_out_write);
    rule1_V_c2_U->if_dout(rule1_V_c2_dout);
    rule1_V_c2_U->if_empty_n(rule1_V_c2_empty_n);
    rule1_V_c2_U->if_read(my_ip_hls_entry83_U0_rule1_V_read);
    rule2_V_c3_U = new fifo_w32_d1_A("rule2_V_c3_U");
    rule2_V_c3_U->clk(ap_clk);
    rule2_V_c3_U->reset(ap_rst_n_inv);
    rule2_V_c3_U->if_read_ce(ap_var_for_const0);
    rule2_V_c3_U->if_write_ce(ap_var_for_const0);
    rule2_V_c3_U->if_din(my_ip_hls_entry3_U0_rule2_V_out_din);
    rule2_V_c3_U->if_full_n(rule2_V_c3_full_n);
    rule2_V_c3_U->if_write(my_ip_hls_entry3_U0_rule2_V_out_write);
    rule2_V_c3_U->if_dout(rule2_V_c3_dout);
    rule2_V_c3_U->if_empty_n(rule2_V_c3_empty_n);
    rule2_V_c3_U->if_read(my_ip_hls_entry83_U0_rule2_V_read);
    rule0_V_c_U = new fifo_w32_d1_A("rule0_V_c_U");
    rule0_V_c_U->clk(ap_clk);
    rule0_V_c_U->reset(ap_rst_n_inv);
    rule0_V_c_U->if_read_ce(ap_var_for_const0);
    rule0_V_c_U->if_write_ce(ap_var_for_const0);
    rule0_V_c_U->if_din(my_ip_hls_entry83_U0_rule0_V_out_din);
    rule0_V_c_U->if_full_n(rule0_V_c_full_n);
    rule0_V_c_U->if_write(my_ip_hls_entry83_U0_rule0_V_out_write);
    rule0_V_c_U->if_dout(rule0_V_c_dout);
    rule0_V_c_U->if_empty_n(rule0_V_c_empty_n);
    rule0_V_c_U->if_read(rules_in_U0_rule0_V_read);
    rule1_V_c_U = new fifo_w32_d1_A("rule1_V_c_U");
    rule1_V_c_U->clk(ap_clk);
    rule1_V_c_U->reset(ap_rst_n_inv);
    rule1_V_c_U->if_read_ce(ap_var_for_const0);
    rule1_V_c_U->if_write_ce(ap_var_for_const0);
    rule1_V_c_U->if_din(my_ip_hls_entry83_U0_rule1_V_out_din);
    rule1_V_c_U->if_full_n(rule1_V_c_full_n);
    rule1_V_c_U->if_write(my_ip_hls_entry83_U0_rule1_V_out_write);
    rule1_V_c_U->if_dout(rule1_V_c_dout);
    rule1_V_c_U->if_empty_n(rule1_V_c_empty_n);
    rule1_V_c_U->if_read(rules_in_U0_rule1_V_read);
    rule2_V_c_U = new fifo_w32_d1_A("rule2_V_c_U");
    rule2_V_c_U->clk(ap_clk);
    rule2_V_c_U->reset(ap_rst_n_inv);
    rule2_V_c_U->if_read_ce(ap_var_for_const0);
    rule2_V_c_U->if_write_ce(ap_var_for_const0);
    rule2_V_c_U->if_din(my_ip_hls_entry83_U0_rule2_V_out_din);
    rule2_V_c_U->if_full_n(rule2_V_c_full_n);
    rule2_V_c_U->if_write(my_ip_hls_entry83_U0_rule2_V_out_write);
    rule2_V_c_U->if_dout(rule2_V_c_dout);
    rule2_V_c_U->if_empty_n(rule2_V_c_empty_n);
    rule2_V_c_U->if_read(rules_in_U0_rule2_V_read);
    rule0Reg_V_channel_U = new fifo_w32_d2_A("rule0Reg_V_channel_U");
    rule0Reg_V_channel_U->clk(ap_clk);
    rule0Reg_V_channel_U->reset(ap_rst_n_inv);
    rule0Reg_V_channel_U->if_read_ce(ap_var_for_const0);
    rule0Reg_V_channel_U->if_write_ce(ap_var_for_const0);
    rule0Reg_V_channel_U->if_din(rules_in_U0_ap_return_0);
    rule0Reg_V_channel_U->if_full_n(rule0Reg_V_channel_full_n);
    rule0Reg_V_channel_U->if_write(ap_channel_done_rule0Reg_V_channel);
    rule0Reg_V_channel_U->if_dout(rule0Reg_V_channel_dout);
    rule0Reg_V_channel_U->if_empty_n(rule0Reg_V_channel_empty_n);
    rule0Reg_V_channel_U->if_read(core_U0_ap_ready);
    rule1Reg_V_channel_U = new fifo_w32_d2_A("rule1Reg_V_channel_U");
    rule1Reg_V_channel_U->clk(ap_clk);
    rule1Reg_V_channel_U->reset(ap_rst_n_inv);
    rule1Reg_V_channel_U->if_read_ce(ap_var_for_const0);
    rule1Reg_V_channel_U->if_write_ce(ap_var_for_const0);
    rule1Reg_V_channel_U->if_din(rules_in_U0_ap_return_1);
    rule1Reg_V_channel_U->if_full_n(rule1Reg_V_channel_full_n);
    rule1Reg_V_channel_U->if_write(ap_channel_done_rule1Reg_V_channel);
    rule1Reg_V_channel_U->if_dout(rule1Reg_V_channel_dout);
    rule1Reg_V_channel_U->if_empty_n(rule1Reg_V_channel_empty_n);
    rule1Reg_V_channel_U->if_read(core_U0_ap_ready);
    rule2Reg_V_channel_U = new fifo_w32_d2_A("rule2Reg_V_channel_U");
    rule2Reg_V_channel_U->clk(ap_clk);
    rule2Reg_V_channel_U->reset(ap_rst_n_inv);
    rule2Reg_V_channel_U->if_read_ce(ap_var_for_const0);
    rule2Reg_V_channel_U->if_write_ce(ap_var_for_const0);
    rule2Reg_V_channel_U->if_din(rules_in_U0_ap_return_2);
    rule2Reg_V_channel_U->if_full_n(rule2Reg_V_channel_full_n);
    rule2Reg_V_channel_U->if_write(ap_channel_done_rule2Reg_V_channel);
    rule2Reg_V_channel_U->if_dout(rule2Reg_V_channel_dout);
    rule2Reg_V_channel_U->if_empty_n(rule2Reg_V_channel_empty_n);
    rule2Reg_V_channel_U->if_read(core_U0_ap_ready);
    ps2ipFifo_V_data_V_U = new fifo_w32_d64_A("ps2ipFifo_V_data_V_U");
    ps2ipFifo_V_data_V_U->clk(ap_clk);
    ps2ipFifo_V_data_V_U->reset(ap_rst_n_inv);
    ps2ipFifo_V_data_V_U->if_read_ce(ap_var_for_const0);
    ps2ipFifo_V_data_V_U->if_write_ce(ap_var_for_const0);
    ps2ipFifo_V_data_V_U->if_din(ps2ip_fifo_U0_ps2ipFifo_V_data_V_din);
    ps2ipFifo_V_data_V_U->if_full_n(ps2ipFifo_V_data_V_full_n);
    ps2ipFifo_V_data_V_U->if_write(ps2ip_fifo_U0_ps2ipFifo_V_data_V_write);
    ps2ipFifo_V_data_V_U->if_dout(ps2ipFifo_V_data_V_dout);
    ps2ipFifo_V_data_V_U->if_empty_n(ps2ipFifo_V_data_V_empty_n);
    ps2ipFifo_V_data_V_U->if_read(core_U0_ps2ipFifo_V_data_V_read);
    ps2ipFifo_V_strb_V_U = new fifo_w4_d64_A("ps2ipFifo_V_strb_V_U");
    ps2ipFifo_V_strb_V_U->clk(ap_clk);
    ps2ipFifo_V_strb_V_U->reset(ap_rst_n_inv);
    ps2ipFifo_V_strb_V_U->if_read_ce(ap_var_for_const0);
    ps2ipFifo_V_strb_V_U->if_write_ce(ap_var_for_const0);
    ps2ipFifo_V_strb_V_U->if_din(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din);
    ps2ipFifo_V_strb_V_U->if_full_n(ps2ipFifo_V_strb_V_full_n);
    ps2ipFifo_V_strb_V_U->if_write(ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write);
    ps2ipFifo_V_strb_V_U->if_dout(ps2ipFifo_V_strb_V_dout);
    ps2ipFifo_V_strb_V_U->if_empty_n(ps2ipFifo_V_strb_V_empty_n);
    ps2ipFifo_V_strb_V_U->if_read(core_U0_ps2ipFifo_V_strb_V_read);
    ps2ipFifo_V_last_V_U = new fifo_w1_d64_A("ps2ipFifo_V_last_V_U");
    ps2ipFifo_V_last_V_U->clk(ap_clk);
    ps2ipFifo_V_last_V_U->reset(ap_rst_n_inv);
    ps2ipFifo_V_last_V_U->if_read_ce(ap_var_for_const0);
    ps2ipFifo_V_last_V_U->if_write_ce(ap_var_for_const0);
    ps2ipFifo_V_last_V_U->if_din(ps2ip_fifo_U0_ps2ipFifo_V_last_V_din);
    ps2ipFifo_V_last_V_U->if_full_n(ps2ipFifo_V_last_V_full_n);
    ps2ipFifo_V_last_V_U->if_write(ps2ip_fifo_U0_ps2ipFifo_V_last_V_write);
    ps2ipFifo_V_last_V_U->if_dout(ps2ipFifo_V_last_V_dout);
    ps2ipFifo_V_last_V_U->if_empty_n(ps2ipFifo_V_last_V_empty_n);
    ps2ipFifo_V_last_V_U->if_read(core_U0_ps2ipFifo_V_last_V_read);
    ip2psFifo_V_data_V_U = new fifo_w32_d64_A("ip2psFifo_V_data_V_U");
    ip2psFifo_V_data_V_U->clk(ap_clk);
    ip2psFifo_V_data_V_U->reset(ap_rst_n_inv);
    ip2psFifo_V_data_V_U->if_read_ce(ap_var_for_const0);
    ip2psFifo_V_data_V_U->if_write_ce(ap_var_for_const0);
    ip2psFifo_V_data_V_U->if_din(core_U0_ip2psFifo_V_data_V_din);
    ip2psFifo_V_data_V_U->if_full_n(ip2psFifo_V_data_V_full_n);
    ip2psFifo_V_data_V_U->if_write(core_U0_ip2psFifo_V_data_V_write);
    ip2psFifo_V_data_V_U->if_dout(ip2psFifo_V_data_V_dout);
    ip2psFifo_V_data_V_U->if_empty_n(ip2psFifo_V_data_V_empty_n);
    ip2psFifo_V_data_V_U->if_read(ip2ps_fifo_U0_ip2psFifo_V_data_V_read);
    ip2psFifo_V_strb_V_U = new fifo_w4_d64_A("ip2psFifo_V_strb_V_U");
    ip2psFifo_V_strb_V_U->clk(ap_clk);
    ip2psFifo_V_strb_V_U->reset(ap_rst_n_inv);
    ip2psFifo_V_strb_V_U->if_read_ce(ap_var_for_const0);
    ip2psFifo_V_strb_V_U->if_write_ce(ap_var_for_const0);
    ip2psFifo_V_strb_V_U->if_din(core_U0_ip2psFifo_V_strb_V_din);
    ip2psFifo_V_strb_V_U->if_full_n(ip2psFifo_V_strb_V_full_n);
    ip2psFifo_V_strb_V_U->if_write(core_U0_ip2psFifo_V_strb_V_write);
    ip2psFifo_V_strb_V_U->if_dout(ip2psFifo_V_strb_V_dout);
    ip2psFifo_V_strb_V_U->if_empty_n(ip2psFifo_V_strb_V_empty_n);
    ip2psFifo_V_strb_V_U->if_read(ip2ps_fifo_U0_ip2psFifo_V_strb_V_read);
    ip2psFifo_V_last_V_U = new fifo_w1_d64_A("ip2psFifo_V_last_V_U");
    ip2psFifo_V_last_V_U->clk(ap_clk);
    ip2psFifo_V_last_V_U->reset(ap_rst_n_inv);
    ip2psFifo_V_last_V_U->if_read_ce(ap_var_for_const0);
    ip2psFifo_V_last_V_U->if_write_ce(ap_var_for_const0);
    ip2psFifo_V_last_V_U->if_din(core_U0_ip2psFifo_V_last_V_din);
    ip2psFifo_V_last_V_U->if_full_n(ip2psFifo_V_last_V_full_n);
    ip2psFifo_V_last_V_U->if_write(core_U0_ip2psFifo_V_last_V_write);
    ip2psFifo_V_last_V_U->if_dout(ip2psFifo_V_last_V_dout);
    ip2psFifo_V_last_V_U->if_empty_n(ip2psFifo_V_last_V_empty_n);
    ip2psFifo_V_last_V_U->if_read(ip2ps_fifo_U0_ip2psFifo_V_last_V_read);
    cnt0Reg_V_U = new fifo_w32_d2_A("cnt0Reg_V_U");
    cnt0Reg_V_U->clk(ap_clk);
    cnt0Reg_V_U->reset(ap_rst_n_inv);
    cnt0Reg_V_U->if_read_ce(ap_var_for_const0);
    cnt0Reg_V_U->if_write_ce(ap_var_for_const0);
    cnt0Reg_V_U->if_din(core_U0_ap_return_0);
    cnt0Reg_V_U->if_full_n(cnt0Reg_V_full_n);
    cnt0Reg_V_U->if_write(ap_channel_done_cnt0Reg_V);
    cnt0Reg_V_U->if_dout(cnt0Reg_V_dout);
    cnt0Reg_V_U->if_empty_n(cnt0Reg_V_empty_n);
    cnt0Reg_V_U->if_read(counters_out_U0_ap_ready);
    cnt1Reg_V_U = new fifo_w32_d2_A("cnt1Reg_V_U");
    cnt1Reg_V_U->clk(ap_clk);
    cnt1Reg_V_U->reset(ap_rst_n_inv);
    cnt1Reg_V_U->if_read_ce(ap_var_for_const0);
    cnt1Reg_V_U->if_write_ce(ap_var_for_const0);
    cnt1Reg_V_U->if_din(core_U0_ap_return_1);
    cnt1Reg_V_U->if_full_n(cnt1Reg_V_full_n);
    cnt1Reg_V_U->if_write(ap_channel_done_cnt1Reg_V);
    cnt1Reg_V_U->if_dout(cnt1Reg_V_dout);
    cnt1Reg_V_U->if_empty_n(cnt1Reg_V_empty_n);
    cnt1Reg_V_U->if_read(counters_out_U0_ap_ready);
    cnt2Reg_V_U = new fifo_w32_d2_A("cnt2Reg_V_U");
    cnt2Reg_V_U->clk(ap_clk);
    cnt2Reg_V_U->reset(ap_rst_n_inv);
    cnt2Reg_V_U->if_read_ce(ap_var_for_const0);
    cnt2Reg_V_U->if_write_ce(ap_var_for_const0);
    cnt2Reg_V_U->if_din(core_U0_ap_return_2);
    cnt2Reg_V_U->if_full_n(cnt2Reg_V_full_n);
    cnt2Reg_V_U->if_write(ap_channel_done_cnt2Reg_V);
    cnt2Reg_V_U->if_dout(cnt2Reg_V_dout);
    cnt2Reg_V_U->if_empty_n(cnt2Reg_V_empty_n);
    cnt2Reg_V_U->if_read(counters_out_U0_ap_ready);
    start_for_my_ip_hbkb_U = new start_for_my_ip_hbkb("start_for_my_ip_hbkb_U");
    start_for_my_ip_hbkb_U->clk(ap_clk);
    start_for_my_ip_hbkb_U->reset(ap_rst_n_inv);
    start_for_my_ip_hbkb_U->if_read_ce(ap_var_for_const0);
    start_for_my_ip_hbkb_U->if_write_ce(ap_var_for_const0);
    start_for_my_ip_hbkb_U->if_din(start_for_my_ip_hls_entry83_U0_din);
    start_for_my_ip_hbkb_U->if_full_n(start_for_my_ip_hls_entry83_U0_full_n);
    start_for_my_ip_hbkb_U->if_write(my_ip_hls_entry3_U0_start_write);
    start_for_my_ip_hbkb_U->if_dout(start_for_my_ip_hls_entry83_U0_dout);
    start_for_my_ip_hbkb_U->if_empty_n(start_for_my_ip_hls_entry83_U0_empty_n);
    start_for_my_ip_hbkb_U->if_read(my_ip_hls_entry83_U0_ap_ready);
    start_for_rules_icud_U = new start_for_rules_icud("start_for_rules_icud_U");
    start_for_rules_icud_U->clk(ap_clk);
    start_for_rules_icud_U->reset(ap_rst_n_inv);
    start_for_rules_icud_U->if_read_ce(ap_var_for_const0);
    start_for_rules_icud_U->if_write_ce(ap_var_for_const0);
    start_for_rules_icud_U->if_din(start_for_rules_in_U0_din);
    start_for_rules_icud_U->if_full_n(start_for_rules_in_U0_full_n);
    start_for_rules_icud_U->if_write(my_ip_hls_entry83_U0_start_write);
    start_for_rules_icud_U->if_dout(start_for_rules_in_U0_dout);
    start_for_rules_icud_U->if_empty_n(start_for_rules_in_U0_empty_n);
    start_for_rules_icud_U->if_read(rules_in_U0_ap_ready);
    start_for_ip2ps_fdEe_U = new start_for_ip2ps_fdEe("start_for_ip2ps_fdEe_U");
    start_for_ip2ps_fdEe_U->clk(ap_clk);
    start_for_ip2ps_fdEe_U->reset(ap_rst_n_inv);
    start_for_ip2ps_fdEe_U->if_read_ce(ap_var_for_const0);
    start_for_ip2ps_fdEe_U->if_write_ce(ap_var_for_const0);
    start_for_ip2ps_fdEe_U->if_din(start_for_ip2ps_fifo_U0_din);
    start_for_ip2ps_fdEe_U->if_full_n(start_for_ip2ps_fifo_U0_full_n);
    start_for_ip2ps_fdEe_U->if_write(core_U0_start_write);
    start_for_ip2ps_fdEe_U->if_dout(start_for_ip2ps_fifo_U0_dout);
    start_for_ip2ps_fdEe_U->if_empty_n(start_for_ip2ps_fifo_U0_empty_n);
    start_for_ip2ps_fdEe_U->if_read(ip2ps_fifo_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_cnt0Reg_V);
    sensitive << ( core_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_cnt0Reg_V );

    SC_METHOD(thread_ap_channel_done_cnt1Reg_V);
    sensitive << ( core_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_cnt1Reg_V );

    SC_METHOD(thread_ap_channel_done_cnt2Reg_V);
    sensitive << ( core_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_cnt2Reg_V );

    SC_METHOD(thread_ap_channel_done_rule0Reg_V_channel);
    sensitive << ( rules_in_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_rule0Reg_V_channel );

    SC_METHOD(thread_ap_channel_done_rule1Reg_V_channel);
    sensitive << ( rules_in_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_rule1Reg_V_channel );

    SC_METHOD(thread_ap_channel_done_rule2Reg_V_channel);
    sensitive << ( rules_in_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_rule2Reg_V_channel );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_channel_write_cnt0Reg_V);
    sensitive << ( ap_channel_done_cnt0Reg_V );
    sensitive << ( cnt0Reg_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_cnt0Reg_V );

    SC_METHOD(thread_ap_sync_channel_write_cnt1Reg_V);
    sensitive << ( ap_channel_done_cnt1Reg_V );
    sensitive << ( cnt1Reg_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_cnt1Reg_V );

    SC_METHOD(thread_ap_sync_channel_write_cnt2Reg_V);
    sensitive << ( ap_channel_done_cnt2Reg_V );
    sensitive << ( cnt2Reg_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_cnt2Reg_V );

    SC_METHOD(thread_ap_sync_channel_write_rule0Reg_V_channel);
    sensitive << ( ap_channel_done_rule0Reg_V_channel );
    sensitive << ( rule0Reg_V_channel_full_n );
    sensitive << ( ap_sync_reg_channel_write_rule0Reg_V_channel );

    SC_METHOD(thread_ap_sync_channel_write_rule1Reg_V_channel);
    sensitive << ( ap_channel_done_rule1Reg_V_channel );
    sensitive << ( rule1Reg_V_channel_full_n );
    sensitive << ( ap_sync_reg_channel_write_rule1Reg_V_channel );

    SC_METHOD(thread_ap_sync_channel_write_rule2Reg_V_channel);
    sensitive << ( ap_channel_done_rule2Reg_V_channel );
    sensitive << ( rule2Reg_V_channel_full_n );
    sensitive << ( ap_sync_reg_channel_write_rule2Reg_V_channel );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_core_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_cnt2Reg_V );
    sensitive << ( ap_sync_channel_write_cnt1Reg_V );
    sensitive << ( ap_sync_channel_write_cnt0Reg_V );

    SC_METHOD(thread_core_U0_ap_start);
    sensitive << ( rule0Reg_V_channel_empty_n );
    sensitive << ( rule1Reg_V_channel_empty_n );
    sensitive << ( rule2Reg_V_channel_empty_n );

    SC_METHOD(thread_counters_out_U0_ap_continue);

    SC_METHOD(thread_counters_out_U0_ap_start);
    sensitive << ( cnt0Reg_V_empty_n );
    sensitive << ( cnt1Reg_V_empty_n );
    sensitive << ( cnt2Reg_V_empty_n );

    SC_METHOD(thread_counters_out_U0_start_full_n);

    SC_METHOD(thread_counters_out_U0_start_write);

    SC_METHOD(thread_ip2ps_fifo_U0_ap_continue);

    SC_METHOD(thread_ip2ps_fifo_U0_ap_start);
    sensitive << ( start_for_ip2ps_fifo_U0_empty_n );

    SC_METHOD(thread_ip2ps_fifo_U0_start_full_n);

    SC_METHOD(thread_ip2ps_fifo_U0_start_write);

    SC_METHOD(thread_masterOut_TDATA);
    sensitive << ( ip2ps_fifo_U0_masterOut_TDATA );

    SC_METHOD(thread_masterOut_TLAST);
    sensitive << ( ip2ps_fifo_U0_masterOut_TLAST );

    SC_METHOD(thread_masterOut_TSTRB);
    sensitive << ( ip2ps_fifo_U0_masterOut_TSTRB );

    SC_METHOD(thread_masterOut_TVALID);
    sensitive << ( ip2ps_fifo_U0_masterOut_TVALID );

    SC_METHOD(thread_my_ip_hls_entry3_U0_ap_continue);

    SC_METHOD(thread_my_ip_hls_entry3_U0_ap_start);

    SC_METHOD(thread_my_ip_hls_entry83_U0_ap_continue);

    SC_METHOD(thread_my_ip_hls_entry83_U0_ap_start);
    sensitive << ( start_for_my_ip_hls_entry83_U0_empty_n );

    SC_METHOD(thread_ps2ip_fifo_U0_ap_continue);

    SC_METHOD(thread_ps2ip_fifo_U0_ap_start);

    SC_METHOD(thread_ps2ip_fifo_U0_start_full_n);

    SC_METHOD(thread_ps2ip_fifo_U0_start_write);

    SC_METHOD(thread_rules_in_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_rule2Reg_V_channel );
    sensitive << ( ap_sync_channel_write_rule1Reg_V_channel );
    sensitive << ( ap_sync_channel_write_rule0Reg_V_channel );

    SC_METHOD(thread_rules_in_U0_ap_start);
    sensitive << ( start_for_rules_in_U0_empty_n );

    SC_METHOD(thread_rules_in_U0_start_full_n);

    SC_METHOD(thread_rules_in_U0_start_write);

    SC_METHOD(thread_slaveIn_TREADY);
    sensitive << ( ps2ip_fifo_U0_slaveIn_TREADY );

    SC_METHOD(thread_start_for_ip2ps_fifo_U0_din);

    SC_METHOD(thread_start_for_my_ip_hls_entry83_U0_din);

    SC_METHOD(thread_start_for_rules_in_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_sync_reg_channel_write_rule2Reg_V_channel = SC_LOGIC_0;
    ap_sync_reg_channel_write_rule1Reg_V_channel = SC_LOGIC_0;
    ap_sync_reg_channel_write_rule0Reg_V_channel = SC_LOGIC_0;
    ap_sync_reg_channel_write_cnt2Reg_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_cnt1Reg_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_cnt0Reg_V = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "my_ip_hls_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_psAxiLite_AWVALID, "(port)s_axi_psAxiLite_AWVALID");
    sc_trace(mVcdFile, s_axi_psAxiLite_AWREADY, "(port)s_axi_psAxiLite_AWREADY");
    sc_trace(mVcdFile, s_axi_psAxiLite_AWADDR, "(port)s_axi_psAxiLite_AWADDR");
    sc_trace(mVcdFile, s_axi_psAxiLite_WVALID, "(port)s_axi_psAxiLite_WVALID");
    sc_trace(mVcdFile, s_axi_psAxiLite_WREADY, "(port)s_axi_psAxiLite_WREADY");
    sc_trace(mVcdFile, s_axi_psAxiLite_WDATA, "(port)s_axi_psAxiLite_WDATA");
    sc_trace(mVcdFile, s_axi_psAxiLite_WSTRB, "(port)s_axi_psAxiLite_WSTRB");
    sc_trace(mVcdFile, s_axi_psAxiLite_ARVALID, "(port)s_axi_psAxiLite_ARVALID");
    sc_trace(mVcdFile, s_axi_psAxiLite_ARREADY, "(port)s_axi_psAxiLite_ARREADY");
    sc_trace(mVcdFile, s_axi_psAxiLite_ARADDR, "(port)s_axi_psAxiLite_ARADDR");
    sc_trace(mVcdFile, s_axi_psAxiLite_RVALID, "(port)s_axi_psAxiLite_RVALID");
    sc_trace(mVcdFile, s_axi_psAxiLite_RREADY, "(port)s_axi_psAxiLite_RREADY");
    sc_trace(mVcdFile, s_axi_psAxiLite_RDATA, "(port)s_axi_psAxiLite_RDATA");
    sc_trace(mVcdFile, s_axi_psAxiLite_RRESP, "(port)s_axi_psAxiLite_RRESP");
    sc_trace(mVcdFile, s_axi_psAxiLite_BVALID, "(port)s_axi_psAxiLite_BVALID");
    sc_trace(mVcdFile, s_axi_psAxiLite_BREADY, "(port)s_axi_psAxiLite_BREADY");
    sc_trace(mVcdFile, s_axi_psAxiLite_BRESP, "(port)s_axi_psAxiLite_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, slaveIn_TDATA, "(port)slaveIn_TDATA");
    sc_trace(mVcdFile, slaveIn_TSTRB, "(port)slaveIn_TSTRB");
    sc_trace(mVcdFile, slaveIn_TLAST, "(port)slaveIn_TLAST");
    sc_trace(mVcdFile, masterOut_TDATA, "(port)masterOut_TDATA");
    sc_trace(mVcdFile, masterOut_TSTRB, "(port)masterOut_TSTRB");
    sc_trace(mVcdFile, masterOut_TLAST, "(port)masterOut_TLAST");
    sc_trace(mVcdFile, slaveIn_TVALID, "(port)slaveIn_TVALID");
    sc_trace(mVcdFile, slaveIn_TREADY, "(port)slaveIn_TREADY");
    sc_trace(mVcdFile, masterOut_TVALID, "(port)masterOut_TVALID");
    sc_trace(mVcdFile, masterOut_TREADY, "(port)masterOut_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, rule0_V, "rule0_V");
    sc_trace(mVcdFile, rule1_V, "rule1_V");
    sc_trace(mVcdFile, rule2_V, "rule2_V");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_ap_start, "my_ip_hls_entry3_U0_ap_start");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_ap_done, "my_ip_hls_entry3_U0_ap_done");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_ap_continue, "my_ip_hls_entry3_U0_ap_continue");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_ap_idle, "my_ip_hls_entry3_U0_ap_idle");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_ap_ready, "my_ip_hls_entry3_U0_ap_ready");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_start_out, "my_ip_hls_entry3_U0_start_out");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_start_write, "my_ip_hls_entry3_U0_start_write");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule0_V_out_din, "my_ip_hls_entry3_U0_rule0_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule0_V_out_write, "my_ip_hls_entry3_U0_rule0_V_out_write");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule1_V_out_din, "my_ip_hls_entry3_U0_rule1_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule1_V_out_write, "my_ip_hls_entry3_U0_rule1_V_out_write");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule2_V_out_din, "my_ip_hls_entry3_U0_rule2_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry3_U0_rule2_V_out_write, "my_ip_hls_entry3_U0_rule2_V_out_write");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_ap_start, "my_ip_hls_entry83_U0_ap_start");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_ap_done, "my_ip_hls_entry83_U0_ap_done");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_ap_continue, "my_ip_hls_entry83_U0_ap_continue");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_ap_idle, "my_ip_hls_entry83_U0_ap_idle");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_ap_ready, "my_ip_hls_entry83_U0_ap_ready");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_start_out, "my_ip_hls_entry83_U0_start_out");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_start_write, "my_ip_hls_entry83_U0_start_write");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule0_V_read, "my_ip_hls_entry83_U0_rule0_V_read");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule1_V_read, "my_ip_hls_entry83_U0_rule1_V_read");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule2_V_read, "my_ip_hls_entry83_U0_rule2_V_read");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule0_V_out_din, "my_ip_hls_entry83_U0_rule0_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule0_V_out_write, "my_ip_hls_entry83_U0_rule0_V_out_write");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule1_V_out_din, "my_ip_hls_entry83_U0_rule1_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule1_V_out_write, "my_ip_hls_entry83_U0_rule1_V_out_write");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule2_V_out_din, "my_ip_hls_entry83_U0_rule2_V_out_din");
    sc_trace(mVcdFile, my_ip_hls_entry83_U0_rule2_V_out_write, "my_ip_hls_entry83_U0_rule2_V_out_write");
    sc_trace(mVcdFile, rules_in_U0_ap_start, "rules_in_U0_ap_start");
    sc_trace(mVcdFile, rules_in_U0_ap_done, "rules_in_U0_ap_done");
    sc_trace(mVcdFile, rules_in_U0_ap_continue, "rules_in_U0_ap_continue");
    sc_trace(mVcdFile, rules_in_U0_ap_idle, "rules_in_U0_ap_idle");
    sc_trace(mVcdFile, rules_in_U0_ap_ready, "rules_in_U0_ap_ready");
    sc_trace(mVcdFile, rules_in_U0_rule0_V_read, "rules_in_U0_rule0_V_read");
    sc_trace(mVcdFile, rules_in_U0_rule1_V_read, "rules_in_U0_rule1_V_read");
    sc_trace(mVcdFile, rules_in_U0_rule2_V_read, "rules_in_U0_rule2_V_read");
    sc_trace(mVcdFile, rules_in_U0_ap_return_0, "rules_in_U0_ap_return_0");
    sc_trace(mVcdFile, rules_in_U0_ap_return_1, "rules_in_U0_ap_return_1");
    sc_trace(mVcdFile, rules_in_U0_ap_return_2, "rules_in_U0_ap_return_2");
    sc_trace(mVcdFile, ap_channel_done_rule2Reg_V_channel, "ap_channel_done_rule2Reg_V_channel");
    sc_trace(mVcdFile, rule2Reg_V_channel_full_n, "rule2Reg_V_channel_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_rule2Reg_V_channel, "ap_sync_reg_channel_write_rule2Reg_V_channel");
    sc_trace(mVcdFile, ap_sync_channel_write_rule2Reg_V_channel, "ap_sync_channel_write_rule2Reg_V_channel");
    sc_trace(mVcdFile, ap_channel_done_rule1Reg_V_channel, "ap_channel_done_rule1Reg_V_channel");
    sc_trace(mVcdFile, rule1Reg_V_channel_full_n, "rule1Reg_V_channel_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_rule1Reg_V_channel, "ap_sync_reg_channel_write_rule1Reg_V_channel");
    sc_trace(mVcdFile, ap_sync_channel_write_rule1Reg_V_channel, "ap_sync_channel_write_rule1Reg_V_channel");
    sc_trace(mVcdFile, ap_channel_done_rule0Reg_V_channel, "ap_channel_done_rule0Reg_V_channel");
    sc_trace(mVcdFile, rule0Reg_V_channel_full_n, "rule0Reg_V_channel_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_rule0Reg_V_channel, "ap_sync_reg_channel_write_rule0Reg_V_channel");
    sc_trace(mVcdFile, ap_sync_channel_write_rule0Reg_V_channel, "ap_sync_channel_write_rule0Reg_V_channel");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ap_start, "ps2ip_fifo_U0_ap_start");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ap_done, "ps2ip_fifo_U0_ap_done");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ap_continue, "ps2ip_fifo_U0_ap_continue");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ap_idle, "ps2ip_fifo_U0_ap_idle");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ap_ready, "ps2ip_fifo_U0_ap_ready");
    sc_trace(mVcdFile, ps2ip_fifo_U0_slaveIn_TREADY, "ps2ip_fifo_U0_slaveIn_TREADY");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_data_V_din, "ps2ip_fifo_U0_ps2ipFifo_V_data_V_din");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_data_V_write, "ps2ip_fifo_U0_ps2ipFifo_V_data_V_write");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din, "ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write, "ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_last_V_din, "ps2ip_fifo_U0_ps2ipFifo_V_last_V_din");
    sc_trace(mVcdFile, ps2ip_fifo_U0_ps2ipFifo_V_last_V_write, "ps2ip_fifo_U0_ps2ipFifo_V_last_V_write");
    sc_trace(mVcdFile, core_U0_ap_start, "core_U0_ap_start");
    sc_trace(mVcdFile, core_U0_ap_done, "core_U0_ap_done");
    sc_trace(mVcdFile, core_U0_ap_continue, "core_U0_ap_continue");
    sc_trace(mVcdFile, core_U0_ap_idle, "core_U0_ap_idle");
    sc_trace(mVcdFile, core_U0_ap_ready, "core_U0_ap_ready");
    sc_trace(mVcdFile, core_U0_start_out, "core_U0_start_out");
    sc_trace(mVcdFile, core_U0_start_write, "core_U0_start_write");
    sc_trace(mVcdFile, core_U0_ps2ipFifo_V_data_V_read, "core_U0_ps2ipFifo_V_data_V_read");
    sc_trace(mVcdFile, core_U0_ps2ipFifo_V_strb_V_read, "core_U0_ps2ipFifo_V_strb_V_read");
    sc_trace(mVcdFile, core_U0_ps2ipFifo_V_last_V_read, "core_U0_ps2ipFifo_V_last_V_read");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_data_V_din, "core_U0_ip2psFifo_V_data_V_din");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_data_V_write, "core_U0_ip2psFifo_V_data_V_write");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_strb_V_din, "core_U0_ip2psFifo_V_strb_V_din");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_strb_V_write, "core_U0_ip2psFifo_V_strb_V_write");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_last_V_din, "core_U0_ip2psFifo_V_last_V_din");
    sc_trace(mVcdFile, core_U0_ip2psFifo_V_last_V_write, "core_U0_ip2psFifo_V_last_V_write");
    sc_trace(mVcdFile, core_U0_ap_return_0, "core_U0_ap_return_0");
    sc_trace(mVcdFile, core_U0_ap_return_1, "core_U0_ap_return_1");
    sc_trace(mVcdFile, core_U0_ap_return_2, "core_U0_ap_return_2");
    sc_trace(mVcdFile, ap_channel_done_cnt2Reg_V, "ap_channel_done_cnt2Reg_V");
    sc_trace(mVcdFile, cnt2Reg_V_full_n, "cnt2Reg_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_cnt2Reg_V, "ap_sync_reg_channel_write_cnt2Reg_V");
    sc_trace(mVcdFile, ap_sync_channel_write_cnt2Reg_V, "ap_sync_channel_write_cnt2Reg_V");
    sc_trace(mVcdFile, ap_channel_done_cnt1Reg_V, "ap_channel_done_cnt1Reg_V");
    sc_trace(mVcdFile, cnt1Reg_V_full_n, "cnt1Reg_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_cnt1Reg_V, "ap_sync_reg_channel_write_cnt1Reg_V");
    sc_trace(mVcdFile, ap_sync_channel_write_cnt1Reg_V, "ap_sync_channel_write_cnt1Reg_V");
    sc_trace(mVcdFile, ap_channel_done_cnt0Reg_V, "ap_channel_done_cnt0Reg_V");
    sc_trace(mVcdFile, cnt0Reg_V_full_n, "cnt0Reg_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_cnt0Reg_V, "ap_sync_reg_channel_write_cnt0Reg_V");
    sc_trace(mVcdFile, ap_sync_channel_write_cnt0Reg_V, "ap_sync_channel_write_cnt0Reg_V");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ap_start, "ip2ps_fifo_U0_ap_start");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ap_done, "ip2ps_fifo_U0_ap_done");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ap_continue, "ip2ps_fifo_U0_ap_continue");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ap_idle, "ip2ps_fifo_U0_ap_idle");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ap_ready, "ip2ps_fifo_U0_ap_ready");
    sc_trace(mVcdFile, ip2ps_fifo_U0_masterOut_TDATA, "ip2ps_fifo_U0_masterOut_TDATA");
    sc_trace(mVcdFile, ip2ps_fifo_U0_masterOut_TVALID, "ip2ps_fifo_U0_masterOut_TVALID");
    sc_trace(mVcdFile, ip2ps_fifo_U0_masterOut_TSTRB, "ip2ps_fifo_U0_masterOut_TSTRB");
    sc_trace(mVcdFile, ip2ps_fifo_U0_masterOut_TLAST, "ip2ps_fifo_U0_masterOut_TLAST");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ip2psFifo_V_data_V_read, "ip2ps_fifo_U0_ip2psFifo_V_data_V_read");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ip2psFifo_V_strb_V_read, "ip2ps_fifo_U0_ip2psFifo_V_strb_V_read");
    sc_trace(mVcdFile, ip2ps_fifo_U0_ip2psFifo_V_last_V_read, "ip2ps_fifo_U0_ip2psFifo_V_last_V_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, counters_out_U0_ap_start, "counters_out_U0_ap_start");
    sc_trace(mVcdFile, counters_out_U0_ap_done, "counters_out_U0_ap_done");
    sc_trace(mVcdFile, counters_out_U0_ap_continue, "counters_out_U0_ap_continue");
    sc_trace(mVcdFile, counters_out_U0_ap_idle, "counters_out_U0_ap_idle");
    sc_trace(mVcdFile, counters_out_U0_ap_ready, "counters_out_U0_ap_ready");
    sc_trace(mVcdFile, counters_out_U0_rule0cnt_V, "counters_out_U0_rule0cnt_V");
    sc_trace(mVcdFile, counters_out_U0_rule0cnt_V_ap_vld, "counters_out_U0_rule0cnt_V_ap_vld");
    sc_trace(mVcdFile, counters_out_U0_rule1cnt_V, "counters_out_U0_rule1cnt_V");
    sc_trace(mVcdFile, counters_out_U0_rule1cnt_V_ap_vld, "counters_out_U0_rule1cnt_V_ap_vld");
    sc_trace(mVcdFile, counters_out_U0_rule2cnt_V, "counters_out_U0_rule2cnt_V");
    sc_trace(mVcdFile, counters_out_U0_rule2cnt_V_ap_vld, "counters_out_U0_rule2cnt_V_ap_vld");
    sc_trace(mVcdFile, rule0_V_c1_full_n, "rule0_V_c1_full_n");
    sc_trace(mVcdFile, rule0_V_c1_dout, "rule0_V_c1_dout");
    sc_trace(mVcdFile, rule0_V_c1_empty_n, "rule0_V_c1_empty_n");
    sc_trace(mVcdFile, rule1_V_c2_full_n, "rule1_V_c2_full_n");
    sc_trace(mVcdFile, rule1_V_c2_dout, "rule1_V_c2_dout");
    sc_trace(mVcdFile, rule1_V_c2_empty_n, "rule1_V_c2_empty_n");
    sc_trace(mVcdFile, rule2_V_c3_full_n, "rule2_V_c3_full_n");
    sc_trace(mVcdFile, rule2_V_c3_dout, "rule2_V_c3_dout");
    sc_trace(mVcdFile, rule2_V_c3_empty_n, "rule2_V_c3_empty_n");
    sc_trace(mVcdFile, rule0_V_c_full_n, "rule0_V_c_full_n");
    sc_trace(mVcdFile, rule0_V_c_dout, "rule0_V_c_dout");
    sc_trace(mVcdFile, rule0_V_c_empty_n, "rule0_V_c_empty_n");
    sc_trace(mVcdFile, rule1_V_c_full_n, "rule1_V_c_full_n");
    sc_trace(mVcdFile, rule1_V_c_dout, "rule1_V_c_dout");
    sc_trace(mVcdFile, rule1_V_c_empty_n, "rule1_V_c_empty_n");
    sc_trace(mVcdFile, rule2_V_c_full_n, "rule2_V_c_full_n");
    sc_trace(mVcdFile, rule2_V_c_dout, "rule2_V_c_dout");
    sc_trace(mVcdFile, rule2_V_c_empty_n, "rule2_V_c_empty_n");
    sc_trace(mVcdFile, rule0Reg_V_channel_dout, "rule0Reg_V_channel_dout");
    sc_trace(mVcdFile, rule0Reg_V_channel_empty_n, "rule0Reg_V_channel_empty_n");
    sc_trace(mVcdFile, rule1Reg_V_channel_dout, "rule1Reg_V_channel_dout");
    sc_trace(mVcdFile, rule1Reg_V_channel_empty_n, "rule1Reg_V_channel_empty_n");
    sc_trace(mVcdFile, rule2Reg_V_channel_dout, "rule2Reg_V_channel_dout");
    sc_trace(mVcdFile, rule2Reg_V_channel_empty_n, "rule2Reg_V_channel_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_full_n, "ps2ipFifo_V_data_V_full_n");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_dout, "ps2ipFifo_V_data_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_empty_n, "ps2ipFifo_V_data_V_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_full_n, "ps2ipFifo_V_strb_V_full_n");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_dout, "ps2ipFifo_V_strb_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_empty_n, "ps2ipFifo_V_strb_V_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_full_n, "ps2ipFifo_V_last_V_full_n");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_dout, "ps2ipFifo_V_last_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_empty_n, "ps2ipFifo_V_last_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_full_n, "ip2psFifo_V_data_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_dout, "ip2psFifo_V_data_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_empty_n, "ip2psFifo_V_data_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_full_n, "ip2psFifo_V_strb_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_dout, "ip2psFifo_V_strb_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_empty_n, "ip2psFifo_V_strb_V_empty_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_full_n, "ip2psFifo_V_last_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_dout, "ip2psFifo_V_last_V_dout");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_empty_n, "ip2psFifo_V_last_V_empty_n");
    sc_trace(mVcdFile, cnt0Reg_V_dout, "cnt0Reg_V_dout");
    sc_trace(mVcdFile, cnt0Reg_V_empty_n, "cnt0Reg_V_empty_n");
    sc_trace(mVcdFile, cnt1Reg_V_dout, "cnt1Reg_V_dout");
    sc_trace(mVcdFile, cnt1Reg_V_empty_n, "cnt1Reg_V_empty_n");
    sc_trace(mVcdFile, cnt2Reg_V_dout, "cnt2Reg_V_dout");
    sc_trace(mVcdFile, cnt2Reg_V_empty_n, "cnt2Reg_V_empty_n");
    sc_trace(mVcdFile, start_for_my_ip_hls_entry83_U0_din, "start_for_my_ip_hls_entry83_U0_din");
    sc_trace(mVcdFile, start_for_my_ip_hls_entry83_U0_full_n, "start_for_my_ip_hls_entry83_U0_full_n");
    sc_trace(mVcdFile, start_for_my_ip_hls_entry83_U0_dout, "start_for_my_ip_hls_entry83_U0_dout");
    sc_trace(mVcdFile, start_for_my_ip_hls_entry83_U0_empty_n, "start_for_my_ip_hls_entry83_U0_empty_n");
    sc_trace(mVcdFile, start_for_rules_in_U0_din, "start_for_rules_in_U0_din");
    sc_trace(mVcdFile, start_for_rules_in_U0_full_n, "start_for_rules_in_U0_full_n");
    sc_trace(mVcdFile, start_for_rules_in_U0_dout, "start_for_rules_in_U0_dout");
    sc_trace(mVcdFile, start_for_rules_in_U0_empty_n, "start_for_rules_in_U0_empty_n");
    sc_trace(mVcdFile, rules_in_U0_start_full_n, "rules_in_U0_start_full_n");
    sc_trace(mVcdFile, rules_in_U0_start_write, "rules_in_U0_start_write");
    sc_trace(mVcdFile, ps2ip_fifo_U0_start_full_n, "ps2ip_fifo_U0_start_full_n");
    sc_trace(mVcdFile, ps2ip_fifo_U0_start_write, "ps2ip_fifo_U0_start_write");
    sc_trace(mVcdFile, start_for_ip2ps_fifo_U0_din, "start_for_ip2ps_fifo_U0_din");
    sc_trace(mVcdFile, start_for_ip2ps_fifo_U0_full_n, "start_for_ip2ps_fifo_U0_full_n");
    sc_trace(mVcdFile, start_for_ip2ps_fifo_U0_dout, "start_for_ip2ps_fifo_U0_dout");
    sc_trace(mVcdFile, start_for_ip2ps_fifo_U0_empty_n, "start_for_ip2ps_fifo_U0_empty_n");
    sc_trace(mVcdFile, ip2ps_fifo_U0_start_full_n, "ip2ps_fifo_U0_start_full_n");
    sc_trace(mVcdFile, ip2ps_fifo_U0_start_write, "ip2ps_fifo_U0_start_write");
    sc_trace(mVcdFile, counters_out_U0_start_full_n, "counters_out_U0_start_full_n");
    sc_trace(mVcdFile, counters_out_U0_start_write, "counters_out_U0_start_write");
#endif

    }
    mHdltvinHandle.open("my_ip_hls.hdltvin.dat");
    mHdltvoutHandle.open("my_ip_hls.hdltvout.dat");
}

my_ip_hls::~my_ip_hls() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete my_ip_hls_psAxiLite_s_axi_U;
    delete my_ip_hls_entry3_U0;
    delete my_ip_hls_entry83_U0;
    delete rules_in_U0;
    delete ps2ip_fifo_U0;
    delete core_U0;
    delete ip2ps_fifo_U0;
    delete counters_out_U0;
    delete rule0_V_c1_U;
    delete rule1_V_c2_U;
    delete rule2_V_c3_U;
    delete rule0_V_c_U;
    delete rule1_V_c_U;
    delete rule2_V_c_U;
    delete rule0Reg_V_channel_U;
    delete rule1Reg_V_channel_U;
    delete rule2Reg_V_channel_U;
    delete ps2ipFifo_V_data_V_U;
    delete ps2ipFifo_V_strb_V_U;
    delete ps2ipFifo_V_last_V_U;
    delete ip2psFifo_V_data_V_U;
    delete ip2psFifo_V_strb_V_U;
    delete ip2psFifo_V_last_V_U;
    delete cnt0Reg_V_U;
    delete cnt1Reg_V_U;
    delete cnt2Reg_V_U;
    delete start_for_my_ip_hbkb_U;
    delete start_for_rules_icud_U;
    delete start_for_ip2ps_fdEe_U;
}

void my_ip_hls::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void my_ip_hls::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_cnt0Reg_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (core_U0_ap_done.read() & 
             core_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_cnt0Reg_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_cnt0Reg_V = ap_sync_channel_write_cnt0Reg_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_cnt1Reg_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (core_U0_ap_done.read() & 
             core_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_cnt1Reg_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_cnt1Reg_V = ap_sync_channel_write_cnt1Reg_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_cnt2Reg_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (core_U0_ap_done.read() & 
             core_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_cnt2Reg_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_cnt2Reg_V = ap_sync_channel_write_cnt2Reg_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_rule0Reg_V_channel = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (rules_in_U0_ap_done.read() & 
             rules_in_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_rule0Reg_V_channel = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_rule0Reg_V_channel = ap_sync_channel_write_rule0Reg_V_channel.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_rule1Reg_V_channel = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (rules_in_U0_ap_done.read() & 
             rules_in_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_rule1Reg_V_channel = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_rule1Reg_V_channel = ap_sync_channel_write_rule1Reg_V_channel.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_rule2Reg_V_channel = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (rules_in_U0_ap_done.read() & 
             rules_in_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_rule2Reg_V_channel = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_rule2Reg_V_channel = ap_sync_channel_write_rule2Reg_V_channel.read();
        }
    }
}

void my_ip_hls::thread_ap_channel_done_cnt0Reg_V() {
    ap_channel_done_cnt0Reg_V = (core_U0_ap_done.read() & (ap_sync_reg_channel_write_cnt0Reg_V.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_channel_done_cnt1Reg_V() {
    ap_channel_done_cnt1Reg_V = (core_U0_ap_done.read() & (ap_sync_reg_channel_write_cnt1Reg_V.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_channel_done_cnt2Reg_V() {
    ap_channel_done_cnt2Reg_V = (core_U0_ap_done.read() & (ap_sync_reg_channel_write_cnt2Reg_V.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_channel_done_rule0Reg_V_channel() {
    ap_channel_done_rule0Reg_V_channel = (rules_in_U0_ap_done.read() & (ap_sync_reg_channel_write_rule0Reg_V_channel.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_channel_done_rule1Reg_V_channel() {
    ap_channel_done_rule1Reg_V_channel = (rules_in_U0_ap_done.read() & (ap_sync_reg_channel_write_rule1Reg_V_channel.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_channel_done_rule2Reg_V_channel() {
    ap_channel_done_rule2Reg_V_channel = (rules_in_U0_ap_done.read() & (ap_sync_reg_channel_write_rule2Reg_V_channel.read() ^ 
  ap_const_logic_1));
}

void my_ip_hls::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void my_ip_hls::thread_ap_sync_channel_write_cnt0Reg_V() {
    ap_sync_channel_write_cnt0Reg_V = ((ap_channel_done_cnt0Reg_V.read() & 
  cnt0Reg_V_full_n.read()) | ap_sync_reg_channel_write_cnt0Reg_V.read());
}

void my_ip_hls::thread_ap_sync_channel_write_cnt1Reg_V() {
    ap_sync_channel_write_cnt1Reg_V = ((ap_channel_done_cnt1Reg_V.read() & 
  cnt1Reg_V_full_n.read()) | ap_sync_reg_channel_write_cnt1Reg_V.read());
}

void my_ip_hls::thread_ap_sync_channel_write_cnt2Reg_V() {
    ap_sync_channel_write_cnt2Reg_V = ((ap_channel_done_cnt2Reg_V.read() & 
  cnt2Reg_V_full_n.read()) | ap_sync_reg_channel_write_cnt2Reg_V.read());
}

void my_ip_hls::thread_ap_sync_channel_write_rule0Reg_V_channel() {
    ap_sync_channel_write_rule0Reg_V_channel = ((ap_channel_done_rule0Reg_V_channel.read() & 
  rule0Reg_V_channel_full_n.read()) | ap_sync_reg_channel_write_rule0Reg_V_channel.read());
}

void my_ip_hls::thread_ap_sync_channel_write_rule1Reg_V_channel() {
    ap_sync_channel_write_rule1Reg_V_channel = ((ap_channel_done_rule1Reg_V_channel.read() & 
  rule1Reg_V_channel_full_n.read()) | ap_sync_reg_channel_write_rule1Reg_V_channel.read());
}

void my_ip_hls::thread_ap_sync_channel_write_rule2Reg_V_channel() {
    ap_sync_channel_write_rule2Reg_V_channel = ((ap_channel_done_rule2Reg_V_channel.read() & 
  rule2Reg_V_channel_full_n.read()) | ap_sync_reg_channel_write_rule2Reg_V_channel.read());
}

void my_ip_hls::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void my_ip_hls::thread_core_U0_ap_continue() {
    core_U0_ap_continue = (ap_sync_channel_write_cnt2Reg_V.read() & ap_sync_channel_write_cnt1Reg_V.read() & ap_sync_channel_write_cnt0Reg_V.read());
}

void my_ip_hls::thread_core_U0_ap_start() {
    core_U0_ap_start = (rule0Reg_V_channel_empty_n.read() & rule1Reg_V_channel_empty_n.read() & rule2Reg_V_channel_empty_n.read());
}

void my_ip_hls::thread_counters_out_U0_ap_continue() {
    counters_out_U0_ap_continue = ap_const_logic_1;
}

void my_ip_hls::thread_counters_out_U0_ap_start() {
    counters_out_U0_ap_start = (cnt0Reg_V_empty_n.read() & cnt1Reg_V_empty_n.read() & cnt2Reg_V_empty_n.read());
}

void my_ip_hls::thread_counters_out_U0_start_full_n() {
    counters_out_U0_start_full_n = ap_const_logic_1;
}

void my_ip_hls::thread_counters_out_U0_start_write() {
    counters_out_U0_start_write = ap_const_logic_0;
}

void my_ip_hls::thread_ip2ps_fifo_U0_ap_continue() {
    ip2ps_fifo_U0_ap_continue = ap_const_logic_1;
}

void my_ip_hls::thread_ip2ps_fifo_U0_ap_start() {
    ip2ps_fifo_U0_ap_start = start_for_ip2ps_fifo_U0_empty_n.read();
}

void my_ip_hls::thread_ip2ps_fifo_U0_start_full_n() {
    ip2ps_fifo_U0_start_full_n = ap_const_logic_1;
}

void my_ip_hls::thread_ip2ps_fifo_U0_start_write() {
    ip2ps_fifo_U0_start_write = ap_const_logic_0;
}

void my_ip_hls::thread_masterOut_TDATA() {
    masterOut_TDATA = ip2ps_fifo_U0_masterOut_TDATA.read();
}

void my_ip_hls::thread_masterOut_TLAST() {
    masterOut_TLAST = ip2ps_fifo_U0_masterOut_TLAST.read();
}

void my_ip_hls::thread_masterOut_TSTRB() {
    masterOut_TSTRB = ip2ps_fifo_U0_masterOut_TSTRB.read();
}

void my_ip_hls::thread_masterOut_TVALID() {
    masterOut_TVALID = ip2ps_fifo_U0_masterOut_TVALID.read();
}

void my_ip_hls::thread_my_ip_hls_entry3_U0_ap_continue() {
    my_ip_hls_entry3_U0_ap_continue = ap_const_logic_1;
}

void my_ip_hls::thread_my_ip_hls_entry3_U0_ap_start() {
    my_ip_hls_entry3_U0_ap_start = ap_const_logic_1;
}

void my_ip_hls::thread_my_ip_hls_entry83_U0_ap_continue() {
    my_ip_hls_entry83_U0_ap_continue = ap_const_logic_1;
}

void my_ip_hls::thread_my_ip_hls_entry83_U0_ap_start() {
    my_ip_hls_entry83_U0_ap_start = start_for_my_ip_hls_entry83_U0_empty_n.read();
}

void my_ip_hls::thread_ps2ip_fifo_U0_ap_continue() {
    ps2ip_fifo_U0_ap_continue = ap_const_logic_1;
}

void my_ip_hls::thread_ps2ip_fifo_U0_ap_start() {
    ps2ip_fifo_U0_ap_start = ap_const_logic_1;
}

void my_ip_hls::thread_ps2ip_fifo_U0_start_full_n() {
    ps2ip_fifo_U0_start_full_n = ap_const_logic_1;
}

void my_ip_hls::thread_ps2ip_fifo_U0_start_write() {
    ps2ip_fifo_U0_start_write = ap_const_logic_0;
}

void my_ip_hls::thread_rules_in_U0_ap_continue() {
    rules_in_U0_ap_continue = (ap_sync_channel_write_rule2Reg_V_channel.read() & ap_sync_channel_write_rule1Reg_V_channel.read() & ap_sync_channel_write_rule0Reg_V_channel.read());
}

void my_ip_hls::thread_rules_in_U0_ap_start() {
    rules_in_U0_ap_start = start_for_rules_in_U0_empty_n.read();
}

void my_ip_hls::thread_rules_in_U0_start_full_n() {
    rules_in_U0_start_full_n = ap_const_logic_1;
}

void my_ip_hls::thread_rules_in_U0_start_write() {
    rules_in_U0_start_write = ap_const_logic_0;
}

void my_ip_hls::thread_slaveIn_TREADY() {
    slaveIn_TREADY = ps2ip_fifo_U0_slaveIn_TREADY.read();
}

void my_ip_hls::thread_start_for_ip2ps_fifo_U0_din() {
    start_for_ip2ps_fifo_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void my_ip_hls::thread_start_for_my_ip_hls_entry83_U0_din() {
    start_for_my_ip_hls_entry83_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void my_ip_hls::thread_start_for_rules_in_U0_din() {
    start_for_rules_in_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void my_ip_hls::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_psAxiLite_AWVALID\" :  \"" << s_axi_psAxiLite_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_psAxiLite_AWREADY\" :  \"" << s_axi_psAxiLite_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_AWADDR\" :  \"" << s_axi_psAxiLite_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_WVALID\" :  \"" << s_axi_psAxiLite_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_WREADY\" :  \"" << s_axi_psAxiLite_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_WDATA\" :  \"" << s_axi_psAxiLite_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_WSTRB\" :  \"" << s_axi_psAxiLite_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_ARVALID\" :  \"" << s_axi_psAxiLite_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_ARREADY\" :  \"" << s_axi_psAxiLite_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_ARADDR\" :  \"" << s_axi_psAxiLite_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_RVALID\" :  \"" << s_axi_psAxiLite_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_RREADY\" :  \"" << s_axi_psAxiLite_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_RDATA\" :  \"" << s_axi_psAxiLite_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_RRESP\" :  \"" << s_axi_psAxiLite_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_BVALID\" :  \"" << s_axi_psAxiLite_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_psAxiLite_BREADY\" :  \"" << s_axi_psAxiLite_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_psAxiLite_BRESP\" :  \"" << s_axi_psAxiLite_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"slaveIn_TDATA\" :  \"" << slaveIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"slaveIn_TSTRB\" :  \"" << slaveIn_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"slaveIn_TLAST\" :  \"" << slaveIn_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"masterOut_TDATA\" :  \"" << masterOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"masterOut_TSTRB\" :  \"" << masterOut_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"masterOut_TLAST\" :  \"" << masterOut_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"slaveIn_TVALID\" :  \"" << slaveIn_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"slaveIn_TREADY\" :  \"" << slaveIn_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"masterOut_TVALID\" :  \"" << masterOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"masterOut_TREADY\" :  \"" << masterOut_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

