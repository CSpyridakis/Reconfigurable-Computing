-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_ip_hls is
port (
    slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    slaveIn_TVALID : IN STD_LOGIC;
    slaveIn_TREADY : OUT STD_LOGIC;
    masterOut_TVALID : OUT STD_LOGIC;
    masterOut_TREADY : IN STD_LOGIC );
end;


architecture behav of my_ip_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "my_ip_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.401000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=361,HLS_SYN_LUT=735}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_start : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_done : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_continue : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_idle : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_ready : STD_LOGIC;
    signal ps2ip_fifo_U0_start_out : STD_LOGIC;
    signal ps2ip_fifo_U0_start_write : STD_LOGIC;
    signal ps2ip_fifo_U0_slaveIn_TREADY : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_write : STD_LOGIC;
    signal core_U0_ap_start : STD_LOGIC;
    signal core_U0_ap_done : STD_LOGIC;
    signal core_U0_ap_continue : STD_LOGIC;
    signal core_U0_ap_idle : STD_LOGIC;
    signal core_U0_ap_ready : STD_LOGIC;
    signal core_U0_start_out : STD_LOGIC;
    signal core_U0_start_write : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_data_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_strb_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_last_V_read : STD_LOGIC;
    signal core_U0_ip2psFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_ip2psFifo_V_data_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal core_U0_ip2psFifo_V_strb_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal core_U0_ip2psFifo_V_last_V_write : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_start : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_done : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_continue : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_idle : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_ready : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_fifo_U0_masterOut_TVALID : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_fifo_U0_masterOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_fifo_U0_ip2psFifo_V_data_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_strb_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_last_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ps2ipFifo_V_data_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ipFifo_V_data_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ipFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ipFifo_V_last_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2psFifo_V_data_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2psFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2psFifo_V_last_V_empty_n : STD_LOGIC;
    signal start_for_core_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_core_U0_full_n : STD_LOGIC;
    signal start_for_core_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_core_U0_empty_n : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_full_n : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_empty_n : STD_LOGIC;
    signal ip2ps_fifo_U0_start_full_n : STD_LOGIC;
    signal ip2ps_fifo_U0_start_write : STD_LOGIC;

    component ps2ip_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        slaveIn_TVALID : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        slaveIn_TREADY : OUT STD_LOGIC;
        slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ps2ipFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_read : OUT STD_LOGIC;
        ip2psFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_write : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_write : OUT STD_LOGIC;
        ip2psFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component ip2ps_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        masterOut_TREADY : IN STD_LOGIC;
        masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        masterOut_TVALID : OUT STD_LOGIC;
        masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_read : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_read : OUT STD_LOGIC;
        ip2psFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w4_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_core_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ip2ps_fbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ps2ip_fifo_U0 : component ps2ip_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ps2ip_fifo_U0_ap_start,
        start_full_n => start_for_core_U0_full_n,
        ap_done => ps2ip_fifo_U0_ap_done,
        ap_continue => ps2ip_fifo_U0_ap_continue,
        ap_idle => ps2ip_fifo_U0_ap_idle,
        ap_ready => ps2ip_fifo_U0_ap_ready,
        slaveIn_TVALID => slaveIn_TVALID,
        start_out => ps2ip_fifo_U0_start_out,
        start_write => ps2ip_fifo_U0_start_write,
        slaveIn_TDATA => slaveIn_TDATA,
        slaveIn_TREADY => ps2ip_fifo_U0_slaveIn_TREADY,
        slaveIn_TSTRB => slaveIn_TSTRB,
        slaveIn_TLAST => slaveIn_TLAST,
        ps2ipFifo_V_data_V_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        ps2ipFifo_V_data_V_full_n => ps2ipFifo_V_data_V_full_n,
        ps2ipFifo_V_data_V_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        ps2ipFifo_V_strb_V_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        ps2ipFifo_V_strb_V_full_n => ps2ipFifo_V_strb_V_full_n,
        ps2ipFifo_V_strb_V_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        ps2ipFifo_V_last_V_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        ps2ipFifo_V_last_V_full_n => ps2ipFifo_V_last_V_full_n,
        ps2ipFifo_V_last_V_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write);

    core_U0 : component core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => core_U0_ap_start,
        start_full_n => start_for_ip2ps_fifo_U0_full_n,
        ap_done => core_U0_ap_done,
        ap_continue => core_U0_ap_continue,
        ap_idle => core_U0_ap_idle,
        ap_ready => core_U0_ap_ready,
        start_out => core_U0_start_out,
        start_write => core_U0_start_write,
        ps2ipFifo_V_data_V_dout => ps2ipFifo_V_data_V_dout,
        ps2ipFifo_V_data_V_empty_n => ps2ipFifo_V_data_V_empty_n,
        ps2ipFifo_V_data_V_read => core_U0_ps2ipFifo_V_data_V_read,
        ps2ipFifo_V_strb_V_dout => ps2ipFifo_V_strb_V_dout,
        ps2ipFifo_V_strb_V_empty_n => ps2ipFifo_V_strb_V_empty_n,
        ps2ipFifo_V_strb_V_read => core_U0_ps2ipFifo_V_strb_V_read,
        ps2ipFifo_V_last_V_dout => ps2ipFifo_V_last_V_dout,
        ps2ipFifo_V_last_V_empty_n => ps2ipFifo_V_last_V_empty_n,
        ps2ipFifo_V_last_V_read => core_U0_ps2ipFifo_V_last_V_read,
        ip2psFifo_V_data_V_din => core_U0_ip2psFifo_V_data_V_din,
        ip2psFifo_V_data_V_full_n => ip2psFifo_V_data_V_full_n,
        ip2psFifo_V_data_V_write => core_U0_ip2psFifo_V_data_V_write,
        ip2psFifo_V_strb_V_din => core_U0_ip2psFifo_V_strb_V_din,
        ip2psFifo_V_strb_V_full_n => ip2psFifo_V_strb_V_full_n,
        ip2psFifo_V_strb_V_write => core_U0_ip2psFifo_V_strb_V_write,
        ip2psFifo_V_last_V_din => core_U0_ip2psFifo_V_last_V_din,
        ip2psFifo_V_last_V_full_n => ip2psFifo_V_last_V_full_n,
        ip2psFifo_V_last_V_write => core_U0_ip2psFifo_V_last_V_write);

    ip2ps_fifo_U0 : component ip2ps_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip2ps_fifo_U0_ap_start,
        ap_done => ip2ps_fifo_U0_ap_done,
        ap_continue => ip2ps_fifo_U0_ap_continue,
        ap_idle => ip2ps_fifo_U0_ap_idle,
        ap_ready => ip2ps_fifo_U0_ap_ready,
        masterOut_TREADY => masterOut_TREADY,
        masterOut_TDATA => ip2ps_fifo_U0_masterOut_TDATA,
        masterOut_TVALID => ip2ps_fifo_U0_masterOut_TVALID,
        masterOut_TSTRB => ip2ps_fifo_U0_masterOut_TSTRB,
        masterOut_TLAST => ip2ps_fifo_U0_masterOut_TLAST,
        ip2psFifo_V_data_V_dout => ip2psFifo_V_data_V_dout,
        ip2psFifo_V_data_V_empty_n => ip2psFifo_V_data_V_empty_n,
        ip2psFifo_V_data_V_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read,
        ip2psFifo_V_strb_V_dout => ip2psFifo_V_strb_V_dout,
        ip2psFifo_V_strb_V_empty_n => ip2psFifo_V_strb_V_empty_n,
        ip2psFifo_V_strb_V_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read,
        ip2psFifo_V_last_V_dout => ip2psFifo_V_last_V_dout,
        ip2psFifo_V_last_V_empty_n => ip2psFifo_V_last_V_empty_n,
        ip2psFifo_V_last_V_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    ps2ipFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        if_full_n => ps2ipFifo_V_data_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        if_dout => ps2ipFifo_V_data_V_dout,
        if_empty_n => ps2ipFifo_V_data_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_data_V_read);

    ps2ipFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        if_full_n => ps2ipFifo_V_strb_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        if_dout => ps2ipFifo_V_strb_V_dout,
        if_empty_n => ps2ipFifo_V_strb_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_strb_V_read);

    ps2ipFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        if_full_n => ps2ipFifo_V_last_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write,
        if_dout => ps2ipFifo_V_last_V_dout,
        if_empty_n => ps2ipFifo_V_last_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_last_V_read);

    ip2psFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_data_V_din,
        if_full_n => ip2psFifo_V_data_V_full_n,
        if_write => core_U0_ip2psFifo_V_data_V_write,
        if_dout => ip2psFifo_V_data_V_dout,
        if_empty_n => ip2psFifo_V_data_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read);

    ip2psFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_strb_V_din,
        if_full_n => ip2psFifo_V_strb_V_full_n,
        if_write => core_U0_ip2psFifo_V_strb_V_write,
        if_dout => ip2psFifo_V_strb_V_dout,
        if_empty_n => ip2psFifo_V_strb_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read);

    ip2psFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_last_V_din,
        if_full_n => ip2psFifo_V_last_V_full_n,
        if_write => core_U0_ip2psFifo_V_last_V_write,
        if_dout => ip2psFifo_V_last_V_dout,
        if_empty_n => ip2psFifo_V_last_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    start_for_core_U0_U : component start_for_core_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_core_U0_din,
        if_full_n => start_for_core_U0_full_n,
        if_write => ps2ip_fifo_U0_start_write,
        if_dout => start_for_core_U0_dout,
        if_empty_n => start_for_core_U0_empty_n,
        if_read => core_U0_ap_ready);

    start_for_ip2ps_fbkb_U : component start_for_ip2ps_fbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ip2ps_fifo_U0_din,
        if_full_n => start_for_ip2ps_fifo_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_ip2ps_fifo_U0_dout,
        if_empty_n => start_for_ip2ps_fifo_U0_empty_n,
        if_read => ip2ps_fifo_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    core_U0_ap_continue <= ap_const_logic_1;
    core_U0_ap_start <= start_for_core_U0_empty_n;
    ip2ps_fifo_U0_ap_continue <= ap_const_logic_1;
    ip2ps_fifo_U0_ap_start <= start_for_ip2ps_fifo_U0_empty_n;
    ip2ps_fifo_U0_start_full_n <= ap_const_logic_1;
    ip2ps_fifo_U0_start_write <= ap_const_logic_0;
    masterOut_TDATA <= ip2ps_fifo_U0_masterOut_TDATA;
    masterOut_TLAST <= ip2ps_fifo_U0_masterOut_TLAST;
    masterOut_TSTRB <= ip2ps_fifo_U0_masterOut_TSTRB;
    masterOut_TVALID <= ip2ps_fifo_U0_masterOut_TVALID;
    ps2ip_fifo_U0_ap_continue <= ap_const_logic_1;
    ps2ip_fifo_U0_ap_start <= ap_const_logic_1;
    slaveIn_TREADY <= ps2ip_fifo_U0_slaveIn_TREADY;
    start_for_core_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ip2ps_fifo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
