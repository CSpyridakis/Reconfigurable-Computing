-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    ps2ipFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ps2ipFifo_V_data_V_empty_n : IN STD_LOGIC;
    ps2ipFifo_V_data_V_read : OUT STD_LOGIC;
    ps2ipFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    ps2ipFifo_V_strb_V_empty_n : IN STD_LOGIC;
    ps2ipFifo_V_strb_V_read : OUT STD_LOGIC;
    ps2ipFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    ps2ipFifo_V_last_V_empty_n : IN STD_LOGIC;
    ps2ipFifo_V_last_V_read : OUT STD_LOGIC;
    ip2psFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ip2psFifo_V_data_V_full_n : IN STD_LOGIC;
    ip2psFifo_V_data_V_write : OUT STD_LOGIC;
    ip2psFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    ip2psFifo_V_strb_V_full_n : IN STD_LOGIC;
    ip2psFifo_V_strb_V_write : OUT STD_LOGIC;
    ip2psFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    ip2psFifo_V_last_V_full_n : IN STD_LOGIC;
    ip2psFifo_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ps2ipFifo_V_data_V0_status : STD_LOGIC;
    signal tmp_nbreadreq_fu_38_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ip2psFifo_V_data_V1_status : STD_LOGIC;
    signal tmp_reg_85 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ps2ipFifo_V_data_V_blk_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_blk_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_blk_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_blk_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_blk_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_strb_V_reg_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_reg_99 : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ipFifo_V_data_V0_update : STD_LOGIC;
    signal ip2psFifo_V_data_V1_update : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and (tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                tmp_data_V_reg_89 <= ps2ipFifo_V_data_V_dout;
                tmp_last_V_reg_99 <= ps2ipFifo_V_last_V_dout;
                tmp_strb_V_reg_94 <= ps2ipFifo_V_strb_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                tmp_reg_85 <= tmp_nbreadreq_fu_38_p5;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_iter0_fsm, ps2ipFifo_V_data_V0_status, tmp_nbreadreq_fu_38_p5, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, ps2ipFifo_V_data_V0_status, tmp_nbreadreq_fu_38_p5, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and not(((ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0)))) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0))))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg, ps2ipFifo_V_data_V0_status, tmp_nbreadreq_fu_38_p5)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ip2psFifo_V_data_V1_status, tmp_reg_85)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_iter0_fsm_state1, ps2ipFifo_V_data_V0_status, tmp_nbreadreq_fu_38_p5, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ip2psFifo_V_data_V1_status <= (ip2psFifo_V_strb_V_full_n and ip2psFifo_V_last_V_full_n and ip2psFifo_V_data_V_full_n);

    ip2psFifo_V_data_V1_update_assign_proc : process(ap_done_reg, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0)))) and (tmp_reg_85 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2psFifo_V_data_V1_update <= ap_const_logic_1;
        else 
            ip2psFifo_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    ip2psFifo_V_data_V_blk_n_assign_proc : process(tmp_reg_85, ap_CS_iter1_fsm_state2, ip2psFifo_V_data_V_full_n)
    begin
        if (((tmp_reg_85 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2psFifo_V_data_V_blk_n <= ip2psFifo_V_data_V_full_n;
        else 
            ip2psFifo_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_data_V_din <= tmp_data_V_reg_89;
    ip2psFifo_V_data_V_write <= ip2psFifo_V_data_V1_update;

    ip2psFifo_V_last_V_blk_n_assign_proc : process(tmp_reg_85, ap_CS_iter1_fsm_state2, ip2psFifo_V_last_V_full_n)
    begin
        if (((tmp_reg_85 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2psFifo_V_last_V_blk_n <= ip2psFifo_V_last_V_full_n;
        else 
            ip2psFifo_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_last_V_din <= tmp_last_V_reg_99;
    ip2psFifo_V_last_V_write <= ip2psFifo_V_data_V1_update;

    ip2psFifo_V_strb_V_blk_n_assign_proc : process(tmp_reg_85, ap_CS_iter1_fsm_state2, ip2psFifo_V_strb_V_full_n)
    begin
        if (((tmp_reg_85 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ip2psFifo_V_strb_V_blk_n <= ip2psFifo_V_strb_V_full_n;
        else 
            ip2psFifo_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ip2psFifo_V_strb_V_din <= tmp_strb_V_reg_94;
    ip2psFifo_V_strb_V_write <= ip2psFifo_V_data_V1_update;
    ps2ipFifo_V_data_V0_status <= (ps2ipFifo_V_strb_V_empty_n and ps2ipFifo_V_last_V_empty_n and ps2ipFifo_V_data_V_empty_n);

    ps2ipFifo_V_data_V0_update_assign_proc : process(real_start, ap_done_reg, ap_CS_iter0_fsm_state1, ps2ipFifo_V_data_V0_status, tmp_nbreadreq_fu_38_p5, ip2psFifo_V_data_V1_status, tmp_reg_85, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_reg_85 = ap_const_lv1_1) and (ip2psFifo_V_data_V1_status = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ps2ipFifo_V_data_V0_status = ap_const_logic_0)))) and (tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ps2ipFifo_V_data_V0_update <= ap_const_logic_1;
        else 
            ps2ipFifo_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    ps2ipFifo_V_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_38_p5, ps2ipFifo_V_data_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (real_start = ap_const_logic_1))) then 
            ps2ipFifo_V_data_V_blk_n <= ps2ipFifo_V_data_V_empty_n;
        else 
            ps2ipFifo_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ps2ipFifo_V_data_V_read <= ps2ipFifo_V_data_V0_update;

    ps2ipFifo_V_last_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_38_p5, ps2ipFifo_V_last_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (real_start = ap_const_logic_1))) then 
            ps2ipFifo_V_last_V_blk_n <= ps2ipFifo_V_last_V_empty_n;
        else 
            ps2ipFifo_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ps2ipFifo_V_last_V_read <= ps2ipFifo_V_data_V0_update;

    ps2ipFifo_V_strb_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_iter0_fsm_state1, tmp_nbreadreq_fu_38_p5, ps2ipFifo_V_strb_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_38_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (real_start = ap_const_logic_1))) then 
            ps2ipFifo_V_strb_V_blk_n <= ps2ipFifo_V_strb_V_empty_n;
        else 
            ps2ipFifo_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ps2ipFifo_V_strb_V_read <= ps2ipFifo_V_data_V0_update;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_38_p5 <= (0=>(ps2ipFifo_V_strb_V_empty_n and ps2ipFifo_V_last_V_empty_n and ps2ipFifo_V_data_V_empty_n), others=>'-');
end behav;
