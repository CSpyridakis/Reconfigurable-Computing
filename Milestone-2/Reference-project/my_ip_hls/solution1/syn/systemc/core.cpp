// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "core.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic core::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic core::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> core::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> core::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> core::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<32> core::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> core::ap_const_lv1_1 = "1";
const sc_lv<32> core::ap_const_lv32_1 = "1";
const bool core::ap_const_boolean_1 = true;

core::core(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ps2ipFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ps2ipFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ip2psFifo_V_data_V1_status);
    sensitive << ( ip2psFifo_V_data_V_full_n );
    sensitive << ( ip2psFifo_V_strb_V_full_n );
    sensitive << ( ip2psFifo_V_last_V_full_n );

    SC_METHOD(thread_ip2psFifo_V_data_V1_update);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ip2psFifo_V_data_V_blk_n);
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2psFifo_V_data_V_full_n );

    SC_METHOD(thread_ip2psFifo_V_data_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( tmp_data_V_reg_89 );

    SC_METHOD(thread_ip2psFifo_V_data_V_write);
    sensitive << ( ip2psFifo_V_data_V1_update );

    SC_METHOD(thread_ip2psFifo_V_last_V_blk_n);
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2psFifo_V_last_V_full_n );

    SC_METHOD(thread_ip2psFifo_V_last_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( tmp_last_V_reg_99 );

    SC_METHOD(thread_ip2psFifo_V_last_V_write);
    sensitive << ( ip2psFifo_V_data_V1_update );

    SC_METHOD(thread_ip2psFifo_V_strb_V_blk_n);
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ip2psFifo_V_strb_V_full_n );

    SC_METHOD(thread_ip2psFifo_V_strb_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( tmp_strb_V_reg_94 );

    SC_METHOD(thread_ip2psFifo_V_strb_V_write);
    sensitive << ( ip2psFifo_V_data_V1_update );

    SC_METHOD(thread_ps2ipFifo_V_data_V0_status);
    sensitive << ( ps2ipFifo_V_data_V_empty_n );
    sensitive << ( ps2ipFifo_V_strb_V_empty_n );
    sensitive << ( ps2ipFifo_V_last_V_empty_n );

    SC_METHOD(thread_ps2ipFifo_V_data_V0_update);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ps2ipFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ps2ipFifo_V_data_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ps2ipFifo_V_data_V_empty_n );

    SC_METHOD(thread_ps2ipFifo_V_data_V_read);
    sensitive << ( ps2ipFifo_V_data_V0_update );

    SC_METHOD(thread_ps2ipFifo_V_last_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ps2ipFifo_V_last_V_empty_n );

    SC_METHOD(thread_ps2ipFifo_V_last_V_read);
    sensitive << ( ps2ipFifo_V_data_V0_update );

    SC_METHOD(thread_ps2ipFifo_V_strb_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ps2ipFifo_V_strb_V_empty_n );

    SC_METHOD(thread_ps2ipFifo_V_strb_V_read);
    sensitive << ( ps2ipFifo_V_data_V0_update );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_nbreadreq_fu_38_p5);
    sensitive << ( ps2ipFifo_V_data_V_empty_n );
    sensitive << ( ps2ipFifo_V_strb_V_empty_n );
    sensitive << ( ps2ipFifo_V_last_V_empty_n );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ps2ipFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ps2ipFifo_V_data_V0_status );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ip2psFifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "core_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_dout, "(port)ps2ipFifo_V_data_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_empty_n, "(port)ps2ipFifo_V_data_V_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_read, "(port)ps2ipFifo_V_data_V_read");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_dout, "(port)ps2ipFifo_V_strb_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_empty_n, "(port)ps2ipFifo_V_strb_V_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_read, "(port)ps2ipFifo_V_strb_V_read");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_dout, "(port)ps2ipFifo_V_last_V_dout");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_empty_n, "(port)ps2ipFifo_V_last_V_empty_n");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_read, "(port)ps2ipFifo_V_last_V_read");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_din, "(port)ip2psFifo_V_data_V_din");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_full_n, "(port)ip2psFifo_V_data_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_write, "(port)ip2psFifo_V_data_V_write");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_din, "(port)ip2psFifo_V_strb_V_din");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_full_n, "(port)ip2psFifo_V_strb_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_write, "(port)ip2psFifo_V_strb_V_write");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_din, "(port)ip2psFifo_V_last_V_din");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_full_n, "(port)ip2psFifo_V_last_V_full_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_write, "(port)ip2psFifo_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V0_status, "ps2ipFifo_V_data_V0_status");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_38_p5, "tmp_nbreadreq_fu_38_p5");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ip2psFifo_V_data_V1_status, "ip2psFifo_V_data_V1_status");
    sc_trace(mVcdFile, tmp_reg_85, "tmp_reg_85");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V_blk_n, "ps2ipFifo_V_data_V_blk_n");
    sc_trace(mVcdFile, ps2ipFifo_V_strb_V_blk_n, "ps2ipFifo_V_strb_V_blk_n");
    sc_trace(mVcdFile, ps2ipFifo_V_last_V_blk_n, "ps2ipFifo_V_last_V_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_data_V_blk_n, "ip2psFifo_V_data_V_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_strb_V_blk_n, "ip2psFifo_V_strb_V_blk_n");
    sc_trace(mVcdFile, ip2psFifo_V_last_V_blk_n, "ip2psFifo_V_last_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_reg_89, "tmp_data_V_reg_89");
    sc_trace(mVcdFile, tmp_strb_V_reg_94, "tmp_strb_V_reg_94");
    sc_trace(mVcdFile, tmp_last_V_reg_99, "tmp_last_V_reg_99");
    sc_trace(mVcdFile, ps2ipFifo_V_data_V0_update, "ps2ipFifo_V_data_V0_update");
    sc_trace(mVcdFile, ip2psFifo_V_data_V1_update, "ip2psFifo_V_data_V1_update");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
#endif

    }
}

core::~core() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void core::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        tmp_data_V_reg_89 = ps2ipFifo_V_data_V_dout.read();
        tmp_last_V_reg_99 = ps2ipFifo_V_last_V_dout.read();
        tmp_strb_V_reg_94 = ps2ipFifo_V_strb_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        tmp_reg_85 = tmp_nbreadreq_fu_38_p5.read();
    }
}

void core::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void core::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void core::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void core::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void core::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()));
}

void core::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void core::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void core::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void core::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void core::thread_ip2psFifo_V_data_V1_status() {
    ip2psFifo_V_data_V1_status = (ip2psFifo_V_data_V_full_n.read() & ip2psFifo_V_strb_V_full_n.read() & ip2psFifo_V_last_V_full_n.read());
}

void core::thread_ip2psFifo_V_data_V1_update() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()))))) {
        ip2psFifo_V_data_V1_update = ap_const_logic_1;
    } else {
        ip2psFifo_V_data_V1_update = ap_const_logic_0;
    }
}

void core::thread_ip2psFifo_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
        ip2psFifo_V_data_V_blk_n = ip2psFifo_V_data_V_full_n.read();
    } else {
        ip2psFifo_V_data_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ip2psFifo_V_data_V_din() {
    ip2psFifo_V_data_V_din = tmp_data_V_reg_89.read();
}

void core::thread_ip2psFifo_V_data_V_write() {
    ip2psFifo_V_data_V_write = ip2psFifo_V_data_V1_update.read();
}

void core::thread_ip2psFifo_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
        ip2psFifo_V_last_V_blk_n = ip2psFifo_V_last_V_full_n.read();
    } else {
        ip2psFifo_V_last_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ip2psFifo_V_last_V_din() {
    ip2psFifo_V_last_V_din = tmp_last_V_reg_99.read();
}

void core::thread_ip2psFifo_V_last_V_write() {
    ip2psFifo_V_last_V_write = ip2psFifo_V_data_V1_update.read();
}

void core::thread_ip2psFifo_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
        ip2psFifo_V_strb_V_blk_n = ip2psFifo_V_strb_V_full_n.read();
    } else {
        ip2psFifo_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ip2psFifo_V_strb_V_din() {
    ip2psFifo_V_strb_V_din = tmp_strb_V_reg_94.read();
}

void core::thread_ip2psFifo_V_strb_V_write() {
    ip2psFifo_V_strb_V_write = ip2psFifo_V_data_V1_update.read();
}

void core::thread_ps2ipFifo_V_data_V0_status() {
    ps2ipFifo_V_data_V0_status = (ps2ipFifo_V_data_V_empty_n.read() & ps2ipFifo_V_strb_V_empty_n.read() & ps2ipFifo_V_last_V_empty_n.read());
}

void core::thread_ps2ipFifo_V_data_V0_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        ps2ipFifo_V_data_V0_update = ap_const_logic_1;
    } else {
        ps2ipFifo_V_data_V0_update = ap_const_logic_0;
    }
}

void core::thread_ps2ipFifo_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ps2ipFifo_V_data_V_blk_n = ps2ipFifo_V_data_V_empty_n.read();
    } else {
        ps2ipFifo_V_data_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ps2ipFifo_V_data_V_read() {
    ps2ipFifo_V_data_V_read = ps2ipFifo_V_data_V0_update.read();
}

void core::thread_ps2ipFifo_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ps2ipFifo_V_last_V_blk_n = ps2ipFifo_V_last_V_empty_n.read();
    } else {
        ps2ipFifo_V_last_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ps2ipFifo_V_last_V_read() {
    ps2ipFifo_V_last_V_read = ps2ipFifo_V_data_V0_update.read();
}

void core::thread_ps2ipFifo_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ps2ipFifo_V_strb_V_blk_n = ps2ipFifo_V_strb_V_empty_n.read();
    } else {
        ps2ipFifo_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void core::thread_ps2ipFifo_V_strb_V_read() {
    ps2ipFifo_V_strb_V_read = ps2ipFifo_V_data_V0_update.read();
}

void core::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void core::thread_start_out() {
    start_out = real_start.read();
}

void core::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void core::thread_tmp_nbreadreq_fu_38_p5() {
    tmp_nbreadreq_fu_38_p5 =  (sc_lv<1>) ((ps2ipFifo_V_data_V_empty_n.read() & ps2ipFifo_V_strb_V_empty_n.read() & ps2ipFifo_V_last_V_empty_n.read()));
}

void core::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm = "X";
            break;
    }
}

void core::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()))) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
     esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || 
    esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, ps2ipFifo_V_data_V0_status.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ip2psFifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

