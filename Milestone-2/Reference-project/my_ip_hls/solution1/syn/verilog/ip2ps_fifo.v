// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ip2ps_fifo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        masterOut_TREADY,
        masterOut_TDATA,
        masterOut_TVALID,
        masterOut_TSTRB,
        masterOut_TLAST,
        ip2psFifo_V_data_V_dout,
        ip2psFifo_V_data_V_empty_n,
        ip2psFifo_V_data_V_read,
        ip2psFifo_V_strb_V_dout,
        ip2psFifo_V_strb_V_empty_n,
        ip2psFifo_V_strb_V_read,
        ip2psFifo_V_last_V_dout,
        ip2psFifo_V_last_V_empty_n,
        ip2psFifo_V_last_V_read
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   masterOut_TREADY;
output  [31:0] masterOut_TDATA;
output   masterOut_TVALID;
output  [3:0] masterOut_TSTRB;
output  [0:0] masterOut_TLAST;
input  [31:0] ip2psFifo_V_data_V_dout;
input   ip2psFifo_V_data_V_empty_n;
output   ip2psFifo_V_data_V_read;
input  [3:0] ip2psFifo_V_strb_V_dout;
input   ip2psFifo_V_strb_V_empty_n;
output   ip2psFifo_V_strb_V_read;
input  [0:0] ip2psFifo_V_last_V_dout;
input   ip2psFifo_V_last_V_empty_n;
output   ip2psFifo_V_last_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
wire    ip2psFifo_V_data_V0_status;
wire   [0:0] tmp_nbreadreq_fu_42_p5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ip2ps_V_data_V_1_ack_in;
reg   [0:0] tmp_reg_89;
reg    ap_block_state2_io;
wire    ap_CS_iter1_fsm_state2;
wire    ip2ps_V_strb_V_1_ack_in;
wire    ip2ps_V_last_V_1_ack_in;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_89;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg   [31:0] ip2ps_V_data_V_1_data_out;
reg    ip2ps_V_data_V_1_vld_in;
wire    ip2ps_V_data_V_1_vld_out;
wire    ip2ps_V_data_V_1_ack_out;
reg   [31:0] ip2ps_V_data_V_1_payload_A;
reg   [31:0] ip2ps_V_data_V_1_payload_B;
reg    ip2ps_V_data_V_1_sel_rd;
reg    ip2ps_V_data_V_1_sel_wr;
wire    ip2ps_V_data_V_1_sel;
wire    ip2ps_V_data_V_1_load_A;
wire    ip2ps_V_data_V_1_load_B;
reg   [1:0] ip2ps_V_data_V_1_state;
wire    ip2ps_V_data_V_1_state_cmp_full;
reg   [3:0] ip2ps_V_strb_V_1_data_out;
reg    ip2ps_V_strb_V_1_vld_in;
wire    ip2ps_V_strb_V_1_vld_out;
wire    ip2ps_V_strb_V_1_ack_out;
reg   [3:0] ip2ps_V_strb_V_1_payload_A;
reg   [3:0] ip2ps_V_strb_V_1_payload_B;
reg    ip2ps_V_strb_V_1_sel_rd;
reg    ip2ps_V_strb_V_1_sel_wr;
wire    ip2ps_V_strb_V_1_sel;
wire    ip2ps_V_strb_V_1_load_A;
wire    ip2ps_V_strb_V_1_load_B;
reg   [1:0] ip2ps_V_strb_V_1_state;
wire    ip2ps_V_strb_V_1_state_cmp_full;
reg   [0:0] ip2ps_V_last_V_1_data_out;
reg    ip2ps_V_last_V_1_vld_in;
wire    ip2ps_V_last_V_1_vld_out;
wire    ip2ps_V_last_V_1_ack_out;
reg   [0:0] ip2ps_V_last_V_1_payload_A;
reg   [0:0] ip2ps_V_last_V_1_payload_B;
reg    ip2ps_V_last_V_1_sel_rd;
reg    ip2ps_V_last_V_1_sel_wr;
wire    ip2ps_V_last_V_1_sel;
wire    ip2ps_V_last_V_1_load_A;
wire    ip2ps_V_last_V_1_load_B;
reg   [1:0] ip2ps_V_last_V_1_state;
wire    ip2ps_V_last_V_1_state_cmp_full;
reg    masterOut_TDATA_blk_n;
reg    ip2psFifo_V_data_V_blk_n;
reg    ip2psFifo_V_strb_V_blk_n;
reg    ip2psFifo_V_last_V_blk_n;
reg   [31:0] tmp_data_V_reg_93;
reg   [3:0] tmp_strb_V_reg_98;
reg   [0:0] tmp_last_V_reg_103;
reg    ip2psFifo_V_data_V0_update;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ip2ps_V_data_V_1_sel_rd = 1'b0;
#0 ip2ps_V_data_V_1_sel_wr = 1'b0;
#0 ip2ps_V_data_V_1_state = 2'd0;
#0 ip2ps_V_strb_V_1_sel_rd = 1'b0;
#0 ip2ps_V_strb_V_1_sel_wr = 1'b0;
#0 ip2ps_V_strb_V_1_state = 2'd0;
#0 ip2ps_V_last_V_1_sel_rd = 1'b0;
#0 ip2ps_V_last_V_1_sel_wr = 1'b0;
#0 ip2ps_V_last_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ip2ps_V_data_V_1_ack_out == 1'b1) & (ip2ps_V_data_V_1_vld_out == 1'b1))) begin
            ip2ps_V_data_V_1_sel_rd <= ~ip2ps_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((ip2ps_V_data_V_1_vld_in == 1'b1) & (ip2ps_V_data_V_1_ack_in == 1'b1))) begin
            ip2ps_V_data_V_1_sel_wr <= ~ip2ps_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((ip2ps_V_data_V_1_vld_in == 1'b0) & (ip2ps_V_data_V_1_state == 2'd2)) | ((ip2ps_V_data_V_1_vld_in == 1'b0) & (ip2ps_V_data_V_1_ack_out == 1'b1) & (ip2ps_V_data_V_1_state == 2'd3)))) begin
            ip2ps_V_data_V_1_state <= 2'd2;
        end else if ((((ip2ps_V_data_V_1_ack_out == 1'b0) & (ip2ps_V_data_V_1_state == 2'd1)) | ((ip2ps_V_data_V_1_ack_out == 1'b0) & (ip2ps_V_data_V_1_vld_in == 1'b1) & (ip2ps_V_data_V_1_state == 2'd3)))) begin
            ip2ps_V_data_V_1_state <= 2'd1;
        end else if (((~((ip2ps_V_data_V_1_vld_in == 1'b0) & (ip2ps_V_data_V_1_ack_out == 1'b1)) & ~((ip2ps_V_data_V_1_ack_out == 1'b0) & (ip2ps_V_data_V_1_vld_in == 1'b1)) & (ip2ps_V_data_V_1_state == 2'd3)) | ((ip2ps_V_data_V_1_ack_out == 1'b1) & (ip2ps_V_data_V_1_state == 2'd1)) | ((ip2ps_V_data_V_1_vld_in == 1'b1) & (ip2ps_V_data_V_1_state == 2'd2)))) begin
            ip2ps_V_data_V_1_state <= 2'd3;
        end else begin
            ip2ps_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ip2ps_V_last_V_1_ack_out == 1'b1) & (ip2ps_V_last_V_1_vld_out == 1'b1))) begin
            ip2ps_V_last_V_1_sel_rd <= ~ip2ps_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((ip2ps_V_last_V_1_ack_in == 1'b1) & (ip2ps_V_last_V_1_vld_in == 1'b1))) begin
            ip2ps_V_last_V_1_sel_wr <= ~ip2ps_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((ip2ps_V_last_V_1_vld_in == 1'b0) & (ip2ps_V_last_V_1_state == 2'd2)) | ((ip2ps_V_last_V_1_vld_in == 1'b0) & (ip2ps_V_last_V_1_ack_out == 1'b1) & (ip2ps_V_last_V_1_state == 2'd3)))) begin
            ip2ps_V_last_V_1_state <= 2'd2;
        end else if ((((ip2ps_V_last_V_1_ack_out == 1'b0) & (ip2ps_V_last_V_1_state == 2'd1)) | ((ip2ps_V_last_V_1_ack_out == 1'b0) & (ip2ps_V_last_V_1_vld_in == 1'b1) & (ip2ps_V_last_V_1_state == 2'd3)))) begin
            ip2ps_V_last_V_1_state <= 2'd1;
        end else if (((~((ip2ps_V_last_V_1_vld_in == 1'b0) & (ip2ps_V_last_V_1_ack_out == 1'b1)) & ~((ip2ps_V_last_V_1_ack_out == 1'b0) & (ip2ps_V_last_V_1_vld_in == 1'b1)) & (ip2ps_V_last_V_1_state == 2'd3)) | ((ip2ps_V_last_V_1_ack_out == 1'b1) & (ip2ps_V_last_V_1_state == 2'd1)) | ((ip2ps_V_last_V_1_vld_in == 1'b1) & (ip2ps_V_last_V_1_state == 2'd2)))) begin
            ip2ps_V_last_V_1_state <= 2'd3;
        end else begin
            ip2ps_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ip2ps_V_strb_V_1_ack_out == 1'b1) & (ip2ps_V_strb_V_1_vld_out == 1'b1))) begin
            ip2ps_V_strb_V_1_sel_rd <= ~ip2ps_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((ip2ps_V_strb_V_1_ack_in == 1'b1) & (ip2ps_V_strb_V_1_vld_in == 1'b1))) begin
            ip2ps_V_strb_V_1_sel_wr <= ~ip2ps_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip2ps_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((ip2ps_V_strb_V_1_vld_in == 1'b0) & (ip2ps_V_strb_V_1_state == 2'd2)) | ((ip2ps_V_strb_V_1_vld_in == 1'b0) & (ip2ps_V_strb_V_1_ack_out == 1'b1) & (ip2ps_V_strb_V_1_state == 2'd3)))) begin
            ip2ps_V_strb_V_1_state <= 2'd2;
        end else if ((((ip2ps_V_strb_V_1_ack_out == 1'b0) & (ip2ps_V_strb_V_1_state == 2'd1)) | ((ip2ps_V_strb_V_1_ack_out == 1'b0) & (ip2ps_V_strb_V_1_vld_in == 1'b1) & (ip2ps_V_strb_V_1_state == 2'd3)))) begin
            ip2ps_V_strb_V_1_state <= 2'd1;
        end else if (((~((ip2ps_V_strb_V_1_vld_in == 1'b0) & (ip2ps_V_strb_V_1_ack_out == 1'b1)) & ~((ip2ps_V_strb_V_1_ack_out == 1'b0) & (ip2ps_V_strb_V_1_vld_in == 1'b1)) & (ip2ps_V_strb_V_1_state == 2'd3)) | ((ip2ps_V_strb_V_1_ack_out == 1'b1) & (ip2ps_V_strb_V_1_state == 2'd1)) | ((ip2ps_V_strb_V_1_vld_in == 1'b1) & (ip2ps_V_strb_V_1_state == 2'd2)))) begin
            ip2ps_V_strb_V_1_state <= 2'd3;
        end else begin
            ip2ps_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_reg_pp0_iter1_tmp_reg_89 <= tmp_reg_89;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_data_V_1_load_A == 1'b1)) begin
        ip2ps_V_data_V_1_payload_A <= tmp_data_V_reg_93;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_data_V_1_load_B == 1'b1)) begin
        ip2ps_V_data_V_1_payload_B <= tmp_data_V_reg_93;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_last_V_1_load_A == 1'b1)) begin
        ip2ps_V_last_V_1_payload_A <= tmp_last_V_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_last_V_1_load_B == 1'b1)) begin
        ip2ps_V_last_V_1_payload_B <= tmp_last_V_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_strb_V_1_load_A == 1'b1)) begin
        ip2ps_V_strb_V_1_payload_A <= tmp_strb_V_reg_98;
    end
end

always @ (posedge ap_clk) begin
    if ((ip2ps_V_strb_V_1_load_B == 1'b1)) begin
        ip2ps_V_strb_V_1_payload_B <= tmp_strb_V_reg_98;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_data_V_reg_93 <= ip2psFifo_V_data_V_dout;
        tmp_last_V_reg_103 <= ip2psFifo_V_last_V_dout;
        tmp_strb_V_reg_98 <= ip2psFifo_V_strb_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_reg_89 <= tmp_nbreadreq_fu_42_p5;
    end
end

always @ (*) begin
    if ((~((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ip2psFifo_V_data_V0_update = 1'b1;
    end else begin
        ip2psFifo_V_data_V0_update = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        ip2psFifo_V_data_V_blk_n = ip2psFifo_V_data_V_empty_n;
    end else begin
        ip2psFifo_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        ip2psFifo_V_last_V_blk_n = ip2psFifo_V_last_V_empty_n;
    end else begin
        ip2psFifo_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_42_p5 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        ip2psFifo_V_strb_V_blk_n = ip2psFifo_V_strb_V_empty_n;
    end else begin
        ip2psFifo_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ip2ps_V_data_V_1_sel == 1'b1)) begin
        ip2ps_V_data_V_1_data_out = ip2ps_V_data_V_1_payload_B;
    end else begin
        ip2ps_V_data_V_1_data_out = ip2ps_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ip2ps_V_data_V_1_vld_in = 1'b1;
    end else begin
        ip2ps_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((ip2ps_V_last_V_1_sel == 1'b1)) begin
        ip2ps_V_last_V_1_data_out = ip2ps_V_last_V_1_payload_B;
    end else begin
        ip2ps_V_last_V_1_data_out = ip2ps_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ip2ps_V_last_V_1_vld_in = 1'b1;
    end else begin
        ip2ps_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((ip2ps_V_strb_V_1_sel == 1'b1)) begin
        ip2ps_V_strb_V_1_data_out = ip2ps_V_strb_V_1_payload_B;
    end else begin
        ip2ps_V_strb_V_1_data_out = ip2ps_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ip2ps_V_strb_V_1_vld_in = 1'b1;
    end else begin
        ip2ps_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter1_tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((tmp_reg_89 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        masterOut_TDATA_blk_n = ip2ps_V_data_V_1_state[1'd1];
    end else begin
        masterOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & ~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ip2psFifo_V_data_V0_status == 1'b0) & (tmp_nbreadreq_fu_42_p5 == 1'd1)));
end

always @ (*) begin
    ap_block_state2_io = ((ip2ps_V_data_V_1_ack_in == 1'b0) & (tmp_reg_89 == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ip2ps_V_data_V_1_ack_in == 1'b0) & (ap_reg_pp0_iter1_tmp_reg_89 == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ip2ps_V_last_V_1_ack_in == 1'b0) | (ip2ps_V_strb_V_1_ack_in == 1'b0) | (ip2ps_V_data_V_1_ack_in == 1'b0));
end

assign ip2psFifo_V_data_V0_status = (ip2psFifo_V_strb_V_empty_n & ip2psFifo_V_last_V_empty_n & ip2psFifo_V_data_V_empty_n);

assign ip2psFifo_V_data_V_read = ip2psFifo_V_data_V0_update;

assign ip2psFifo_V_last_V_read = ip2psFifo_V_data_V0_update;

assign ip2psFifo_V_strb_V_read = ip2psFifo_V_data_V0_update;

assign ip2ps_V_data_V_1_ack_in = ip2ps_V_data_V_1_state[1'd1];

assign ip2ps_V_data_V_1_ack_out = masterOut_TREADY;

assign ip2ps_V_data_V_1_load_A = (ip2ps_V_data_V_1_state_cmp_full & ~ip2ps_V_data_V_1_sel_wr);

assign ip2ps_V_data_V_1_load_B = (ip2ps_V_data_V_1_state_cmp_full & ip2ps_V_data_V_1_sel_wr);

assign ip2ps_V_data_V_1_sel = ip2ps_V_data_V_1_sel_rd;

assign ip2ps_V_data_V_1_state_cmp_full = ((ip2ps_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ip2ps_V_data_V_1_vld_out = ip2ps_V_data_V_1_state[1'd0];

assign ip2ps_V_last_V_1_ack_in = ip2ps_V_last_V_1_state[1'd1];

assign ip2ps_V_last_V_1_ack_out = masterOut_TREADY;

assign ip2ps_V_last_V_1_load_A = (ip2ps_V_last_V_1_state_cmp_full & ~ip2ps_V_last_V_1_sel_wr);

assign ip2ps_V_last_V_1_load_B = (ip2ps_V_last_V_1_state_cmp_full & ip2ps_V_last_V_1_sel_wr);

assign ip2ps_V_last_V_1_sel = ip2ps_V_last_V_1_sel_rd;

assign ip2ps_V_last_V_1_state_cmp_full = ((ip2ps_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ip2ps_V_last_V_1_vld_out = ip2ps_V_last_V_1_state[1'd0];

assign ip2ps_V_strb_V_1_ack_in = ip2ps_V_strb_V_1_state[1'd1];

assign ip2ps_V_strb_V_1_ack_out = masterOut_TREADY;

assign ip2ps_V_strb_V_1_load_A = (ip2ps_V_strb_V_1_state_cmp_full & ~ip2ps_V_strb_V_1_sel_wr);

assign ip2ps_V_strb_V_1_load_B = (ip2ps_V_strb_V_1_state_cmp_full & ip2ps_V_strb_V_1_sel_wr);

assign ip2ps_V_strb_V_1_sel = ip2ps_V_strb_V_1_sel_rd;

assign ip2ps_V_strb_V_1_state_cmp_full = ((ip2ps_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ip2ps_V_strb_V_1_vld_out = ip2ps_V_strb_V_1_state[1'd0];

assign masterOut_TDATA = ip2ps_V_data_V_1_data_out;

assign masterOut_TLAST = ip2ps_V_last_V_1_data_out;

assign masterOut_TSTRB = ip2ps_V_strb_V_1_data_out;

assign masterOut_TVALID = ip2ps_V_last_V_1_state[1'd0];

assign tmp_nbreadreq_fu_42_p5 = (ip2psFifo_V_strb_V_empty_n & ip2psFifo_V_last_V_empty_n & ip2psFifo_V_data_V_empty_n);

endmodule //ip2ps_fifo
